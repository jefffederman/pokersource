#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Loic Dachary <loic@dachary.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
import sys, os, tempfile, shutil, platform
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

import libxml2

from twisted.application import app, service
from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import protocol, reactor, defer, error, base
from twisted.python import failure, runtime

#
# Must be done before importing pokerclient or pokerclient
# will have to be patched too.
#
from tests import testclock

from tests.testmessages import silence_all_messages, get_messages, search_output, clear_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
silence_all_messages()

twisted.internet.base.DelayedCall.debug = True

from pokernetwork import pokerdatabase
from pokernetwork import pokerservice
from pokernetwork import pokernetworkconfig
from pokernetwork import pokerclient
from pokernetwork.pokerclientpackets import *
from pokerstats import stats, statslogic

settings_xml_server = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="6" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="20" round="0" position="0" showdown="0" autodeal_max="1" finish="0" messages="60" />

  <listen tcp="19480" />

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" user_create="yes" />
  <database name="pokernetworktest" host="localhost" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>.. ../@srcdir@ @POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""

settings_xml_stats = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings ping="15000" verbose="6" delays="true" poll_frequency="0.1" >
  <server host="127.0.0.1" port="19480" >
    <database name="pokernetworktest" host="localhost" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  </server>
  <database name="pokernetworktest" host="localhost" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>.. ../@srcdir@ @POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
</settings>
"""

class StatsClientBase(unittest.TestCase):

    def destroyDb(self, arg = None):
        if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        else:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -e 'DROP DATABASE IF EXISTS pokernetworktest'")

    # ------------------------------------------------------
    def setUp(self):
        testclock._seconds_reset()
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml_stats, len(settings_xml_stats))
        settings.header = settings.doc.xpathNewContext()
        self.settings_stats = settings
        self.destroyDb()
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml_server, len(settings_xml_server))
        settings.header = settings.doc.xpathNewContext()
        self.db = pokerdatabase.PokerDatabase(settings)

    def tearDown(self):
        clear_all_messages()
        self.destroyDb()

class PokerStatsTestBase(StatsClientBase):

    def setUpServer(self):
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml_server, len(settings_xml_server))
        settings.header = settings.doc.xpathNewContext()
        #
        # Setup server
        #
        self.service = pokerservice.PokerService(settings)
        self.service.startService()
        factory = pokerservice.IPokerFactory(self.service)
        self.p = reactor.listenTCP(19480, factory,
                                   interface="127.0.0.1")

    # ------------------------------------------------------
    def setUp(self):
        StatsClientBase.setUp(self)
        self.setUpServer()

    def cleanSessions(self, arg):
        #
        # twisted Session code has leftovers : disable the hanging delayed call warnings
        # of trial by nuking all what's left.
        #
        pending = reactor.getDelayedCalls()
        if pending:
            for p in pending:
                if p.active():
#                    print "still pending:" + str(p)
                    p.cancel()
        return arg

    def tearDown(self):
        d = self.service.stopService()
        d.addCallback(lambda x: self.p.stopListening())
        d.addCallback(lambda x: StatsClientBase.tearDown(self))
        d.addCallback(self.cleanSessions)
        return d

class ConnectTestCase(PokerStatsTestBase):

    def test01_connect(self):
        app.startApplication(stats.newApplication(self.settings_stats), None)
        d = defer.Deferred()
        reactor.callLater(10, lambda: d.callback(True))
        return d

    def test02_interrupt(self):
        factory = pokerclient.PokerClientFactory(settings = self.settings_stats)
        client = stats.Stat('127.0.0.1', 19480, factory)
        client.startService()
        d = factory.established_deferred
        d.addCallback(lambda x: client.stopService())
        return d
        
    def test03_established(self):
        factory = pokerclient.PokerClientFactory(settings = self.settings_stats)
        reactor.connectTCP('127.0.0.1', 19480, factory)
        return factory.established_deferred

class ApplicationTestCase(unittest.TestCase):

    def test01_no_configuration(self):
        self.assertEqual(None, stats.configureApplication(['/unlikely']))

    def test02_application(self):
        a = stats.configureApplication(['../poker.stats.xml'])
        self.assertEqual(1, len(service.IServiceCollection(a).services))

class LogicTestCase(StatsClientBase):

    class Factory:
        def error(self, str):
            pass
        
    def test01_bootstrap_error(self):
        factory = LogicTestCase.Factory()
        s = stats.PokerStats(factory = factory, connect = False)
        s.state = stats.PokerStats.IDLE
        self.assertEqual(False, s.bootstrap(None, None))

    def test02_ack_error(self):
        factory = LogicTestCase.Factory()
        s = stats.PokerStats(factory = factory, connect = False)
        s.state = stats.PokerStats.IDLE
        self.assertEqual(False, s.ack(None, None))

    def test03_populate(self):
        factory = LogicTestCase.Factory()
        factory.settings = self.settings_stats
        factory.server = 1
        self.db.db.query("INSERT user2money (user_serial, currency_serial, amount)" +
                         " VALUES " +
                         " ( 5, 10, 200), " +
                         " ( 6, 10, 203), " +
                         " ( 7, 10, 48), " +
                         " ( 8, 10, 855), " +
                         " ( 9, 10, 48393), " +
                         " ( 10, 10, 22), " +
                         " ( 11, 10, 484), " +
                         " ( 12, 10, 48), " +
                         " ( 13, 10, 84344), " +
                         " ( 14, 10, 72), " +
                         " ( 15, 10, 84), " +
                         " ( 16, 10, 74848), " +
                         " ( 17, 20, 300)  "
                         )
        s = stats.PokerStats(factory = factory, connect = False)
        s.connect()
        s.create()
        s.populate()
        cursor = self.db.cursor()
        result = cursor.execute("SELECT * FROM rank")
        self.assertEqual(13, cursor.rowcount)
        self.assertEqual((17, 20, 300, 1, 4), cursor.fetchone())
        self.assertEqual((13, 10, 84344, 1, 0), cursor.fetchone())
        self.assertEqual((16, 10, 74848, 2, 0), cursor.fetchone())
        self.assertEqual((9, 10, 48393, 3, 1), cursor.fetchone())
        self.assertEqual((8, 10, 855, 4, 1), cursor.fetchone())
        self.assertEqual((11, 10, 484, 5, 2), cursor.fetchone())
        self.assertEqual((6, 10, 203, 6, 2), cursor.fetchone())
        self.assertEqual((5, 10, 200, 7, 2), cursor.fetchone())
        self.assertEqual((15, 10, 84, 8, 3), cursor.fetchone())
        self.assertEqual((14, 10, 72, 9, 3), cursor.fetchone())
        self.assertEqual((12, 10, 48, 10, 4), cursor.fetchone())
        self.assertEqual((7, 10, 48, 11, 4), cursor.fetchone())
        self.assertEqual((10, 10, 22, 12, 4), cursor.fetchone())
        cursor.close()

class RealTestCase(PokerStatsTestBase):

    def test01_bootstrap_ack(self):
        factory = stats.PokerStatsFactory(settings = self.settings_stats,
                                          server = 1)
        reactor.connectTCP('127.0.0.1', 19480, factory)
        d = defer.Deferred()
        def setState(state):
            factory.pokerstats.state = state
            if state == stats.PokerStats.IDLE:
                reactor.callLater(0, lambda: d.callback(True))
        factory.pokerstats.setState = setState
        return d

# ------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test33"
    suite = loader.suiteFactory()
    suite.addTest(loader.loadClass(ApplicationTestCase))
    suite.addTest(loader.loadClass(ConnectTestCase))
    suite.addTest(loader.loadClass(LogicTestCase))
    suite.addTest(loader.loadClass(RealTestCase))
    return runner.TrialRunner(
        reporter.VerboseTextReporter,
                              tracebackFormat='default',
                              ).run(suite)

# ------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status pokerstats/test-stats.py ) ; ( cd ../pokerstats ; make TESTS='coverage-reset test-stats.py coverage-report' check )"
# End:

