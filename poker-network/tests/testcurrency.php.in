<?php
//
// Copyright (C) 2006 Mekensleep
//
// Mekensleep
// 24 rue vieille du temple
// 75004 Paris
//       licensing@mekensleep.com
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
//
// Authors:
//  Loic Dachary <loic@gnu.org>
//

ini_set('include_path', ini_get('include_path') . ":" . "@top_srcdir@/pokerweb/pages");
ini_set('include_path', ini_get('include_path') . ":" . "@top_srcdir@/pokerweb/conf");

require_once 'PHPUnit2/Framework/TestCase.php';

require_once 'currency.php';

$GLOBALS['currency_db_base'] = 'currencytest';

class testcurrency extends PHPUnit2_Framework_TestCase
{
    private $currency;
  
    protected function setUp()
    {
      $c = mysql_connect($GLOBALS['currency_db_host'], $GLOBALS['currency_db_user'], $GLOBALS['currency_db_password']);
      mysql_query("DROP DATABASE IF EXISTS " . $GLOBALS['currency_db_base'], $c);
      mysql_close($c);
      $this->currency = new currency($GLOBALS['currency_db_base'], $GLOBALS['currency_db_user'], $GLOBALS['currency_db_password']);
    }
    
    public function test_get_note()
    {
      $note = $this->currency->get_note(100);
      $this->assertEquals('http://localhost/currency/', $note[0]);
      $this->assertEquals(1, $note[1]);
      $this->assertEquals(40, strlen($note[2]));
      $this->assertEquals(100, $note[3]);
      $this->assertEquals(TRUE, $this->currency->commit($note[2]));
      $this->assertEquals(TRUE, $this->currency->_check_note($note));
      return $note;
    }

    public function test_change_note()
    {
      $note = $this->test_get_note();
      $other_note = $this->currency->change_note($note[1], $note[2], $note[3]);
      $this->assertEquals('http://localhost/currency/', $note[0]);
      $this->assertEquals(2, $other_note[1]);
      $this->assertEquals(40, strlen($other_note[2]));
      $this->assertNotEquals($note[2], $other_note[2]);
      $this->assertEquals(100, $other_note[3]);
      $this->assertEquals(TRUE, $this->currency->commit($other_note[2]));
      $this->assertEquals(TRUE, $this->currency->_check_note($other_note));
    }
}

//
// Interpreted by emacs
// Local Variables:
// compile-command: "( cd .. ; ./config.status tests/testcurrency.php ) ; ( cd ../tests || cd ../../tests ; make TESTS='testcurrency.php' check )"
// End:
?>
