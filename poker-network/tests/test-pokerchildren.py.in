#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C) 2008       Bradley M. Kuhn <bkuhn@ebb.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#

import sys, os, libxml2
sys.path.insert(0, "@srcdir@/../..")
sys.path.insert(0, "..")

import platform

from twisted.trial import unittest, runner, reporter
from twisted.trial import util
import twisted.internet.base
from twisted.internet import reactor, defer

twisted.internet.base.DelayedCall.debug = True
from twisted.python import failure

from tests.testmessages import silence_all_messages, search_output, clear_all_messages, get_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokernetwork import pokerchildren
from pokernetwork import pokernetworkconfig

config_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<sequence>
</sequence>
"""

class PokerRsyncMockup(pokerchildren.PokerRsync):
    def __init__(self, config, settings, rsync):
        pokerchildren.PokerRsync.__init__(self, config, settings,rsync)
        self.call_publishEvent = []

    def publishEvent(self, event, logs, reason):
        self.call_publishEvent.append((event, logs, reason))
    
            

class PokerChildrenTestCase(unittest.TestCase):

    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
        config = pokernetworkconfig.Config([])
        config.doc = libxml2.parseMemory(config_xml, len(config_xml))
        config.header = config.doc.xpathNewContext()
        self.config = config
        if not os.path.exists("test-pokerchildren-dir"):
            os.mkdir("test-pokerchildren-dir")

    def setSettings(self, settings_xml):
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml, len(settings_xml))
        settings.header = settings.doc.xpathNewContext()
        self.settings = settings

    # -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        del self.settings
        del self.config

    # -----------------------------------------------------------------------------------------------------
    def test01_rsync_ok(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose=\"""" + os.environ.get('VERBOSE_T', '6') + """" >
<user path="test-pokerchildren-dir" />
<rsync source="source" target="target" path="touch" dir="test-pokerchildren-dir" />
</settings>
"""
        self.setSettings(settings_xml)
        process = pokerchildren.PokerRsync(self.config, self.settings, ('rsync', '@SOURCE@-sub', '@TARGET@-sub'))
        d = defer.Deferred()
        process.spawn()
        def rsync_done(result):
            self.failIf(os.path.exists("test-pokerchildren-dir/rsync"), "rsync exists")
            self.failUnless(os.path.exists("test-pokerchildren-dir/target-sub"), "target-sub")
            self.failUnless(os.path.exists("test-pokerchildren-dir/source-sub"), "source-sub")
            return result

        def rsync_failed(logs, reason):
            d.errback(failure.Failure("rsync_failed " + str(logs) + str(reason)))

        process.registerHandler(pokerchildren.RSYNC_DONE, lambda: d.callback(True))
        process.registerHandler(pokerchildren.RSYNC_FAILED, rsync_failed)
        d.addCallback(rsync_done)
        return d

    # -----------------------------------------------------------------------------------------------------
    def test02_rsync_fail(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose=\"""" + os.environ.get('VERBOSE_T', '6') + """" >
<user path="test-pokerchildren-dir" />
<rsync source="source" target="target" path="sh" dir="test-pokerchildren-dir" />
</settings>
"""
        self.setSettings(settings_xml)
        process = pokerchildren.PokerRsync(self.config, self.settings, ('rsync', '-c', 'exit 5'))
        d = defer.Deferred()
        process.spawn()
        def rsync_done(failed):
            if not failed:
                self.fail(failure.Failure("rsync_succeeded but was expected to fail"))
            return failed

        def rsync_failed(logs, reason):
            print "rsync_failed as expected : " + str(logs) + str(reason)
            d.callback(True)

        process.registerHandler(pokerchildren.RSYNC_DONE, lambda: d.callback(None))
        process.registerHandler(pokerchildren.RSYNC_FAILED, rsync_failed)
        d.addCallback(rsync_done)
        return d


    # -----------------------------------------------------------------------------------------------------
    def test03_child_kill(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose="6" >
<web browser="sleep">6</web>
</settings>
"""
        clear_all_messages()
        self.setSettings(settings_xml)
        process = pokerchildren.PokerChildBrowser(self.config, self.settings, '0')
        d = defer.Deferred()
        def process_kill(result):
            self.assertEquals(search_output("PokerChildBrowser: command line ['sleep', '60']"), True)
            self.assertNotEqual(-1, process.kill())
            self.assertEquals(search_output("sleep pid"), True)
            self.assertEquals(search_output("saved in ./sleep.pid"), True)
            self.assertEquals(search_output("killing sleep 6"), True)
            return result
        d.addCallback(process_kill)
        reactor.callLater(1, lambda: d.callback(True))
        return d

    # -----------------------------------------------------------------------------------------------------
    def test04_rsync_fail_host_does_not_respond(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose=\"""" + os.environ.get('VERBOSE_T', '6') + """" >
<user path="test-pokerchildren-dir" />
<rsync source="" target="" path="rsync" dir="" />
</settings>
"""
        self.setSettings(settings_xml)
        process = PokerRsyncMockup(self.config, self.settings, ('-avhn ',"dabada"))
        process.errReceived("rsync: failed to connect to tatawin")
        d = defer.Deferred()
        class ReasonMockup:
            def __init__(self):
                self.value = "test"
        reason = ReasonMockup()

        process.processEnded(reason)
        self.assertEquals(2, len(process.call_publishEvent))
        (event, dummy1, dummy2) = process.call_publishEvent[0]
        self.assertEquals(pokerchildren.RSYNC_HOST_DOES_NOT_RESPOND, event)
        (event, dummy1, dummy2) = process.call_publishEvent[1]
        self.assertEquals(pokerchildren.RSYNC_FAILED, event)

    # -----------------------------------------------------------------------------------------------------

    def test05_rsync_fail_no_network(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose=\"""" + os.environ.get('VERBOSE_T', '6') + """" >
<user path="test-pokerchildren-dir" />
<rsync source="" target="" path="rsync" dir="" />
</settings>
"""
        self.setSettings(settings_xml)
        process = PokerRsyncMockup(self.config, self.settings, ('-avhn ',"dabada"))
        process.errReceived("rsync: getaddrinfo: poker.pok3d.com 873: Temporary failure in name resolution")
        d = defer.Deferred()
        class ReasonMockup:
            def __init__(self):
                self.value = "test"
        reason = ReasonMockup()

        process.processEnded(reason)
        self.assertEquals(2, len(process.call_publishEvent))
        (event, dummy1, dummy2) = process.call_publishEvent[0]
        self.assertEquals(pokerchildren.RSYNC_NO_NETWORK, event)
        (event, dummy1, dummy2) = process.call_publishEvent[1]
        self.assertEquals(pokerchildren.RSYNC_FAILED, event)
    # -----------------------------------------------------------------------------------------------------
    def test06_child_kill_missing_pid(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose="6">
<web browser="sleep">6</web>
</settings>
"""
        self.setSettings(settings_xml)
        process = pokerchildren.PokerChildBrowser(self.config, self.settings, '0')
        d = defer.Deferred()
        def process_kill(result):
            process.pid = 0
            clear_all_messages()
            self.assertNotEqual(-1, process.kill())
            self.assertEquals(search_output("found sleep pid"), True)
            self.assertEquals(search_output("in ./sleep.pid"), True)
            return result
        d.addCallback(process_kill)
        reactor.callLater(1, lambda: d.callback(True))
        return d
    # -----------------------------------------------------------------------------------------------------
    # This test below will do nothing on Windows sytems.  It's designed to
    # exercise some of the windows code (and produce an error, of course,
    # since we aren't on Windows.  I haven't used Windows since 1999, so I
    # have no ability to fix this test properly.  However, I think the the
    # return True will at least cause this not to fail on Windows.
    def test07_child_force_windows_system(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose="6">
<web browser="sleep">6</web>
</settings>
"""
        if platform.system() == "Windows":
            return True
        self.setSettings(settings_xml)
        process = pokerchildren.PokerChildBrowser(self.config, self.settings, '0')
        d = defer.Deferred()
        def process_kill(result):
            def fakeSystem():
                return "Windows"
            origSystem = platform.system
            platform.system = fakeSystem
            clear_all_messages()
            self.assertNotEqual(-1, process.kill())
            self.assertEquals(search_output("killing sleep 6"), True)
            self.assertEquals(search_output("sleep terminate()"), True)
            platform.system = origSystem
            return result
        d.addCallback(process_kill)
        reactor.callLater(1, lambda: d.callback(True))
        return d
    # -----------------------------------------------------------------------------------------------------
    def test08_brokenKill(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose="6">
<web browser="sleep">6</web>
</settings>
"""
        self.setSettings(settings_xml)
        process = pokerchildren.PokerChildBrowser(self.config, self.settings, '0')
        d = defer.Deferred()
        def forceRaise(a, b):
            raise OSError
        origKill = os.kill
        os.kill = forceRaise
        def process_kill(result):
            clear_all_messages()
            self.assertNotEqual(-1, process.kill())
            self.assertEquals(search_output("killing sleep 6"), True)
            self.assertEquals(search_output("sleep kill"), True)
            self.assertEquals(search_output(",9) : "), True)
            os.kill = origKill
            return result
        d.addCallback(process_kill)
        reactor.callLater(1, lambda: d.callback(True))
        return d
    # -----------------------------------------------------------------------------------------------------
    def test09_brokenWaitPID(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose="6">
<web browser="sleep">6</web>
</settings>
"""
        self.setSettings(settings_xml)
        process = pokerchildren.PokerChildBrowser(self.config, self.settings, '0')
        d = defer.Deferred()
        def forceRaise(a, b):
            raise OSError
        origWaitpid = os.waitpid
        os.waitpid = forceRaise
        def process_kill(result):
            clear_all_messages()
            self.assertNotEqual(-1, process.kill())
            self.assertEquals(search_output("killing sleep 6"), True)
            self.assertEquals(search_output("cannot wait for sleep process"), True)
            self.assertEquals(search_output("to die : "), True)
            os.waitpid = origWaitpid
            return result
        d.addCallback(process_kill)
        reactor.callLater(1, lambda: d.callback(True))
        return d
# -----------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------
    def test10_neverReady(self):
        settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings verbose="6">
<web browser="sleep"></web>
</settings>
"""
        self.setSettings(settings_xml)
        process = pokerchildren.PokerChildBrowser(self.config, self.settings, '0')
        d = defer.Deferred()
        def checkReady(result):
            self.assertEquals(search_output("PokerChildBrowser: no URL in /settings/web, cannot browse web"), True)
            return result
        d.addCallback(checkReady)
        reactor.callLater(1, lambda: d.callback(True))
        return d
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerengineconfig

# -----------------------------------------------------------------------------------------------------
def Run():
    util.DEFAULT_TIMEOUT_DURATION = 200
    loader = runner.TestLoader()
#    loader.methodPrefix = "test10"
    suite = loader.suiteFactory()
    suite.addTest(loader.loadClass(PokerChildrenTestCase))
    return runner.TrialRunner(reporter.TextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)

# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerchildren.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokerchildren.py' TESTS='coverage-reset test-pokerchildren.py coverage-report' check )"
# End:

