#!/usr/bin/python2.4
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C)       2008 Bradley M. Kuhn <bkuhn@ebb.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest

from tests.testmessages import silence_all_messages, clear_all_messages, get_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
verbose = 4
silence_all_messages()

from pokerui.pokerrenderer import PokerRenderer
from pokernetwork.pokerclientpackets import *

class PokerRendererMockup(PokerRenderer):
    def __init__(self):
	self.factory = PokerFactoryMockup()
	self.chat_words = [{'in': "nh",
			    'out': "nice hand",
			    'event': "emThumbUp"}]
	self.verbose = 4
	self.protocol = PokerProtocolMockup()
	self._packetRendered = None

    def render(self, packet):
	self._packetRendered = packet

class PokerProtocolMockup:
    def __init__(self):
	self.packets = []
    def schedulePacket(self, packet):
	self.packets.append(packet)

class PokerFactoryMockup:
    def __init__(self):
	self.verbose = 4
	self.chat_config = {'max_chars': 80,
			    'line_length': 80}
        self.clearMessages()

    def packet2game(self, packet):
	pass

    def clearMessages(self):
        self.messages = []

    def message(self, str):
        self.messages.append(str)

    def getMessages(self):
        return self.messages


class PokerPacketChatMockup:
    def __init__(self, message):
	self.message = message
	self.serial = 0
	self.game_id = 0

class PokerPacketMockup:
    def __init__(self, type):
	self.type = type
        self.hand = "best hand"

class PokerRendererTestCase(unittest.TestCase):
    
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererMockup()
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.renderer = None
        
    # -----------------------------------------------------------------------------------------------------    
    def test_chatFormatMessage(self):
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("inhaler"))
	self.assertEquals("inhaler", message)
	self.assertEquals(0, len(self.renderer.protocol.packets))
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("nh"))
	self.assertEquals("nice hand", message)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[0].word)
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("nh nh nh"))
	self.assertEquals("nice hand nice hand nice hand", message)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[1].word)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[2].word)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[3].word)

    #------------------------------------------------------------------------------------------------------
    def test_handleConnection(self):
	bestCard_packet = PokerPacketMockup(PACKET_POKER_BEST_CARDS)
        clear_all_messages()
	self.renderer._handleConnection(PokerProtocolMockup(), bestCard_packet)
        self.assertEquals("best hand", self.renderer._packetRendered.hand)

class PokerFactoryUpdateInterfaceWindowsMockup:
    def __init__(self):
	self.interface = None

class PokerRendererUpdateInterfaceWindowsMockup(PokerRenderer):
    def __init__(self):
	self.renderCalled = False
	self.packet = None
	self.packets = []
	self.factory = PokerFactoryUpdateInterfaceWindowsMockup()

    def render(self, packet):
	self.renderCalled = True
	self.packet = packet
	self.packets.append(packet)

from pokerui.pokerrenderer import LOBBY
from pokerui.pokerrenderer import TOURNAMENTS
from pokerui.pokerrenderer import CASHIER
from pokerui.pokerrenderer import LOGIN

class PokerRendererUpdateInterfaceWindowsTestCase(unittest.TestCase):

    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererUpdateInterfaceWindowsMockup()

    # -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        self.renderer = None

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupLobbyToCashier(self):
	previous = LOBBY
	next = CASHIER
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("hide", self.renderer.packet.command)	

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupTournamentsToCashier(self):
	previous = TOURNAMENTS
	next = CASHIER
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("hide", self.renderer.packet.command)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToLobby(self):
	previous = CASHIER
	next = LOBBY
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("show", self.renderer.packet.command)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToLobby(self):
	previous = CASHIER
	next = TOURNAMENTS
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("show", self.renderer.packet.command)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToOther(self):
	previous = CASHIER
	next = LOGIN
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(False, self.renderer.renderCalled)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToOther(self):
	previous = LOBBY
	next = TOURNAMENTS
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(False, self.renderer.renderCalled)

    # -----------------------------------------------------------------------------------------------------
    def test_ShowLobby(self):
	self.renderer.showLobby()
	self.assertEquals("tournaments_lobby_tabs_window", self.renderer.packets[0].window)
	self.assertEquals("hide", self.renderer.packets[0].command)
	self.assertEquals("lobby_window", self.renderer.packets[1].window)
	self.assertEquals("show", self.renderer.packets[1].command)
	self.assertEquals("table_info_window", self.renderer.packets[2].window)
	self.assertEquals("show", self.renderer.packets[2].command)
	self.assertEquals("cashier_button_window", self.renderer.packets[3].window)
	self.assertEquals("show", self.renderer.packets[3].command)

###############################################################################
from pokerui import pokerinteractor
from pokerui import pokerrenderer
from pokernetwork import pokerpackets

class PokerInteractorsTests(unittest.TestCase):
    class MockGame:
        knownGameId = 111
        unknownGameId = 123
        def __init__(self, id):
            self.id = id

    class MockConfig:
        def headerGetProperties(self, lookup):
            return [ lookup ]
            
    class MockSettings:
        def headerGet(self, lookup):
            return [ lookup ]
            
    class MockPokerFactory:
        def __init__(self):
            self.verbose = 4
            self.clearMessages()
            self.config = PokerInteractorsTests.MockConfig()
            self.settings = PokerInteractorsTests.MockSettings()
            self.display = None

        def clearMessages(self):
            self.messages = []

        def message(self, str):
            self.messages.append(str)

        def error(self, str):
            self.messages.append("ERROR: " + str)

        def getMessages(self):
            return self.messages

        def packet2game(self, packet):
            return PokerInteractorsTests.MockGame(packet.game_id)

        def getGame(self, gameId):
            if gameId == PokerInteractorsTests.MockGame.knownGameId:
                return PokerInteractorsTests.MockGame(gameId)
            elif gameId == PokerInteractorsTests.MockGame.unknownGameId:
                return None
            else:
                self.fail("given unknown game id %d " % gameId)
                return None

    class MockInteractor:
        def __init__(self, myName, action, display, select, nameMap, gameId, verbose = 0, prefix = ""):
            self.game_id = gameId
            self.name = myName
            self.resetAllTestValues()
            global countMockInteractorsInstantiated
            countMockInteractorsInstantiated += 1

        def resetAllTestValues(self):
            self.state = False
            self.selected_value = None
            self.updateCalled = False

        def select(self, packet):
            self.select_value = packet

        def update(self):
            self.updateCalled = True

        def stateHasChanged(self):
            return self.state

        def getDefault(self):
            return "MOCK default"

        def getClicked(self):
            return "MOCK clicked"

    class MockPokerRenderer:
        # Simply keep track of rendered Packets so that we can later assert their arrival (or non-arrival)

        def __init__(self):
            self.renderedPackets = []

        def render(self,  packet):
            self.renderedPackets.append(packet)

    class MockPokerProtocol:
        def registerHandler(self, boolVal, packetVal, CallbackFunc):
            global currentSuite
            currentSuite.assertEquals(isinstance(boolVal, bool), True)
            currentSuite.assertEquals(isinstance(packetVal, int), True)

        def getCurrentGameId(self):
            return PokerInteractorsTests.MockGame.knownGameId
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
        global currentSuite
        currentSuite = self
        silence_all_messages()
        clear_all_messages()
        global countMockInteractorsInstantiated
        countMockInteractorsInstantiated = 0

        # Replace the PokerInteractor class with our MockInteractor
        global SavePokerInteractorClass
        SavePokerInteractorClass = pokerrenderer.PokerInteractor
        pokerrenderer.PokerInteractor = PokerInteractorsTests.MockInteractor
        from pokerui.pokerrenderer import PokerInteractors
        
	self.interactors = PokerInteractors(PokerInteractorsTests.MockPokerFactory(),
                                            PokerInteractorsTests.MockPokerRenderer())
        self.assertEquals(get_messages(), [], self.interactors.factory.getMessages())
        clear_all_messages()
        self.interactors.factory.clearMessages()
	self.interactors.setProtocol(PokerInteractorsTests.MockPokerProtocol())
        self.assertEquals(get_messages(), [], self.interactors.factory.getMessages())
    # -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        global SavePokerInteractorClass
        pokerrenderer.PokerInteractor = SavePokerInteractorClass
    # -----------------------------------------------------------------------------------------------------
    def test01_handleBadPacket(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        self.interactors._handleConnection(self.interactors.protocol,
                                           PacketPokerError(message = "feed this back to me"))
        self.assertEquals(self.interactors.factory.getMessages(), ['PokerInteractors::_handleConnection: type = ERROR(53) serial = 0 game_id = 0 message = feed this back to me, code = 0, other_type = ERROR'])
        self.assertEquals(get_messages(), ['ERROR PokerInteractors: ignoring packet of unknown type in _handleConnection(): type = ERROR(53) serial = 0 game_id = 0 message = feed this back to me, code = 0, other_type = ERROR'])
        return True
    # -----------------------------------------------------------------------------------------------------
    def test02_interactorDisplayNode_UnknownGame(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        self.interactors.interactorDisplayNode(PokerInteractorsTests.MockInteractor("Unknown Game",
                           None, None, None, None, PokerInteractorsTests.MockGame.unknownGameId))
        # No output is expected, as the gameID is unknown so nothing should be returned
        self.assertEquals([], self.interactors.factory.getMessages(), get_messages())
        self.assertEquals(self.interactors.renderer.renderedPackets, [])
    # -----------------------------------------------------------------------------------------------------
    def test03_interactorDisplayNode_KnownGameSameState(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        self.interactors.interactorDisplayNode(PokerInteractorsTests.MockInteractor("Known Game",
                           None, None, None, None, PokerInteractorsTests.MockGame.unknownGameId))
        # No output is expected, as the state will be left the same on the Interactor
        self.assertEquals([], self.interactors.factory.getMessages(), get_messages())
        self.assertEquals(self.interactors.renderer.renderedPackets, [])
    # -----------------------------------------------------------------------------------------------------
    def test04_interactorDisplayNode_KnownGameChangedState(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        myInteractor = PokerInteractorsTests.MockInteractor("Known Game",
                           None, None, None, None, PokerInteractorsTests.MockGame.knownGameId)
        myInteractor.state = True
        self.interactors.interactorDisplayNode(myInteractor)

        # Now we get output
        self.assertEquals(self.interactors.factory.getMessages(),
                          ['interactor:Known Game default=MOCK default clicked=MOCK clicked']) 
        self.assertEquals([], get_messages())

        for p in self.interactors.renderer.renderedPackets:
            self.assertEquals(p.type, PACKET_POKER_DISPLAY_NODE)
            self.assertEquals(p.name, "Known Game")
            self.assertEquals(p.selection, None)
            self.assertEquals(p.game_id, 0)
            if p.state == "default":
                self.assertEquals(p.style, "MOCK default")
            elif p.state == "clicked":
                self.assertEquals(p.style, "MOCK clicked")
            else:
                self.fail("Unknown state in renderedPackets: %s" % p.state)
        return True
    # -----------------------------------------------------------------------------------------------------
    def test05_interactorsSyncDisplay_NoFactoryDisplay(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()

        self.interactors.interactorsSyncDisplay(PokerInteractorsTests.MockGame.knownGameId)
        
        # No output is expected, as factory.display is not set
        self.assertEquals([], self.interactors.factory.getMessages(), get_messages())
        self.assertEquals(self.interactors.renderer.renderedPackets, [])
        return True
    # -----------------------------------------------------------------------------------------------------
    def test06_interactorsSyncDisplay_displayOn(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        from pokerui.pokerinteractor import PokerInteractor

        self.interactors.factory.display = True

        self.interactors.interactorsSyncDisplay(PokerInteractorsTests.MockGame.knownGameId)
        
        self.assertEquals(self.interactors.factory.getMessages(), ['interactorsSyncDisplay', 'interactor:fold default=MOCK default clicked=MOCK clicked', 'interactor:call default=MOCK default clicked=MOCK clicked', 'interactor:check default=MOCK default clicked=MOCK clicked', 'interactor:raise default=MOCK default clicked=MOCK clicked'])
        self.assertEquals([], get_messages())
        counts = { 'default' : 0, 'clicked' : 0, 'fold' : 0, 'check' : 0, 'raise' : 0, 'call' : 0}
        for p in self.interactors.renderer.renderedPackets:
            self.assertEquals(p.type, PACKET_POKER_DISPLAY_NODE)
            self.assertEquals(p.selection, None)
            self.assertEquals(p.game_id, 0)
            if p.state == "default":
                self.assertEquals(p.style, "MOCK default")
                counts['default'] += 1
            elif p.state == "clicked":
                self.assertEquals(p.style, "MOCK clicked")
                counts['clicked'] += 1
            else:
                self.fail("Unknown state in renderedPackets: %s" % p.state)

            counts[p.name] += 1

        for ii in ['default', 'clicked']:
            self.assertEquals(counts[ii], 4)
            del counts[ii]

        for ii in ['fold', 'check', 'raise', 'call']:
            self.assertEquals(counts[ii], 2)
            del counts[ii]
        self.assertEquals(counts, {})

        return True
    # -----------------------------------------------------------------------------------------------------
    def test07_interactorSelected_wrongGame(self):
        global countMockInteractorsInstantiated

        clear_all_messages()
        self.interactors.factory.clearMessages()

        self.interactors.interactorSelected(PacketPokerFold(serial = 0, game_id = 
                                                            PokerInteractorsTests.MockGame.unknownGameId))
        # Since we sent an unknown game ide, the interactorSelector should return nothing and no action
        self.assertEquals(self.interactors.factory.getMessages(), [])
        self.assertEquals(get_messages(), [])

        self.assertEquals(countMockInteractorsInstantiated, 0)
    # -----------------------------------------------------------------------------------------------------
    def helper_interactorSelected(self, type, packet):
        global countMockInteractorsInstantiated
        clear_all_messages()
        self.interactors.factory.clearMessages()

        gameId = PokerInteractorsTests.MockGame.knownGameId

        self.interactors.interactorSelected(packet)

        self.assertEquals(countMockInteractorsInstantiated, 4)
        self.assertEquals(self.interactors.factory.getMessages(), [])
        self.assertEquals(get_messages(), [])

        interactor = self.interactors.interactors_map[gameId].items[type]
        self.assertEquals(interactor.select_value, packet)
        self.assertEquals(interactor.updateCalled, True)

    def test08_interactorSelected_rightGame_fold(self):
        global countMockInteractorsInstantiated
        clear_all_messages()
        self.interactors.factory.clearMessages()

        gameId = PokerInteractorsTests.MockGame.knownGameId
        self.helper_interactorSelected('fold', PacketPokerFold(serial = 0, game_id = gameId))

    def test09_interactorSelected_rightGame_check(self):
        global countMockInteractorsInstantiated
        clear_all_messages()
        self.interactors.factory.clearMessages()

        gameId = PokerInteractorsTests.MockGame.knownGameId
        self.helper_interactorSelected('check', PacketPokerCheck(serial = 0, game_id = gameId))

    def test10_interactorSelected_rightGame_raise(self):
        global countMockInteractorsInstantiated
        clear_all_messages()
        self.interactors.factory.clearMessages()

        gameId = PokerInteractorsTests.MockGame.knownGameId
        self.helper_interactorSelected('raise', PacketPokerRaise(serial = 0, game_id = gameId, amount = 100))

    def test11_interactorSelected_rightGame_call(self):
        global countMockInteractorsInstantiated
        clear_all_messages()
        self.interactors.factory.clearMessages()

        gameId = PokerInteractorsTests.MockGame.knownGameId
        self.helper_interactorSelected('call', PacketPokerCall(serial = 0, game_id = gameId))
    # -----------------------------------------------------------------------------------------------------
    def test12_interactorSelected_rightGame_wrongName(self):
        global countMockInteractorsInstantiated
        clear_all_messages()
        self.interactors.factory.clearMessages()

        gameId = PokerInteractorsTests.MockGame.knownGameId

        self.interactors.interactorSelected(PacketPokerPosition(serial = 0, game_id = gameId))

        self.assertEquals(countMockInteractorsInstantiated, 0)
        self.assertEquals(self.interactors.factory.getMessages(), ['ERROR: *CRITICAL* unexpected packet selected: type = POKER_POSITION(54) game_id = 111, position = -1, serial = 0 '])
        self.assertEquals(get_messages(), [])
###############################################################################
# I wrote the new test class below, PokerRendererTests, even though there
# were some test cases above already.  I didn't like how the mock up was
# structured; I prefer to mock up only the classes that it depends on if I
# can, not the class being tested itself.  I understand the reasons for
# it; it's just not my style, I guess. :)

from pokerui.pokerinterface import PokerInterface

class PokerRendererTests(unittest.TestCase):
    class MockConfig:
        def headerGet(self, lookup):
            return None
        def headerGetProperties(self, lookup):
            if lookup == "/sequence/chatwords/word":
                return []
            else:
                return None
            
    class MockSettings:
        def __init__(self, doBreakTourney = False, doBreakLobby = False):
            self.breakTourney = doBreakTourney
            self.breakLobby = doBreakLobby
        def headerGetProperties(self, lookup):
            if lookup == "/settings/tournaments":
                if self.breakTourney:
                    return None
                else:
                    return [ { 'currency_serial' : 0 } ]
            elif lookup == '/settings/lobby':
                if self.breakLobby:
                    return None
                else:
                    return [ { 'currency_serial' : 0 } ]
            return None

    class MockPlayer:
        def __init__(self):
            self.wait_for = self.sit_requested = self.auto = None
            self.sit_out_next_turn = self.sit_out = self.auto_blind_ante = None

    class MockGame:
        def __init__(self, makeItRun = False):
            self.runningFlag = makeItRun

        def isTournament(self): return False

        def getPlayer(self, id):
            if id == -1:
                return None
            else:
                return PokerRendererTests.MockPlayer()
        def isRunning(self):
            return self.runningFlag

    class MockSkin:
        def interpret(self, url, outfit):
            return (url, outfit)

    class MockPokerFactory:

        def __init__(self, breakTourneyConfig = False, breakLobbyConfig = False, noGameObject = False,
                     makeGameRun = False):
            self.name = "MockUp"
            self.password = "you_mock_me,sir"
            self.verbose = 4
            self.remember = True
            self.display = None
            self.config = PokerRendererTests.MockConfig()
            self.settings = PokerRendererTests.MockSettings(doBreakTourney = breakTourneyConfig, 
                                                            doBreakLobby = breakLobbyConfig)
            self.interface = PokerRendererTests.MockInterface()
            self.noGame = noGameObject
            self.gameIsRunning = makeGameRun
            self.chat_config = { 'max_chars' : 60, 'line_length' : 20 }
            self.urlValue = None
            self.outfitValue = None

        def getSkin(self):
            return PokerRendererTests.MockSkin()

        def getUrl(self):
            return self.urlValue

        def getOutfit(self):
            return self.outfitValue

        def getGame(self,gameId):
            if self.noGame:
                return None
            else:
                global currentSuite
                currentSuite.assertEquals(gameId, 2344)
                return PokerRendererTests.MockGame(makeItRun = self.gameIsRunning)
        def packet2game(self, packet):
            if self.noGame:
                return None
            else:
                return PokerRendererTests.MockGame()

    class MockUser:
        def __init__(self, isLoggedInVal = False):
            self.isLoggedIn = isLoggedInVal
        def isLogged(self):
            return self.isLoggedIn

    class MockPokerProtocol:
        def __init__(self, setUserLoggedIn = False, validGameId = True):
            self.user = PokerRendererTests.MockUser(setUserLoggedIn)
            self.serialValue = -1
            self.sentPackets = []
            self.scheduledPackets = []
            self.validGame = validGameId
            self.doLagmax = None

        def registerHandler(self, strVal, packetVal, CallbackFunc):
            pass

        def registerLagmax(self, lagmaxFunc):
            self.doLagmax = lagmaxFunc

        def getSerial(self):
            return self.serialValue

        def getCurrentGameId(self):
            if self.validGame:
                return 2344
            else:
                return None

        def schedulePacket(self, pack):
            self.scheduledPackets.append(pack)

        def sendPacket(self, pack):
            self.sentPackets.append(pack)

        def getName(self):
            return "Mock Name"
                
    class MockInterface(PokerInterface):
        def __init__(self):
            self.verbose = 5
            PokerInterface.__init__(self)
            self.calledCount_sitActionsToggleSitOut = 0
            self.messageBoxes = []

        def showMenu(self):
            pass
        def updateMenu(self, settings):
            pass
        def requestLogin(self, user, password, remember):
            global currentSuite
            currentSuite.assertEquals(user, 'MockUp')
            currentSuite.assertEquals(password, 'you_mock_me,sir')
            currentSuite.assertEquals(remember, 1)

        def messageBox(self, message):
            global currentSuite
            currentSuite.assertEquals(isinstance(message, str), True)
            self.messageBoxes.append(message)

        def updateCashier(self, name, email, val, *kwargs):
            global currentSuite
            currentSuite.assertEquals(name, "Mock Name")
            currentSuite.assertEquals(email, "mock@example.org")
            currentSuite.assertEquals(val, 'Mock Up\n\n\n  \n')
            for ii in kwargs:
                currentSuite.assertEquals(ii, '0C')
        def sitActionsToggleSitOut(self):
            self.calledCount_sitActionsToggleSitOut += 1

    class MockDisplay:
        def __init__(self, pack = None):
            self.expectPackets = [ ]
            if pack: self.expectPackets.append(pack)
            self.calledCount = 0

        def _addExpectedPacket(self, packet):
            self.expectPackets.append(packet)

        def setRenderer(self, renderer):
            global currentSuite
            currentSuite.assertEquals(currentSuite.renderer, renderer)

        def render(self, packet):
            global currentSuite
            newList = []
            for p in self.expectPackets:
                dd = pack.__dict__
                for (kk, vv) in p.__dict__.iteritems():
                    if dd.has_key(kk) and dd[kk] == vv:
                        del dd[kk]
                    else:
                        break
                if dd == {}:
                    found = True
                else:
                    newList.append(p)
                    break
                currentSuite.assertEquals(found, True)
                self.expectPackets = newList
                self.calledCount += 1
        
    def setUp(self):
        global currentSuite
        currentSuite = self
        silence_all_messages()
        clear_all_messages()
        self.factory = PokerRendererTests.MockPokerFactory()
	self.renderer = PokerRenderer(self.factory)
        self.assertEquals(get_messages(), [])
        clear_all_messages()
    def tearDown(self):
        pass
    # -----------------------------------------------------------------------------------------------------
    def test01_testInitBadSettings(self):
        # This is to test various critical warnings in the PokerRenderer.__init__().  All the stuff
        # in the Settings, Config, and Factor mock ups regarding "broken" have to do with this

        clear_all_messages()
        itFailed = False
        try:
            myRenderer = PokerRenderer(PokerRendererTests.MockPokerFactory(breakTourneyConfig = True))
        except TypeError, te:
            itFailed = True
            self.assertEquals(te.__str__(), "'NoneType' object does not support item assignment")
        self.assertEquals(itFailed, True)
        self.assertEquals(get_messages(), ['ERROR *CRITICAL*: missing /settings/tournaments'])

        clear_all_messages()
        itFailed = False
        try:
            myRenderer = PokerRenderer(PokerRendererTests.MockPokerFactory(breakLobbyConfig = True))
        except TypeError, te:
            itFailed = True
            self.assertEquals(te.__str__(), "'NoneType' object does not support item assignment")
        self.assertEquals(itFailed, True)
        self.assertEquals(get_messages(), ['ERROR *CRITICAL*: missing /settings/lobby'])
    # -----------------------------------------------------------------------------------------------------
    def test02_interfaceReadyNoProtocol(self):
        clear_all_messages()
        self.renderer.interfaceReady(PokerRendererTests.MockInterface())
        self.assertEquals(get_messages(), ['connection not established, will ask password later'])
    # -----------------------------------------------------------------------------------------------------
    def test03_interfaceReadyWithProtocol(self):
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol())
        self.renderer.interfaceReady(PokerRendererTests.MockInterface())
        m = get_messages()
        self.assertEquals(len(m), 2)
        self.assertEquals(m[0], 'connection ready, ask for password')
        self.assertEquals(m[1].find('changeState idle => login (args =') >= 0, True)
    # -----------------------------------------------------------------------------------------------------
    def test04_handleMenuQuit(self):
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol())
        self.renderer.interfaceReady(PokerRendererTests.MockInterface())
        m = get_messages()
        self.assertEquals(len(m), 2)
        self.assertEquals(m[0], 'connection ready, ask for password')
        self.assertEquals(m[1].find('changeState idle => login (args =') >= 0, True)
        clear_all_messages()
        self.renderer.handleMenu("quit", None)
        self.assertEquals(get_messages(), ['pythonEvent QUIT None',
                                           'changeState login => quit (args = (), kwargs = {})'])
    # -----------------------------------------------------------------------------------------------------
    def test05_sitOutButNoGame(self):
        clear_all_messages()
        myRenderer = PokerRenderer(PokerRendererTests.MockPokerFactory(noGameObject = True))
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        myRenderer.setProtocol(PokerRendererTests.MockPokerProtocol())
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        myRenderer.sitOut(False)
        self.assertEquals(get_messages(), ['WARNING sitOut() when no current game active'])
    # -----------------------------------------------------------------------------------------------------
    def test06_sitOutButWithGameBadPlayer(self):
        # By default, proto returns a bad game id of -1
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol())
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        self.renderer.sitOut(False)
        self.assertEquals(get_messages(), ['WARNING sitOut() for a non existing me-serial -1'])
    # -----------------------------------------------------------------------------------------------------
    def test07_chatFormatMessage(self):
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])
   
        clear_all_messages()
        self.renderer.chat_words = [{'in': "nh",
			    'out': "nice hand",
			    'event': "emThumbUp"}]
        proto.scheduledPackets = []
        self.renderer.chatFormatMessage(PacketPokerChat(message = "welcome. nh ."))
        self.assertEquals(get_messages(), ["[{'out': 'nice hand', 'event': 'emThumbUp', 'in': 'nh'}]", 'chat word (nh) not found', 'chat word (nh) found => sending (emThumbUp) event', 'render schedulePacket POKER_CHAT_WORD  type = 203 length = 22 serial = 0 cookie =  game_id = 0 word = emThumbUp', 'chat word (nh) not found'])
        cnt = 0
        for pack in proto.scheduledPackets:
            cnt += 1
            self.assertEquals(pack.type, PACKET_POKER_CHAT_WORD)
            self.assertEquals(pack.length, 22)
            self.assertEquals(pack.serial, 0)
            self.assertEquals(pack.game_id, 0)
            self.assertEquals(pack.word, 'emThumbUp')
    # -----------------------------------------------------------------------------------------------------
    def test08_chatLineNoGame(self):
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol(validGameId = False))
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        self.renderer.chatLine("testing line")
        self.assertEquals(get_messages(), ["WARNING chatLine() while no current game active"])
    # -----------------------------------------------------------------------------------------------------
    def test09_showMessageNoCallback(self):
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol(validGameId = False))
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        self.renderer.showMessage("1 2 1 2 this is just a test.", None)
        self.assertEquals(get_messages(), ["1 2 1 2 this is just a test."])
    # -----------------------------------------------------------------------------------------------------
    def test10_updateCashier(self):
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol())
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        self.renderer.updateCashier(PacketPokerPersonalInfo(money = {}, email = 'mock@example.org',
                                                            firstname = "Mock", lastname = "Up"))
        self.assertEquals(get_messages(), ['updateCashier'])
    # -----------------------------------------------------------------------------------------------------
    def test11_handleSerial(self):
        clear_all_messages()
        self.renderer.setProtocol(PokerRendererTests.MockPokerProtocol())
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        p = PacketSerial(serial = 123)
        self.factory.display = PokerRendererTests.MockDisplay()
        self.renderer.handleSerial(p)
        self.assertEquals(get_messages(), ['handleSerial: we now have serial 123'])
        self.assertEquals(self.factory.display.calledCount, 0)
    # -----------------------------------------------------------------------------------------------------
    def test12_handleConnectionVariousMessages(self):
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        self.renderer._handleConnection(proto, PacketPokerHandList(hands = []))
        self.assertEquals(get_messages(),
                          ['ERROR *CRITICAL* handleGame: unexpected state for POKER_HAND_LIST idle'])
        clear_all_messages()
        self.renderer._handleConnection(proto, PacketPokerHandHistory(history = []))
        self.assertEquals(get_messages(),
                          ['ERROR *CRITICAL* handleGame: unexpected state for POKER_HAND_HISTORY idle'])
        clear_all_messages()
        self.renderer._handleConnection(proto, PacketPokerTableList(packets = []))
        self.assertEquals(get_messages(),
                          ['ERROR *CRITICAL* handleGame: unexpected state for TABLE_LIST: idle'])
        clear_all_messages()
        self.renderer._handleConnection(proto, PacketError(other_type = PACKET_PING))
        self.assertEquals(get_messages(), ['ERROR *CRITICAL*: unexpected error'])
        clear_all_messages()
        self.renderer._handleConnection(proto, PacketAuthOk())
        self.assertEquals(get_messages(), ["login accepted"])
        clear_all_messages()
        self.renderer._handleConnection(proto, PacketMessage(string = "Hello there!"))
        # Note, this gets printted twice, once from the PACKET_MESSAGE string in _handleConnection
        #   and then again by PokerRenderer.showMessage()
        self.assertEquals(get_messages(), ['PACKET_MESSAGE : Hello there!', 'Hello there!'])
    # -----------------------------------------------------------------------------------------------------
    def test13_packetPlayerArriveInHandleConnection(self):
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        # When serial is not ours, we expect no output, and no render call
        self.factory.display = PokerRendererTests.MockDisplay()
        proto.serialValue = 22
        self.renderer._handleConnection(proto, PacketPokerPlayerArrive(serial = 7))
        self.assertEquals(get_messages(), [])
        self.assertEquals(self.factory.display.calledCount, 0)

        # When serial is ours but the URL doesn't match, we expect critical error,
        # but render gets called anyway
        clear_all_messages()
        proto.serialValue = 22
        self.factory.urlValue = "http://here"
        self.factory.outfitValue = "clothed"
        p = PacketPokerPlayerArrive(serial = 22, url = "http://somewhereelse", outfit = 'naked')
        self.factory.display = PokerRendererTests.MockDisplay(p)
        self.factory.display._addExpectedPacket(PacketPokerInterfaceCommand(window = "sit_actions_window", command = "show"))
        self.renderer._handleConnection(proto, p)
        self.assertEquals(self.factory.display.calledCount, 2)
        m = get_messages()
        self.assertEquals(len(m), 3)
        self.assertEquals(m[0], 'ERROR *CRITICAL*: PACKET_POKER_PLAYER_ARRIVE: server url is http://somewhereelse, local url is http://here ')
        self.assertEquals(m[1], 'ERROR *CRITICAL*: PACKET_POKER_PLAYER_ARRIVE: server outfit is naked, local outfit is clothed ')
        self.assertEquals(m[2].find('sitActionsUpdate: <__main__.MockPlayer instance at') == 0, True)
    # -----------------------------------------------------------------------------------------------------
    def test14_packetSelfInPositionHandleConnection(self):
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        # We expect a PacketPokerSelfInPosition to call resetLagmax
        clear_all_messages()
        p = PacketPokerSelfInPosition()
        self.factory.display = PokerRendererTests.MockDisplay(p)
        self.renderer._handleConnection(proto, p)
        self.assertEquals(self.factory.display.calledCount, 1)
        self.assertEquals(get_messages(), ['resetLagmax: 120'])
    # -----------------------------------------------------------------------------------------------------
    def test15_checkUpdateLagMaxWithoutGameObject(self):
        clear_all_messages()
        myRenderer = PokerRenderer(PokerRendererTests.MockPokerFactory(noGameObject = True))
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        myRenderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])
        # proto.doLagmax should be ste to PokerRenderer.updateLagmax() after init above

        # Even if we send the right kind of packet with the right serial,
        # we expect no action because we have no game object

        proto.serialValue = 1799
        proto._lagmax = 555
        proto.lag = 777
        clear_all_messages()
        proto.doLagmax(PacketPokerStart(game_id = 5, serial = proto.serialValue))
        self.assertEquals(get_messages(), [])
        self.assertEquals(proto._lagmax, 555)
    # -----------------------------------------------------------------------------------------------------
    def test16_checkUpdateLagMaxWithValidGameObject(self):
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])
        # proto.doLagmax should be ste to PokerRenderer.updateLagmax() after init above

        # First, try with both expected packet types, but bad serials

        # Position packet, but wrong serial
        proto.serialValue = 1799
        proto._lagmax = 555
        proto.lag = 777
        clear_all_messages()
        proto.doLagmax(PacketPokerPosition(game_id = 5, serial = 7835))
        self.assertEquals(get_messages(), [])
        self.assertEquals(proto._lagmax, 555)

        # Start packet, but wrong serial.  This should get the expected output, since we act
        # to updateLagmax regardless of whose serial is in the POKER_START packet
        proto.serialValue = 1799
        proto._lagmax = 555
        proto.lag = 777
        clear_all_messages()
        proto.doLagmax(PacketPokerStart(game_id = 5, serial = 7835))
        self.assertEquals(get_messages(), ["updateLagmax: %d" % proto.lag])
        self.assertEquals(proto._lagmax, proto.lag, 777)

        # Now, a strange packet type but the  right serial should also yield no results.
        proto.serialValue = 1799
        proto._lagmax = 555
        proto.lag = 777
        clear_all_messages()
        proto.doLagmax(PacketPokerFold(game_id = 5, serial = proto.serialValue))
        self.assertEquals(get_messages(), [])
        self.assertEquals(proto._lagmax, 555)

        # Now, a both good packet type, with the right serial, should yield the expected results
        proto.serialValue = 1799
        proto._lagmax = 555
        proto.lag = 777
        clear_all_messages()
        proto.doLagmax(PacketPokerStart(game_id = 5, serial = proto.serialValue))
        self.assertEquals(get_messages(), ["updateLagmax: %d" % proto.lag])
        self.assertEquals(proto._lagmax, proto.lag, 777)

        proto.serialValue = 1799
        proto._lagmax = 555
        proto.lag = 777
        clear_all_messages()
        proto.doLagmax(PacketPokerPosition(game_id = 5, serial = proto.serialValue))
        self.assertEquals(get_messages(), ["updateLagmax: %d" % proto.lag])
        self.assertEquals(proto._lagmax, proto.lag, 777)

    # -----------------------------------------------------------------------------------------------------
    def test17_maybeStartLookCardsNoGameRunning(self):
        """maybeStartLookCards() when no game is running.
        There should be output about game not running, and no packets
        scheduled by maybeStartLookCards when the game is not running (by
        default, game is not running in our Mock Up"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        self.renderer.maybeStartLookCards()
        self.assertEquals(get_messages(), ["ignoring look card the game is not running"])
        self.assertEquals(proto.sentPackets, proto.scheduledPackets, [])
    # -----------------------------------------------------------------------------------------------------
    def test18_scheduleLookCardsNoGameRunning(self):
        """scheduleLookCards when no game is running.
        This test is very similar to the previous one.  There should be
        output about game not running, and no packets scheduled by
        maybeStartLookCards when the game is not running (by default, game
        is not running in our Mock Up"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        self.renderer.scheduleLookCardsAfterInteractionAnimation()
        self.assertEquals(get_messages(), ["ignoring look card the game is not running"])
        self.assertEquals(proto.sentPackets, proto.scheduledPackets, [])
    # -----------------------------------------------------------------------------------------------------
    def test19_clickSitOutCoverage(self):
        """clickSitOut full coverage test.
        This test covers completely the clickSitOut() method in
        PokerRenderer.  Note the MockUp needs an
        interface.sitActionsToggleSitOut() method."""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])
        clear_all_messages()
        self.assertEquals(self.renderer.clickSitOut(), True)
        self.assertEquals(get_messages(), ["clickSitOut python"])
        self.assertEquals(proto.sentPackets, proto.scheduledPackets, [])
        self.assertEquals(self.factory.interface.calledCount_sitActionsToggleSitOut, 1)
    # -----------------------------------------------------------------------------------------------------
    def test20_handleMenuUnknownName(self):
        """handleMenu given unknown name.
        Test for handle menu given a name it does not know"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.handleMenu("NEVER HEARD OF YOU", "muck")
        self.assertEquals(get_messages(), ['ERROR *CRITICAL* handleMenu unknown name NEVER HEARD OF YOU'])
    # -----------------------------------------------------------------------------------------------------
    def test21_handleLobbyUnknownAction(self):
        """handleLoby given an unknown action.
        Test for handleLobby given an action it doesn't know"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.handleLobby(("NEVER SEEN THIS ACTION BEFORE", "foo"))
        self.assertEquals(get_messages(), ["handleLobby: ('NEVER SEEN THIS ACTION BEFORE', 'foo')",
                         'ERROR *CRITICAL*: handleLobby: unknown action NEVER SEEN THIS ACTION BEFORE'])
    # -----------------------------------------------------------------------------------------------------
    def test22_currencySerial2NameNotString(self):
        """currencySerial2Name given a non-string argument.
        Test for handleLobby given an action it doesn't know"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        caughtError = False
        try:
            self.renderer.currencySerial2Name(None)
        except UserWarning, ue:
            caughtError = True
            self.assertEquals(ue[0], 'currencySerial2Name unknown serial None')
        self.assertEquals(caughtError, True)
        self.assertEquals(get_messages(), ['currencySerial2Name None'])
    # -----------------------------------------------------------------------------------------------------
    def test23_handleTournamentsUnknownAction(self):
        """handleTournaments given an unknown action.
        Test for handleTournaments given an action it doesn't know"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.handleLobby(("NEVER SEEN THIS ACTION BEFORE", "foo"))
        self.assertEquals(get_messages(), ["handleLobby: ('NEVER SEEN THIS ACTION BEFORE', 'foo')",
                          'ERROR *CRITICAL*: handleLobby: unknown action NEVER SEEN THIS ACTION BEFORE'])
    # -----------------------------------------------------------------------------------------------------
    def test24_handleHandsUnknownAction(self):
        """handleHands() with an unknown action
        handleHands() on an unexpected action"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.handleHands("NEVER HEARD OF THIS", "foo", "foo")
        self.assertEquals(get_messages(),
                          ['ERROR *CRITICAL*: selectHands unexpected action NEVER HEARD OF THIS'])
#     # -----------------------------------------------------------------------------------------------------
#     # FIXME: this current fails.  I believe it should pass -- bkuhn
#     def test25_handleHandsOutOfState(self):
#         """handleHands() when not in HAND_LIST state
#         handleHands() expects HAND_LIST state"""
#         clear_all_messages()
#         proto = PokerRendererTests.MockPokerProtocol()
#         self.renderer.setProtocol(proto)
#         self.assertEquals(get_messages(), [])

#         clear_all_messages()
#         self.renderer.handleHands("replay", 3562, 4875)
#         self.assertEquals(get_messages(), ["*CRITICAL* selectHand: ignored because not in HAND_LIST state"])
#     # -----------------------------------------------------------------------------------------------------
#     # FIXME: this current fails.  I believe it should pass -- bkuhn
#     def test26_handleHandsReplayHand(self):
#         """handleHands() when you actually replay a hand 
#         handleHands() when in  HAND_LIST state and the hand is replayed"""
#         clear_all_messages()
#         proto = PokerRendererTests.MockPokerProtocol()
#         self.renderer.setProtocol(proto)
#         self.assertEquals(get_messages(), [])

#         clear_all_messages()
#         self.renderer.handleHands("replay", 3562, 4875)
#         self.assertEquals(get_messages(), [])
#         self.assertEquals(len(proto.scheduledPackets), 1)
#         p = proto.scheduledPackets[0]
#         self.assertEquals(p.type, PACKET_POKER_HAND_REPLAY)
#         self.assertEquals(p.serial, 3562)
    # -----------------------------------------------------------------------------------------------------
    def test27_rotateTableWithTwo(self):
        """rotateTable() when there are two.
        roteateTable() when there are two there"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.factory.games = { 7755 : "", 2344 : ""  }
        global calledDummy
        calledDummy = False
        def dummyConnectTable(gameId):
            self.assertEquals(gameId, 7755)
            global calledDummy
            calledDummy = True
        saveConnectTable = self.renderer.connectTable
        self.renderer.connectTable = dummyConnectTable
        self.renderer.rotateTable()
        self.assertEquals(get_messages(), ['rotateTable: 2344 => 7755'])
        self.assertEquals(calledDummy, True)
        self.renderer.connectTable = saveConnectTable
    # -----------------------------------------------------------------------------------------------------
    def test28_sendPacketCoverage(self):
        """sendPacket() full coverage.
        sendPacket() should print something and pass packet back onto protocol"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.sendPacket(PacketPing)
        self.assertEquals(get_messages(), ['render sendPacket pokernetwork.packets.PacketPing'])
        self.assertEquals(len(proto.sentPackets), 1)
        self.assertEquals(proto.scheduledPackets, [])
        self.assertEquals(proto.sentPackets[0].type, PACKET_PING)
    # -----------------------------------------------------------------------------------------------------
    def test29_schedulePacketCoverage(self):
        """schedulePacket() full coverage.
        schedulePacket() should print something and pass packet back onto protocol"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.schedulePacket(PacketPing)
        self.assertEquals(get_messages(), ['render schedulePacket pokernetwork.packets.PacketPing'])
        self.assertEquals(len(proto.scheduledPackets), 1)
        self.assertEquals(proto.sentPackets, [])
        self.assertEquals(proto.scheduledPackets[0].type, PACKET_PING)
    # -----------------------------------------------------------------------------------------------------
    def test30_getSeatUserNotLoggedInAndInWeirdState(self):
        """getSeat() when user not logged in and is in a state where the interface cannot be hidden.
        In this case, getSeat() should print sometihng and then return state to LOGIN
        and set callback.  (Note that in our test environment, the user is
        *not* logged in by default.)"""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()
        self.renderer.state = pokerrenderer.OUTFIT
        self.factory.interface.messageBoxes = []
        self.renderer.getSeat(PacketPokerSeat(game_id = 2344, serial = 7736, seat = 1))
        self.assertEquals(get_messages(), ['getSeat type = POKER_SEAT(79) serial = 7736 game_id = 2344 seat = 1', 'changeState outfit => seating (args = (type = POKER_SEAT(79) serial = 7736 game_id = 2344 seat = 1,), kwargs = {})', 'ERROR *CRITICAL*; should not be here', 'You cannot do that now'])
        self.assertEquals(self.factory.interface.messageBoxes, [_('You cannot do that now')])
    # -----------------------------------------------------------------------------------------------------
    def test31_bootstrapFirstTimeInterfaceReady(self):
        """bootstrap() not at first time when interface ready
        In this scenario, a PacketBootstrap is sent, calling bootstrap() ,
        which then finds it is the first time and the interface is ready.
        This causes the LOGIN changeState() to occur and one packet sent.
      """

        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()

        self.factory.first_time = False
        self.factory.display = PokerRendererTests.MockDisplay()

        self.renderer._handleConnection(proto, PacketBootstrap())

        m = get_messages()
        self.assertEquals(len(m), 3)
        self.assertEquals(m[0].find('render sendPacket type = POKER_SET_ROLE') == 0, True)
        self.assertEquals(m[1], 'interface ready, ask for password')
        self.assertEquals(m[2].find('changeState idle => login (args = (<function <lambda> at ') == 0, True)

        self.assertEquals(len(proto.sentPackets), 1)
        p0 = proto.sentPackets[0]
        self.assertEquals(p0.type, PACKET_POKER_SET_ROLE)
        self.assertEquals(p0.roles, PacketPokerRoles.PLAY)

        self.assertEquals(self.factory.display.calledCount, 0)

    # -----------------------------------------------------------------------------------------------------
    def test32_bootstrapFristTimeInterfaceNotReady(self):
        """bootstrap() not at first time when interface not ready
        In this scenario, a PacketBootstrap is sent, calling bootstrap() ,
        and then the interface isn't ready, so we just get a message and renderer is called.
      """
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)
        self.assertEquals(get_messages(), [])

        clear_all_messages()

        self.factory.first_time = False
        self.factory.interface = None

        self.factory.display = PokerRendererTests.MockDisplay()

        self.renderer._handleConnection(proto, PacketBootstrap())

        m = get_messages()
        self.assertEquals(len(m), 2)
        self.assertEquals(m[0].find('render sendPacket type = POKER_SET_ROLE') == 0, True)
        self.assertEquals(m[1], "interface not ready, will ask password later")

        self.assertEquals(len(proto.sentPackets), 1)
        p0 = proto.sentPackets[0]
        self.assertEquals(p0.type, PACKET_POKER_SET_ROLE)
        self.assertEquals(p0.roles, PacketPokerRoles.PLAY)

        self.assertEquals(self.factory.display.calledCount, 0)
    # -----------------------------------------------------------------------------------------------------
    def test33_changeStatePayBlindFromWeird(self):
        """changeState() for PAY_BLIND_ANTE when existing state is weird
        changeState() gives a critical error going from someOddState => pay_blind_ante"""

        clear_all_messages()
        self.renderer.state = pokerrenderer.OUTFIT
        self.renderer.changeState(pokerrenderer.PAY_BLIND_ANTE)
        self.assertEquals(get_messages(), ['changeState outfit => pay_blind_ante (args = (), kwargs = {})',
                                           'ERROR *CRITICAL*  unexpected state outfit'])

    # -----------------------------------------------------------------------------------------------------
    def test34_confirmPayBlindBadWhat(self):
        """changeState() for PAY_BLIND_ANTE with weird what.
        changeState() gives a critical error when there is a correct
        current state but the first argument is not something it expects."""

        clear_all_messages()
        self.renderer.state = pokerrenderer.USER_INFO
        self.renderer.changeState(pokerrenderer.PAY_BLIND_ANTE, "throw-chip-at-dealer")
        self.assertEquals(get_messages(), ["changeState user_info => pay_blind_ante (args = ('throw-chip-at-dealer',), kwargs = {})",
                                           'ERROR *CRITICAL*  unknow what throw-chip-at-dealer'])
    # -----------------------------------------------------------------------------------------------------
    def test35_blindAnteSendBadWhat(self):
        """changeState() for PAY_BLIND_ANTE_SEND with weird what.
        changeState() gives a critical error when there is a correct
        current state but the first argument is not something it expects."""

        clear_all_messages()
        self.renderer.state = pokerrenderer.PAY_BLIND_ANTE
        self.renderer.changeState(pokerrenderer.PAY_BLIND_ANTE_SEND, "throw-chip-at-dealer")
        self.assertEquals(get_messages(), ["changeState pay_blind_ante => pay_blind_ante_send (args = ('throw-chip-at-dealer',), kwargs = {})", 'ERROR *CRITICAL*  unknow what throw-chip-at-dealer'])
    # -----------------------------------------------------------------------------------------------------
    def test36_weirdStatusDuringVariousStates(self):
        """changeState() for various states gets invalid situation.
        changeState() gives a critical error sometimes when neither
        self.protocol.user.isLogged() nor self.canHideInterface() are
        true."""
        clear_all_messages()
        proto = PokerRendererTests.MockPokerProtocol()
        self.renderer.setProtocol(proto)

        def alwaysFalseNoArgs(): return False
        isLogged = proto.user.isLogged
        proto.user.isLogged = alwaysFalseNoArgs
        canHide = self.renderer.canHideInterface
        self.renderer.canHideInterface = alwaysFalseNoArgs

        for (tryState, str) in [ (pokerrenderer.CASHIER, "cashier"),
                                 (pokerrenderer.OUTFIT, "outfit"),
                                 (pokerrenderer.HAND_LIST, "list_hands") ]:
            self.renderer.changeState(tryState)
            self.assertEquals(get_messages(), ['changeState idle => %s (args = (), kwargs = {})'
                                               % str,
                                               'ERROR *CRITICAL*; should not be here',
                                               _('You cannot do that now')])
            self.assertEquals(self.factory.interface.messageBoxes, [_('You cannot do that now')])
            clear_all_messages()
            self.factory.interface.messageBoxes = []
        proto.user.isLogged = isLogged
        self.renderer.canHideInterface = canHide
# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerRendererTestCase))
    suite.addTest(unittest.makeSuite(PokerRendererUpdateInterfaceWindowsTestCase))
    suite.addTest(unittest.makeSuite(PokerInteractorsTests))
    suite.addTest(unittest.makeSuite(PokerRendererTests))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerrenderer
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerrenderer.py ) ; ( cd ../tests ; make TESTS='test-pokerrenderer.py' check )"
# End:
