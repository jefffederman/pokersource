#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest
from pokerui.pokerrenderer import PokerRenderer

class PokerRendererMockup(PokerRenderer):
    def __init__(self):
	self.factory = PokerFactoryMockup()
	self.chat_words = [{'in': "nh",
			    'out': "nice hand",
			    'event': "emThumbUp"}]
	self.verbose = 3
	self.protocol = PokerProtocolMockup()

class PokerProtocolMockup:
    def __init__(self):
	self.packets = []
    def schedulePacket(self, packet):
	self.packets.append(packet)

class PokerFactoryMockup:
    def __init__(self):
	self.verbose = 3
	self.chat_config = {'max_chars': 80,
			    'line_length': 80}

class PokerPacketChatMockup:
    def __init__(self, message):
	self.message = message
	self.serial = 0
	self.game_id = 0

class PokerRendererTestCase(unittest.TestCase):
    
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererMockup()
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.renderer = None
        
    # -----------------------------------------------------------------------------------------------------    
    def test_chatFormatMessage(self):
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("inhaler"))
	self.assertEquals("inhaler", message)
	self.assertEquals(0, len(self.renderer.protocol.packets))
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("nh"))
	self.assertEquals("nice hand", message)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[0].word)
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("nh nh nh"))
	self.assertEquals("nice hand nice hand nice hand", message)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[1].word)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[2].word)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[3].word)

class PokerRendererUpdateDecorationMockup(PokerRenderer):
    def __init__(self):
	self.renderCalled = False
	self.packet = None
    def render(self, packet):
	self.renderCalled = True
	self.packet = packet
	pass

from pokerui.pokerrenderer import LOBBY
from pokerui.pokerrenderer import TOURNAMENTS
from pokerui.pokerrenderer import CASHIER
from pokerui.pokerrenderer import LOGIN

class PokerRendererUpdateDecorationTestCase(unittest.TestCase):
    def setUp(self):
	self.renderer = PokerRendererUpdateDecorationMockup()

    def tearDown(self):
        self.renderer = None

    def test_UpdateDecorationMockupLobbyToCashier(self):
	previous = LOBBY
	next = CASHIER
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateDecorations(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("hide", self.renderer.packet.command)	

    def test_UpdateDecorationMockupTournamentsToCashier(self):
	previous = TOURNAMENTS
	next = CASHIER
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateDecorations(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("hide", self.renderer.packet.command)

    def test_UpdateDecorationMockupCashierToLobby(self):
	previous = CASHIER
	next = LOBBY
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateDecorations(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("show", self.renderer.packet.command)

    def test_UpdateDecorationMockupCashierToLobby(self):
	previous = CASHIER
	next = TOURNAMENTS
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateDecorations(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("show", self.renderer.packet.command)

    def test_UpdateDecorationMockupCashierToOther(self):
	previous = CASHIER
	next = LOGIN
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateDecorations(previous, next)
	self.assertEquals(False, self.renderer.renderCalled)

    def test_UpdateDecorationMockupCashierToOther(self):
	previous = LOBBY
	next = TOURNAMENTS
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateDecorations(previous, next)
	self.assertEquals(False, self.renderer.renderCalled)	

# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerRendererTestCase))
    suite.addTest(unittest.makeSuite(PokerRendererUpdateDecorationTestCase))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerrenderer
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerrenderer.py ) ; ( cd ../tests ; make TESTS='test-pokerrenderer.py' check )"
# End:
