#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Bradley M. Kuhn <bkuhn@ebb.org>
#
# This program gives you software freedom; you can copy, convey,
# propogate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version of the AGPL.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#
#

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

from types import *
import libxml2
import MySQLdb
from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor, defer, error, base
from twisted.python import failure, runtime
from tests import testclock

from tests.testmessages import restore_all_messages, silence_all_messages, search_output, clear_all_messages, get_messages
#os.environ['VERBOSE_T'] = '0'
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokernetwork import pokernetworkconfig
from pokernetwork.userstats import *
from pokernetwork.pokerpackets import *

settings_xml_server = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="20" round="0" position="0" showdown="0" autodeal_max="1" finish="0" messages="60" />

  <language value="en_US.UTF-8"/>

  <table name="Table1" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="60" currency_serial="1" />
  <table name="Table2" variant="holdem" betting_structure="2-4-limit" seats="10" player_timeout="60" currency_serial="0" />
  <table name="Table3" variant="holdem" betting_structure="test18pokerclient" seats="10" player_timeout="600" muck_timeout="600" currency_serial="1" forced_dealer_seat="0" />
  <table name="Table4" variant="holdem" betting_structure="ante-1-2-limit" seats="10" player_timeout="60" currency_serial="0" />
  <listen tcp="19480" />

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" user_create="yes"/>
  <database name="pokernetworktest" host="@MYSQL_TEST_DBHOST@" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>.. ../@srcdir@ @POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""
############################################################################
class PokerUserStatsTestCase(unittest.TestCase):
    def destroyDb(self, arg = None):
        if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@' -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        else:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")

    def setUp(self):
#         settings = pokernetworkconfig.Config([])
#         settings.doc = libxml2.parseMemory(settings_xml_server, len(settings_xml_server))
#         settings.header = settings.doc.xpathNewContext()
        self.destroyDb()
        self.db = MySQLdb.connect(host = "@MYSQL_TEST_DBHOST@",
                                  port = 3306, user = "@MYSQL_TEST_DBROOT@",
                                  passwd = "@MYSQL_TEST_DBROOT_PASSWORD@")
        self.db.query("CREATE DATABASE pokernetworktest")
        self.db.select_db("pokernetworktest")
        #
        # Setup server
        #
#        self.service = pokerservice.PokerService(settings)
#        self.service.verbose = 6
#        self.service.startService()

    def tearDown(self):
        self.destroyDb()
#        d = self.service.stopService()
#        return d
    # -------------------------------------------------------------------------
    def test01_factory(self):
        """test01_factory
        basic factory interface tests."""
        f = UserStatsFactory()
        clear_all_messages()
        f.error("test")
        self.assertEquals(get_messages(), ['ERROR test'])

        self.failUnless(f.getClass(""), UserStatsEmptyLookup)

        clear_all_messages()
        self.assertEquals(f.getClass("DOESNOTEXIST"), UserStatsEmptyLookup)
        self.assertEquals(get_messages(), ["ERROR 'module' object has no attribute 'UserStatsDOESNOTEXISTLookup'"])

        self.assertEquals(f.getClass("RankPercentile"), UserStatsRankPercentileLookup)
    # -------------------------------------------------------------------------
    # Mock ups below are used to test RankPercentile.

    class MockTable:
        def __init__(self, serial = None):
            self.currency_serial = serial
    class MockService:
        def __init__(self, myDb = None):
            self.db = myDb
    # -------------------------------------------------------------------------
    def test02_rankPercentileAccessor(self):
        """test02_rankPercentileAccessor
        make sure basic interfaces on the RankPercentile accessor class works
        correctly, and test when there is no database precent"""
        statsList = [ 'rank', 'percentile' ]
        statsList.sort()
        u = UserStatsRankPercentileAccessor()
        ss = u.attrsSupported
        ss.sort()
        self.assertEquals(ss, statsList)
        g = u.getSupportedAttrsList()
        g.sort()
        self.assertEquals(g, statsList)
        
        clear_all_messages()
        self.assertEquals(u.getAttrValue('unknownstat'), None)
        self.assertEquals(get_messages(), [ "ERROR invalid attribute, unknownstat" ])

        for stat in statsList:
            # This will return None because the table.currency_serial is None
            myTable = PokerUserStatsTestCase.MockTable()
            myService = PokerUserStatsTestCase.MockService()
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = None,
                                             service = myService), None)
            # This will return None because the table.currency_serial is negative
            myTable = PokerUserStatsTestCase.MockTable(-1)
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = None,
                                             service = myService), None)
            # This will return None because the avatar.getSerial() returns None
            myTable = PokerUserStatsTestCase.MockTable(1)
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = None,
                                             service = myService), None)
            # This will return None because the serial is set to -1
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = -1,
                                             service = myService), None)
            # This will give a Attribute error because the service is None
            errorStr = ""
            try:
                u.getAttrValue(stat, table = myTable, serial = 1, service = myService)
                self.failIf(True)  # Should not be reached
            except AttributeError, ae:
                errorStr = ae.__str__()
            self.assertEquals(errorStr, "'NoneType' object has no attribute 'cursor'")

            # This will fail because there is no rank table
            clear_all_messages()
            myService = PokerUserStatsTestCase.MockService(self.db)
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = 1,
                                             service = myService), None)
            self.assertEquals(get_messages(), [ "ERROR RankPercentile: (MySQL code 1146): Table 'pokernetworktest.rank' doesn't exist"])
        self.db.query("CREATE TABLE rank (user_serial INT, currency_serial INT, rank INT, percentile TINYINT)")
        self.db.query("INSERT INTO rank VALUES(1, 2, 20, 30)")
        self.db.query("INSERT INTO rank VALUES(0, 2, 20, 30)")
        self.db.query("INSERT INTO rank VALUES(-1, 2, 20, 30)")
        self.db.query("INSERT INTO rank VALUES(2, 0, 20, 30)")
        self.db.query("INSERT INTO rank VALUES(2, -1, 20, 30)")
        for (stat, value) in [ ('rank', 20), ('percentile', 30) ]:
            myTable = PokerUserStatsTestCase.MockTable(1)
            myService = PokerUserStatsTestCase.MockService(self.db)

            # Should be None because no row exists for 1, 1
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = 1,
                                             service = myService), None)

            # Should now be the expected value
            myTable = PokerUserStatsTestCase.MockTable(2)
            self.assertEquals(u.getAttrValue(stat, table = myTable, serial = 1,
                                             service = myService), value)
            # Should also be the expected value
            secondTable = PokerUserStatsTestCase.MockTable(0)
            self.assertEquals(u.getAttrValue(stat, table = secondTable, serial = 2,
                                             service = myService), value)

            # Should be None, regardless of the fact that DB value is
            # there for 0 and -1, since serials cannot be None or 0, or -1
            for ser in [ None, 0, -1 ]:
                self.assertEquals(u.getAttrValue(stat, table = myTable, serial = ser,
                                                 service = myService), None)
            # Should be None, regardless of the fact that the DB value for
            # -1 is there, since currency_serial cannot be negative

            for cur in [ None, -1 ]:
                t = PokerUserStatsTestCase.MockTable(cur)
                self.assertEquals(u.getAttrValue(stat, table = t, serial = 2,
                                                 service = myService), None)
    # -------------------------------------------------------------------------
    def test03_userStatsRankPercentileLookupClass(self):
        """test03_userStatsRankPercentileLookupBaseClass
        Tests the the RankPercentile lookup class."""

        # Check that the class is structured properly.
        urpl = UserStatsRankPercentileLookup(PokerUserStatsTestCase.MockService(self.db))
        self.assertEquals(self.db, urpl.service.db)
        k = urpl.attr2accessor.keys()
        k.sort()
        statsList = [ 'percentile', 'rank' ]
        self.assertEquals(k, statsList)
        self.assertEquals(urpl.requiredPacketFields, [ 'serial' ])
        for ii in k:
            self.failUnless(isinstance(urpl.attr2accessor[ii], UserStatsRankPercentileAccessor))

        self.db.query("CREATE TABLE rank (user_serial INT, currency_serial INT, rank INT, percentile TINYINT)")
        self.db.query("INSERT INTO rank VALUES(1, 2, 40, 50)")

        # First, do a valid test which has appropriate data in the
        # database
        myTable = PokerUserStatsTestCase.MockTable(2)
        clear_all_messages()
        pack = urpl.getAttrsAsPacket(table = myTable, serial = 1)
        self.assertEquals(pack.type, PACKET_POKER_PLAYER_STATS)
        self.assertEquals(pack.serial, 1)
        self.assertEquals(pack.rank, 40)
        self.assertEquals(pack.percentile, 50)
        self.assertEquals(get_messages(), [])

        # Second, this will give a Attribute error because the service is
        # None
        errorStr = ""
        try:
            urpl.getAttrsAsPacket(table = myTable, serial = 1, service = None)
            self.failIf(True)  # Should not be reached
        except AttributeError, ae:
            errorStr = ae.__str__()
        self.assertEquals(errorStr, "'NoneType' object has no attribute 'db'")
        self.assertEquals(get_messages(), [])

        # Finally, test the attrs list packet.

        pack = urpl.getSupportedAttrsAsPacket()
        self.assertEquals(pack.type, PACKET_POKER_SUPPORTED_PLAYER_STATS)
        self.assertEquals(pack.length, 12)
        pack.attrs.sort()
        self.assertEquals(pack.attrs, ['percentile', 'rank'])
    # -------------------------------------------------------------------------
    def test04_userStatsEmptyLookupClass(self):
        """test04_userStatsEmptyLookupClass
        Tests the the Empty lookup class."""

        # Check that the class is structured properly.
        urpl = UserStatsEmptyLookup(PokerUserStatsTestCase.MockService(self.db))
        self.assertEquals(self.db, urpl.service.db)
        k = urpl.attr2accessor.keys()
        k.sort()
        statsList = [ ]
        self.assertEquals(k, statsList)
        self.assertEquals(urpl.requiredPacketFields, [ 'serial' ])
        self.assertEquals(urpl.attr2accessor, {})

        clear_all_messages()
        pack = urpl.getAttrsAsPacket(table = None, serial = 1)
        self.assertEquals(pack.type, PACKET_POKER_PLAYER_STATS)
        self.assertEquals(pack.serial, 1)
        self.assertEquals(get_messages(), [])
    # ------------------------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test76"
    suite = loader.suiteFactory()
    suite.addTest(loader.loadClass(PokerUserStatsTestCase))
    return runner.TrialRunner(
        reporter.VerboseTextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)

# ------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-userstats.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/userstats.py' TESTS='coverage-reset test-userstats.py coverage-report' check )"
# End:
