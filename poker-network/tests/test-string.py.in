#!/usr/bin/python2.4
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Cedric Pinson <cpinson@freesheep.org>
#  Jerome Jeannin <griim.work@gmail.com>

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

from pokerui.pokerrenderer import PokerRenderer
from pokerui.pokerrenderer import  LEAVING_DONE, CANCELED, SIT_OUT, LEAVING, LEAVING_CONFIRM, JOINING, JOINING_MY, REBUY, PAY_BLIND_ANTE, PAY_BLIND_ANTE_SEND, MUCK, USER_INFO, HAND_LIST, SEARCHING_MY_CANCEL, SEARCHING_MY, LOBBY, IDLE, OUTFIT, QUIT, CASHIER, QUIT_DONE, TOURNAMENTS, TOURNAMENTS_REGISTER, TOURNAMENTS_UNREGISTER,  SEATING, LOGIN, BUY_IN
from pokerui.pokerinterface import INTERFACE_YESNO
from pokernetwork.packets import PacketQuit, PacketSerial, PACKET_QUIT
from pokernetwork.pokerpackets import *
from pokernetwork.pokerclientpackets import *
from pokerui.pokerinterface import PokerInterface

import unittest

#-----------------
class PokerRendererMockup(PokerRenderer):
    def __init__(self):
	self.factory = PokerFactoryMockup()
	self.chat_words = [{'in': "nh",
			    'out': "nice hand",
			    'event': "emThumbUp"}]
	self.verbose = 3
	self.protocol = PokerProtocolMockup()
        self.message = None
        self.state = None
        self.state_hands = {'Total':None}
        self.stream_mode = True
        self.call_showLobby = False
        self.call_queryLobby = False
        self.call_chatHide = False
        

    def showMessage(self, message, callback):
        self.message = message

    def state2hide(self):
        return True

    def showLobby(self):
        self.call_showLobby = True

    def queryLobby(self):
        self.call_queryLobby = True

    def chatHide(self):
        self.call_chatHide = True

    def render(self, packet):
        pass

    def updateInterfaceWindows(self, state1, state2):
        pass

    def showYesNoBox(self, message):
        self.message = message
        pass
 
    def showBlind(self, message, string):
        self.message = message
        pass

    def showBuyIn(self):
        pass

    def hideBuyIn(self):
        pass

    def sitActionsUpdate(self):
        pass

    def sitActionsHide(self):
        pass

    def state2hide(self):
        return False
        pass

    def isSeated(self):
        return True
        pass

class PokerProtocolMockup:
    def __init__(self):
	self.packets = []
        self.user = UserMockup()
        self.user_info = UserInfoMockup(100)
         
    def schedulePacket(self, packet):
	self.packets.append(packet)

    def getSerial(self):
        pass

class UserMockup:
    def __init__(self, ):
        self._isLogged = True
        pass

    def isLogged(self):
        return self._isLogged
        pass

class UserInfoMockup:
    def __init__(self, bankroll):
        self.money = {0:[bankroll]} 

class PokerInterfaceMockup(PokerInterface):
    def __init__(self):
	self.callbacks = {}
        self.legend = None
        self.label = None
        self.message = None
        self._command = None
        pass

    def showMenu(self):
        pass

    def chatShow(self):
        pass

    def registerHandler(self, name, meth):
        pass

    def buyInParams(self, min_amount, max_amount, legend, label):
        self.legend = legend
        self.label = label
        pass

    def command(self, *args):
        (self._command) = args
        pass

class PokerFactoryMockup:
    def __init__(self):
	self.verbose = 3
	self.chat_config = {'max_chars': 80,
			    'line_length': 80}
        self.interface = PokerInterfaceMockup()
        self.settings = SettingsMockup()

    def packet2game(self, packet):
        return True
        pass

class PokerPacketMockup:
    def __init__(self):
        self.type = None
        self.seat = None

class PlayerMockup:
    def __init__(self, money, payedBuyIn):
        self.money = money
        self.payedBuyIn = payedBuyIn

    def isBuyInPayed(self):
        return self.payedBuyIn

class GameMockup:
    def __init__(self, buyIn, maxBuyIn, moneyCashier, payedBuyIn):
        self._buyIn = buyIn
        self._maxBuyIn = maxBuyIn
        self.currency_serial = 0
        self.playerPayedBuyIn = payedBuyIn
        self.playerMoneyCashier = moneyCashier

    def getPlayer(self,serial):
        return PlayerMockup(self.playerMoneyCashier, self.playerPayedBuyIn)

    def buyIn(self):
        return self._buyIn     

    def maxBuyIn(self):
        return self._maxBuyIn

    def isInGame(self, id):
        return id >= 0

class SettingsMockup:
    def __init__(self):
        pass
    
    def headerSet(self, url, value):
        pass

    def save(self):
        pass

class TournamentMockup:
    def __init__(self):
        self.sit_n_go = False
        self.regular = False
        pass

class PokerRendererTestCase(unittest.TestCase):
    
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererMockup()
        self.packet = PokerPacketMockup() 
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.renderer = None
        
    # -----------------------------------------------------------------------------------------------------
    def test_showRank(self):
        self.renderer.showYourRank(100, 5, 10, 10000)
        self.assertEquals("Tourney 100\n Your rank is 5 on 10\nYou won 100", self.renderer.message)

    #------------------------------------------------------------------------------------------------------
    def test_quit(self):
        self.renderer.quit()
        self.assertEquals("Do you really want to quit ?", self.renderer.message)

    #------------------------------------------------------------------------------------------------------
    def test_payAnte(self):
        self.renderer.payAnte("game", 10)
        self.assertEquals("Pay the ante (10) ?", self.renderer.message)

    #------------------------------------------------------------------------------------------------------
    def test_payBlind(self):
        self.renderer.payBlind("game", 10, 1, "state")
        self.assertEquals("Pay the big blind (0.10) + dead (0.01) ?", self.renderer.message)
        self.renderer.payBlind("game", 10, -1, "big")
        self.assertEquals("Pay the big blind (0.10) ?", self.renderer.message)
        self.renderer.payBlind("game", 10, -1, "state")
        self.assertEquals("Pay the small blind (0.10) ?", self.renderer.message)

    #------------------------------------------------------------------------------------------------------
    def test_handleConnection(self):
        self.packet.type = PACKET_POKER_SEAT
        self.packet.seat = 255
        self.renderer._handleConnection("protocol", self.packet)
        self.assertEquals("This seat is busy", self.renderer.message)

    #------------------------------------------------------------------------------------------------------
    def test_requestBuyIn(self):

        self.renderer.requestBuyIn(GameMockup(50,100,100,True))
        self.assertEquals("You can't bring more money\nto the table", self.renderer.message)
 
        self.renderer.requestBuyIn(GameMockup(50,100,60,True))
        self.assertEquals("How much do you want to rebuy?", self.renderer.factory.interface.legend)
        self.assertEquals("Maximum buy in", self.renderer.factory.interface.label)

        self.renderer.requestBuyIn(GameMockup(50,1000,60,True))
        self.assertEquals("How much do you want to rebuy?", self.renderer.factory.interface.legend)
        self.assertEquals("All your bankroll", self.renderer.factory.interface.label)

        self.renderer.requestBuyIn(GameMockup(50,100,60,False))
        self.assertEquals("Which amount do you want to bring at the table?", self.renderer.factory.interface.legend)
        self.assertEquals("Maximum buy in", self.renderer.factory.interface.label)

        self.renderer.requestBuyIn(GameMockup(500,1000,60,False))
        self.assertEquals("You don't have enough money to play on this table.\nTo get money go in menu 'Lobby' and click 'Cash in'.\n(if you are in play money you might need to win more\nmoney to sit at this table)", self.renderer.message)

        self.renderer.protocol.user_info = UserInfoMockup(0)
        self.renderer.requestBuyIn(GameMockup(50,1000,0,True))
        self.assertEquals("You have no money left", self.renderer.message)

    #--------------------------------------------------------------------------------------------------------
    def test_handleMenu(self):
   
        confirm = "\nThe game must be restarted for this change to take effect\nDo you want to restart the game now ?"
 
        self.renderer.handleMenu("resolution", "resolution_auto")
        self.assertEquals("Screen resolution changed"+confirm, self.renderer.message)
 
        self.renderer.handleMenu("display", "new res")
        self.assertEquals("Display changed to new res"+confirm, self.renderer.message)

        self.renderer.handleMenu("fullscreen", None)
        self.assertEquals("Screen resolution changed"+confirm, self.renderer.message)
        self.renderer.handleMenu("graphics", None)
        self.assertEquals("Graphics quality changed"+confirm, self.renderer.message)

    #--------------------------------------------------------------------------------------------------------
    def test_showHands(self):
    
        self.renderer.showHands(None, None)
        self.assertEquals("Your hand history is empty", self.renderer.message)

    #--------------------------------------------------------------------------------------------------------
    def test_changeState(self):
 
        self.renderer.changeState(LOGIN, None, None)
        self.assertEquals("Already logged in", self.renderer.message)

        self.renderer.changeState(SEATING, None, None)
        self.assertEquals("You cannot do that now", self.renderer.message)

        self.renderer.changeState(LEAVING_CONFIRM, GameMockup(0,0,0,True), 0)
        self.assertEquals("Do you really want to fold your hand\nand leave the table ?", self.renderer.message)

        self.renderer.changeState(LEAVING_CONFIRM, GameMockup(0,0,0,True), -1)
        self.assertEquals("Do you really want to leave the table ?", self.renderer.message)

        self.renderer.changeState(OUTFIT, None, None)
        self.assertEquals("You must leave the table to change your outfit", self.renderer.message)

    #---------------------------------------------------------------------------------------------------------
    def test_quit(self):

        self.renderer.quit()
        self.assertEquals("Do you really want to quit ?", self.renderer.message)


#------------------------------------------------------------------------------------------------------

class PokerInterfaceTestCase(unittest.TestCase):

    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.interface = PokerInterfaceMockup()
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.interface = None
        
    # -----------------------------------------------------------------------------------------------------
    def test_updateTournaments(self):
        self.interface.updateTournaments(1,1,1,(TournamentMockup(),TournamentMockup()))
        self.assertEquals(('tournaments', 'info', 'Players: 1', 'Tournaments: 1'), self.interface._command)

    #------------------------------------------------------------------------------------------------------
    def test_updateLobby(self):
        self.interface.updateLobby(1,1,1,1,1,())
        print self.interface._command
        self.assertEquals(('lobby', 'info', 'Players: 1', 'Tables: 1'), self.interface._command)

def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerRendererTestCase))
    suite.addTest(unittest.makeSuite(PokerInterfaceTestCase))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerrenderer
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-string.py ) ; ( cd ../tests ; make TESTS='test-string.py' check )"
# End:
