#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C)       2008 Bradley M. Kuhn <bkuhn@ebb.org>
# Copyright (C) 2006       Mekensleep <licensing@mekensleep.com>
#                          24 rue vieille du temple, 75004 Paris
#
# This software's license gives you freedom; you can copy, convey,
# propagate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation (FSF), either version 3 of the License, or (at your
# option) any later version of the AGPL published by the FSF.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#  Loic Dachary <loic@dachary.org>
#  Johan Euphrosine <johan@mekensleep.com>
#  Bradley M. Kuhn <bkuhn@ebb.org>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest
from twisted.trial import runner

from tests.testmessages import silence_all_messages, restore_all_messages, search_output, clear_all_messages, get_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
verbose = 2
if verbose < 0: silence_all_messages()

from pokernetwork.pokerclient import PokerClientFactory
from pokernetwork import dispatch

class PokerSettingsMockup:
    def headerGetInt(self, path):
        if path == "/settings/@verbose":
            return 6
	return None
    def headerGet(self, path):
	return ""
    def headerGetProperties(self, path):
	return None

from pokernetwork.upgrade import CheckClientVersion
from pokernetwork.pokerchildren import RSYNC_FAILED
class CheckClientVersionMockup(CheckClientVersion):
    instance = None
    def __init__(self, config = PokerSettingsMockup(), settings = PokerSettingsMockup(), version = (1,1,20), callback = None):
        CheckClientVersionMockup.instance = self
        callback_was_none = callback
        if callback is None:
            callback = self.rsyncDone
	CheckClientVersion.__init__(self, config, settings, version, callback)
        if callback_was_none is None:
            self.registerHandler(RSYNC_FAILED, self.rsyncFailed)
 	self.rsyncFailedCalled = False
	self.rsyncDoneCalled = False
	self.needUpgrade = False
    def spawn(self):
	pass
    def configure(self, command):
	pass
    def rsyncFailed(self, logs, reason):
	self.rsyncFailedCalled =  True
    def rsyncDone(self, need_upgrade, version):
	self.rsyncDoneCalled = True
	self.needUpgrade = need_upgrade

class PokerClientUpgradeFailedTestCase(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
        silence_all_messages()

# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        restore_all_messages()
        
# -----------------------------------------------------------------------------------------------------
    def test01_CheckClientVersionFailedAndNeedUpgrade(self):
        clear_all_messages()
	self.checker = CheckClientVersionMockup((1, 1, 20))
        self.assertEquals(get_messages(), ['CheckClientVersion checking version (1, 1, 20) against server'])
        clear_all_messages()
	self.checker.line("1.1.19")
	self.checker.line("1.1.20")
	self.checker.line("1.1.21")
        self.assertEquals(get_messages(), ['1.1.19', 'compare (1, 1, 19) against (1, 1, 20)',
                                           '1.1.20', 'compare (1, 1, 20) against (1, 1, 20)',
                                           '1.1.21', 'compare (1, 1, 21) against (1, 1, 20)'])
        clear_all_messages()
	self.checker.failed("dummy log", "dummy reason")
        self.assertEquals(get_messages(), ['ERROR *CRITICAL* CheckClientVersion.failed logs:dummy log reason:dummy reason'])
        clear_all_messages()

	self.assertEquals(False, self.checker.rsyncFailedCalled)
	self.assertEquals(True, self.checker.rsyncDoneCalled)
	self.assertEquals(True, self.checker.needUpgrade)

    def test02_CheckClientVersionFailedAndClientVersionOk(self):
	self.checker = CheckClientVersionMockup((1, 1, 20))
	self.checker.line("1.1.19")
	self.checker.line("1.1.20")
	self.checker.failed("dummy log", "dummy reason")
	self.assertEquals(False, self.checker.rsyncFailedCalled)
	self.assertEquals(True, self.checker.rsyncDoneCalled)
	self.assertEquals(False, self.checker.needUpgrade)
	self.assertEquals(search_output("CheckClientVersion.failed logs:dummy log reason:dummy reason"), True)

    def test03_CheckClientVersionFailedAndNoVersionMatched(self):
	self.checker = CheckClientVersionMockup((1, 1, 20))
	self.checker.line("salut les aminches")
	self.checker.failed("dummy log", "dummy reason")
	self.assertEquals(True, self.checker.rsyncFailedCalled)
	self.assertEquals(False, self.checker.rsyncDoneCalled)
	self.assertEquals(False, self.checker.needUpgrade)
	self.assertEquals(search_output("CheckClientVersion.failed logs:dummy log reason:dummy reason"), True)

class PokerSettingsMockupSource:
    def __init__(self, source):
	self.source = source
    def headerGetInt(self, path):
        if path == "/settings/@verbose":
            return 6
	return None
    def headerGet(self, path):
	if path == "/settings/rsync/@source":
	    return self.source
	return ""
    def headerGetProperties(self, path):
	return None



class PokerClientUpgradeCheckClientVersion(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
        silence_all_messages()
# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
	pass
# -----------------------------------------------------------------------------------------------------
    def test01_CheckClientVersionRemote(self):
	from pokernetwork.upgrade import CheckClientVersion
        clear_all_messages()
	checkClientVersion = CheckClientVersion(PokerSettingsMockupSource("rsync::poker/update/"), PokerSettingsMockupSource("rsync::foo/bar/"), (0, 0, 0), None)
        self.assertEquals(get_messages(), ['CheckClientVersion checking version (0, 0, 0) against server',
                                           'PokerRsync::spawn:  rsync --timeout=60 rsync::foo/bar//'])
        restore_all_messages()
	self.assertEquals(False, "--dry-run" in checkClientVersion.rsync)
	self.assertEquals(False, "--list-only" in checkClientVersion.rsync)
# -----------------------------------------------------------------------------------------------------
    def test02_CheckClientVersionLocal(self):
	from pokernetwork.upgrade import CheckClientVersion
	checkClientVersion = CheckClientVersion(PokerSettingsMockup(), PokerSettingsMockupSource("/usr/share/poker/"), (0, 0, 0), None)
	self.assertEquals(True, "--dry-run" in checkClientVersion.rsync)
	self.assertEquals(True, "--list-only" in checkClientVersion.rsync)

##############################################################################
from pokernetwork.upgrade import DryrunUpgrade
class DryrunUpgradeMockUp(DryrunUpgrade):
    instance = None
    def __init__(self, config = PokerSettingsMockup(), settings = PokerSettingsMockup(), version = "1.1.20"):
        DryrunUpgradeMockUp.instance = self
	DryrunUpgrade.__init__(self, config, settings, version)
 	self.rsyncFailedCalled = False
	self.rsyncDoneCalled = False
	self.needUpgrade = False
    def spawn(self):
	pass
    def configure(self, command):
	pass
    def rsyncFailed(self, logs, reason):
	self.rsyncFailedCalled =  True
    def rsyncDone(self, need_upgrade, version):
	self.rsyncDoneCalled = True
	self.needUpgrade = need_upgrade

class PokerClientDryrunUpgrade(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
        silence_all_messages()

# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        restore_all_messages()
        
# -----------------------------------------------------------------------------------------------------
    def test01_dryRunLineTest(self):
        clear_all_messages()
	self.dryrun = DryrunUpgradeMockUp("1.1.20")
        self.assertEquals(self.dryrun.files_count, 0)
        self.assertEquals(self.dryrun.files_total, 0.0)
        lineSet = [ "20 files to consider", "FILE: /a", "FILE: /b" ]
        clear_all_messages()
        for l in lineSet:
            self.dryrun.outReceived(l + "\n")
        self.assertEquals(get_messages(), lineSet)
        self.assertEquals(self.dryrun.files_count, 2)
        self.assertEquals(self.dryrun.files_total, 20.0)
##############################################################################
from pokernetwork.upgrade import GetPatch, TICK
class GetPatchMockUp(GetPatch):
    instance = None
    def __init__(self, config = PokerSettingsMockup(), settings = PokerSettingsMockup(), version = "1.1.20", files_total = 50):
        GetPatchMockUp.instance = self
	GetPatch.__init__(self, config, settings, version, files_total)
 	self.rsyncFailedCalled = False
	self.rsyncDoneCalled = False
	self.needUpgrade = False
    def spawn(self):
	pass
    def configure(self, command):
	pass
    def rsyncFailed(self, logs, reason):
	self.rsyncFailedCalled =  True
    def rsyncDone(self, need_upgrade, version):
	self.rsyncDoneCalled = True
	self.needUpgrade = need_upgrade

class GetPatchUpgradeTest(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
        silence_all_messages()

# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        restore_all_messages()
        
# -----------------------------------------------------------------------------------------------------
    def test01_getPatchLine(self):
        clear_all_messages()
	self.getpatch = GetPatchMockUp(50)
        self.assertEquals(self.getpatch.files_count, 0)
        self.assertEquals(self.getpatch.files_total, 50)
        lineSet = [ "20 files to consider", "FILE: /a", "FILE: /b" ]
        clear_all_messages()
        for l in lineSet:
            self.getpatch.outReceived(l + "\n")
        self.assertEquals(get_messages(), lineSet)
        def checkDivide(value, dummy):
            self.assertEquals(value, 2/50.0)
        self.getpatch.registerHandler(TICK, checkDivide)

######################################################################
from pokernetwork import upgrade
from pokernetwork.upgrade import NO_NETWORK, HOST_DOES_NOT_RESPOND, UPGRADE_READY
from pokernetwork.pokerchildren import RSYNC_NO_NETWORK, RSYNC_HOST_DOES_NOT_RESPOND

class ReasonMockup:
    def __init__(self):
        self.value = ""
        
class UpgraderMockup(upgrade.Upgrader):
    def __init__(self, *args, **kwargs):
        upgrade.Upgrader.__init__(self, *args, **kwargs)
        self.call_failed = False
        self.call_checkClientVersionFailed = False
        self.verbose = 6
        upgrade.CheckClientVersion = CheckClientVersionMockup

    def checkClientVersion(self, version):
        upgrade.Upgrader.checkClientVersion(self, version)

    def spawn():
        pass

    def failed(self, logs, reason):
        self.call_failed = True

class UpgraderTestCase(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
#        pass
        silence_all_messages()
    def tearDown(self):
        pass
        
# -----------------------------------------------------------------------------------------------------
    def test01_CheckClientVersionFailed1(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        clear_all_messages()
        self.upgrade.checkClientVersion((1, 1, 20))
        self.assertEquals(get_messages(), ['Upgrade::checkClientVersion((1, 1, 20))',
                                           'CheckClientVersion checking version (1, 1, 20) against server'])
        CheckClientVersionMockup.instance.errors.append("failed to connect to")
        CheckClientVersionMockup.instance.processEnded(ReasonMockup())
	self.assertEquals(True, self.upgrade.call_failed)
    #----------------------------------------------------------------------
    def test02_CheckClientVersionFailed2(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        CheckClientVersionMockup.instance.errors.append("getaddrinfo")
        CheckClientVersionMockup.instance.errors.append("Temporary failure in name resolution")
        CheckClientVersionMockup.instance.processEnded(ReasonMockup())
	self.assertEquals(True, self.upgrade.call_failed)
    #----------------------------------------------------------------------
    def test03_noNetwork(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        global countCalled
        countCalled = 0
        def receiveNoNetwork(log, reason):
            global countCalled
            countCalled += 1
            self.assertEquals(log, "got no network")
            self.assertEquals(reason, "because I said so")
        clear_all_messages()
        self.upgrade.registerHandler(NO_NETWORK, receiveNoNetwork)
        CheckClientVersionMockup.instance.publishEvent(RSYNC_NO_NETWORK,
                                                   "got no network", "because I said so")
        self.assertEquals(get_messages(),['ERROR *CRITICAL* checkClientVersionFailedNoNetwork logs:got no network reason:because I said so'])
    #----------------------------------------------------------------------
    def test04_hostNoRespond(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        global countCalled
        countCalled = 0
        def hostNotRespond(log, reason):
            global countCalled
            countCalled += 1
            self.assertEquals(log, "host did not respond")
            self.assertEquals(reason, "because I said so")
        clear_all_messages()
        self.upgrade.registerHandler(HOST_DOES_NOT_RESPOND, hostNotRespond)
        CheckClientVersionMockup.instance.publishEvent(RSYNC_HOST_DOES_NOT_RESPOND,
                                                   "host did not respond", "because I said so")
        self.assertEquals(get_messages(),['ERROR *CRITICAL* checkClientVersionFailedHostDoesNotRespond logs:host did not respond reason:because I said so'])
        self.assertEquals(countCalled, 1)
    #----------------------------------------------------------------------
    def test05_getUpgrader(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        clear_all_messages()
        self.upgrade.getUpgrade("1.1.20", ("/something",) )
        self.assertEquals(get_messages()[0], 'Upgrader::getUpgrade')
        self.assertEquals(get_messages()[1], 'Upgrade::upgrade to version 1.1.20')
        return True
    #----------------------------------------------------------------------
    def test06_upgradeReady(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        global countCalled
        countCalled = 0
        def checkUpgradeReady(target, dir):
            global countCalled
            countCalled += 1
            self.assertEquals(target, "")
            self.assertEquals(dir, "/")
        self.upgrade.registerHandler(UPGRADE_READY, checkUpgradeReady)
        clear_all_messages()
        self.upgrade.upgradeReady()
        self.assertEquals(get_messages(), [ "Upgrade::upgradeReady" ])
        clear_all_messages()
        self.assertEquals(countCalled, 1)
        return True
# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    loader = runner.TestLoader()
#    loader.methodPrefix = "test01"
    suite.addTest(unittest.makeSuite(PokerClientUpgradeFailedTestCase))
    suite.addTest(unittest.makeSuite(PokerClientUpgradeCheckClientVersion))
    suite.addTest(loader.loadClass(UpgraderTestCase))
    suite.addTest(loader.loadClass(PokerClientDryrunUpgrade))
    suite.addTest(loader.loadClass(GetPatchUpgradeTest))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    from pokernetwork import upgrade
    return upgrade
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-upgrade.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/upgrade.py' TESTS='coverage-reset test-upgrade.py coverage-report' check )"
# End:
