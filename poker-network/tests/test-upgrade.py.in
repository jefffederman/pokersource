#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest
from twisted.trial import runner

from pokernetwork.pokerclient import PokerClientFactory
from pokernetwork import dispatch

class PokerSettingsMockup:
    def headerGetInt(self, path):
	return None
    def headerGet(self, path):
	return ""
    def headerGetProperties(self, path):
	return None

from pokernetwork.upgrade import CheckClientVersion
from pokernetwork.pokerchildren import RSYNC_FAILED
class CheckClientVersionMockup(CheckClientVersion):
    instance = None
    def __init__(self, config = PokerSettingsMockup(), settings = PokerSettingsMockup(), version = (1,1,20), callback = None):
        CheckClientVersionMockup.instance = self
        callback_was_none = callback
        if callback is None:
            callback = self.rsyncDone
	CheckClientVersion.__init__(self, config, settings, version, callback)
        if callback_was_none is None:
            self.registerHandler(RSYNC_FAILED, self.rsyncFailed)
 	self.rsyncFailedCalled = False
	self.rsyncDoneCalled = False
	self.needUpgrade = False
    def spawn(self):
	pass
    def configure(self, command):
	pass
    def rsyncFailed(self, logs, reason):
	self.rsyncFailedCalled =  True
    def rsyncDone(self, need_upgrade, version):
	self.rsyncDoneCalled = True
	self.needUpgrade = need_upgrade

class PokerClientUpgradeFailedTestCase(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
        self.stdout = sys.stdout
        import StringIO
        self.output = StringIO.StringIO()
        sys.stdout = self.output

# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        self.output.close()
        sys.stdout = self.stdout
        
# -----------------------------------------------------------------------------------------------------
    def testCheckClientVersionFailedAndNeedUpgrade(self):
	self.checker = CheckClientVersionMockup((1, 1, 20))
	self.checker.line("1.1.19")
	self.checker.line("1.1.20")
	self.checker.line("1.1.21")
	self.checker.failed("dummy log", "dummy reason")
	self.assertEquals(False, self.checker.rsyncFailedCalled)
	self.assertEquals(True, self.checker.rsyncDoneCalled)
	self.assertEquals(True, self.checker.needUpgrade)
	self.assertEquals("*CRITICAL* CheckClientVersion.failed logs:dummy log reason:dummy reason\n", self.output.getvalue())

    def testCheckClientVersionFailedAndClientVersionOk(self):
	self.checker = CheckClientVersionMockup((1, 1, 20))
	self.checker.line("1.1.19")
	self.checker.line("1.1.20")
	self.checker.failed("dummy log", "dummy reason")
	self.assertEquals(False, self.checker.rsyncFailedCalled)
	self.assertEquals(True, self.checker.rsyncDoneCalled)
	self.assertEquals(False, self.checker.needUpgrade)
	self.assertEquals("*CRITICAL* CheckClientVersion.failed logs:dummy log reason:dummy reason\n", self.output.getvalue())

    def testCheckClientVersionFailedAndNoVersionMatched(self):
	self.checker = CheckClientVersionMockup((1, 1, 20))
	self.checker.line("salut les aminches")
	self.checker.failed("dummy log", "dummy reason")
	self.assertEquals(True, self.checker.rsyncFailedCalled)
	self.assertEquals(False, self.checker.rsyncDoneCalled)
	self.assertEquals(False, self.checker.needUpgrade)
	self.assertEquals("*CRITICAL* CheckClientVersion.failed logs:dummy log reason:dummy reason\n", self.output.getvalue())

class PokerSettingsMockupSource:
    def __init__(self, source):
	self.source = source
    def headerGetInt(self, path):
	return None
    def headerGet(self, path):
	if path == "/settings/rsync/@source":
	    return self.source
	return ""
    def headerGetProperties(self, path):
	return None



class PokerClientUpgradeCheckClientVersion(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
	pass
# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
	pass
# -----------------------------------------------------------------------------------------------------
    def test_CheckClientVersionRemote(self):
	from pokernetwork.upgrade import CheckClientVersion
	checkClientVersion = CheckClientVersion(PokerSettingsMockupSource("rsync::poker/update/"), PokerSettingsMockupSource("rsync::foo/bar/"), (0, 0, 0), None)
	self.assertEquals(False, "--dry-run" in checkClientVersion.rsync)
	self.assertEquals(False, "--list-only" in checkClientVersion.rsync)
# -----------------------------------------------------------------------------------------------------
    def test_CheckClientVersionLocal(self):
	from pokernetwork.upgrade import CheckClientVersion
	checkClientVersion = CheckClientVersion(PokerSettingsMockup(), PokerSettingsMockupSource("/usr/share/poker/"), (0, 0, 0), None)
	self.assertEquals(True, "--dry-run" in checkClientVersion.rsync)
	self.assertEquals(True, "--list-only" in checkClientVersion.rsync)



from pokernetwork import upgrade

class ReasonMockup:
    def __init__(self):
        self.value = ""
        
class UpgraderMockup(upgrade.Upgrader):
    def __init__(self, *args, **kwargs):
        upgrade.Upgrader.__init__(self, *args, **kwargs)
        self.call_failed = False
        self.call_checkClientVersionFailed = False
        self.call_checkClientVersionFailedHostDoesNotRespond = False
        self.call_checkClientVersionFailedNoNetwork = False
        self.verbose = 0
        upgrade.CheckClientVersion = CheckClientVersionMockup

    def checkClientVersion(self, version):
        upgrade.Upgrader.checkClientVersion(self, version)
        
    def failed(self, logs, reason):
        self.call_failed = True

    def checkClientVersionFailedNoNetwork(self, logs, reason):
        self.call_checkClientVersionFailedNoNetwork = True
        
    def checkClientVersionFailedHostDoesNotRespond(self, logs, reason):
        self.call_checkClientVersionFailedHostDoesNotRespond = True
        

    
class UpgraderTestCase(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
        pass
    def tearDown(self):
        pass
        
# -----------------------------------------------------------------------------------------------------
    def testCheckClientVersionFailed1(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        CheckClientVersionMockup.instance.errors.append("failed to connect to")
        CheckClientVersionMockup.instance.processEnded(ReasonMockup())
	self.assertEquals(True, self.upgrade.call_failed)

    def testCheckClientVersionFailed2(self):
	self.upgrade = UpgraderMockup(PokerSettingsMockup(), PokerSettingsMockup())
        self.upgrade.checkClientVersion((1, 1, 20))
        CheckClientVersionMockup.instance.errors.append("getaddrinfo")
        CheckClientVersionMockup.instance.errors.append("Temporary failure in name resolution")
        CheckClientVersionMockup.instance.processEnded(ReasonMockup())
	self.assertEquals(True, self.upgrade.call_failed)

# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    loader = runner.TestLoader()
    suite.addTest(unittest.makeSuite(PokerClientUpgradeFailedTestCase))
    suite.addTest(unittest.makeSuite(PokerClientUpgradeCheckClientVersion))
    suite.addTest(loader.loadClass(UpgraderTestCase))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    from pokernetwork import upgrade
    return upgrade
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-upgrade.py ) ; ( cd ../tests ; make TESTS='test-upgrade.py' check )"
# End:
