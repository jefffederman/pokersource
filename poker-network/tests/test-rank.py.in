#!/usr/bin/python2.4
# -*- mode: python -*-
#
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Cedric Pinson <cpinson@freesheep.org>
# 

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

from pokerui.pokerrenderer import PokerRenderer
from pokerui.pokerrenderer import  LEAVING_DONE, CANCELED, SIT_OUT, LEAVING, LEAVING_CONFIRM, JOINING, JOINING_MY, REBUY, PAY_BLIND_ANTE, PAY_BLIND_ANTE_SEND, MUCK, USER_INFO, HAND_LIST, SEARCHING_MY_CANCEL, SEARCHING_MY, LOBBY, IDLE, OUTFIT, QUIT, CASHIER, QUIT_DONE, TOURNAMENTS, TOURNAMENTS_REGISTER, TOURNAMENTS_UNREGISTER,  SEATING, LOGIN, BUY_IN
from pokerui.pokerinterface import INTERFACE_YESNO
from pokernetwork.packets import PacketQuit, PacketSerial, PACKET_QUIT
from pokernetwork.pokerpackets import PacketPokerId, PACKET_POKER_GET_PERSONAL_INFO, PACKET_POKER_GET_USER_INFO

import unittest

#-----------------
class PokerRendererMockup(PokerRenderer):
    def __init__(self):
	self.factory = PokerFactoryMockup()
	self.chat_words = [{'in': "nh",
			    'out': "nice hand",
			    'event': "emThumbUp"}]
	self.verbose = 3
	self.protocol = PokerProtocolMockup()
        self.message = None
        self.state = None
        self.stream_mode = True
        self.call_showLobby = False
        self.call_queryLobby = False
        self.call_chatHide = False

    def showMessage(self, message, callback):
        self.message = message

    def state2hide(self):
        return True

    def showLobby(self):
        self.call_showLobby = True

    def queryLobby(self):
        self.call_queryLobby = True

    def chatHide(self):
        self.call_chatHide = True

    def render(self, packet):
        pass

    def updateInterfaceWindows(self, state1, state2):
        pass
    
class PokerProtocolMockup:
    def __init__(self):
	self.packets = []
    def schedulePacket(self, packet):
	self.packets.append(packet)

class PokerInterfaceMockup:
    def __init__(self):
        pass
    def showMenu(self):
        pass

class PokerFactoryMockup:
    def __init__(self):
	self.verbose = 3
	self.chat_config = {'max_chars': 80,
			    'line_length': 80}
        self.interface = PokerInterfaceMockup()

class PokerRendererTestCase(unittest.TestCase):
    
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererMockup()
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.renderer = None
        
    # -----------------------------------------------------------------------------------------------------
    def test_showRank(self):
        self.renderer.showYourRank(100, 5, 10, 10000)
        self.assertEquals("Tourney 100\n Your rank is 5 on 10\nYou won 100", self.renderer.message)


def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerRendererTestCase))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerrenderer
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-quit.py ) ; ( cd ../tests ; make TESTS='test-quit.py' check )"
# End:
