# -*- mode: python -*-
# Copyright (C) 2004, 2005, 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest
from pokereval import PokerEval
from pokerengine import pokergame
from pokerengine.pokergame import PokerGameServer, PokerGame
from pokerengine.pokercards import PokerCards

class TestBugUncalled(unittest.TestCase):

    def setUp(self):
        self.game = PokerGameServer("poker.%s.xml", [ "../conf", "@top_srcdir@/conf" ])
        self.game.verbose = 3
        self.game.setVariant("holdem")
        self.game.setBettingStructure("100-200-no-limit")

    def tearDown(self):
	del self.game
        
    def test_bug1(self):
	nplayers = 5
        self.money = 1
        self.player = {}
        money = self.money
        game = self.game
        player = self.player

	money = {}
	money[66] = 2000000
	money[76] = 1000000 
	money[77] = 1000000 

        for serial in (66, 76, 77):
	    self.assert_(game.addPlayer(serial))
            player[serial] = game.serial2player[serial]
	    player[serial].money = 200000
            player[serial].buy_in_payed = True
            self.assert_(game.sit(serial))
            #player[serial].auto_blind_ante = True
            game.autoMuck(serial, pokergame.AUTO_MUCK_ALWAYS)
	    player[serial].money = money[serial]

        game.dealer_seat = 0

        game.beginTurn(1)

	player[66].blind = 'big_and_dead'
	player[76].blind = 'small'
	player[77].blind = 'big'

	game.setPosition(0)
	game.blind(66, 20000, 10000)
	game.blind(76, 10000, 0)
	game.blind(77, 20000, 0)

        self.assertEqual(game.state, "pre-flop")

        cards = PokerCards(['8c', '4c'])
	cards.allHidden();
	player[76].hand = cards;
        cards = PokerCards(['4h', '9s'])
	cards.allHidden();
	player[77].hand = cards;
        cards = PokerCards(['Jh', '3h'])
	cards.allHidden();
	player[66].hand = cards;

	game.deck = ['7c', 'Qs', '6c', 'Qc', '2h']

	game.callNraise(66, 2000000)
	game.call(76)
	game.fold(77)

def run():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestBugUncalled))
    verbosity = int(os.environ.get('VERBOSE_T', 2))
    return unittest.TextTestRunner(verbosity=verbosity).run(suite)
    
if __name__ == '__main__':
    if run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.stagtus tests/bugs.py ) ; ( cd ../tests ; make TESTS='bugs.py' check )"
# End:
