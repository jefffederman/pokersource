# -*- mode: python -*-
# Copyright (C) 2004, 2005, 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest
from pokereval import PokerEval
from pokerengine import pokergame
from pokerengine.pokergame import PokerGameServer, PokerGame
from pokerengine.pokercards import PokerCards

class TestBugUncalled(unittest.TestCase):

    def setUp(self):
        self.game = PokerGameServer("poker.%s.xml", [ "../conf", "@top_srcdir@/conf" ])
        self.game.verbose = 3
        self.game.setVariant("holdem")
        self.game.setBettingStructure("100-200-no-limit")

    def tearDown(self):
	del self.game
        
    def test01(self):
        """ Test Poker Game : dead blind + a player has uncalled bet and is not the winner.
        """
        game = pokergame.PokerGameServer("poker.%s.xml", [ "../conf", "../conf" ])
        game.verbose = 3
        game.setVariant("holdem")
        game.setBettingStructure("100-200-no-limit")

        player = {}

	money = {}
	money[66] = 200000
	money[76] = 3000000 
	money[77] = 100000 

        for serial in (66, 76, 77):
	    self.assert_(game.addPlayer(serial))
            player[serial] = game.serial2player[serial]
	    player[serial].money = 200000
            player[serial].buy_in_payed = True
            self.assert_(game.sit(serial))
            #player[serial].auto_blind_ante = True
            game.autoMuck(serial, pokergame.AUTO_MUCK_ALWAYS)
            game.autoBlindAnte(serial)
	    player[serial].money = money[serial]

        game.dealer_seat = 0

        #
        # 77 : 4c 8c
        # 76 : 9s 4h
        # 66 : 3h Jh
        #
	game.deck = ['7c', 'Qs', '6c', 'Qc', '2h', '4h', 'Jh', '8c', '9s', '3h', '4c' ]
        game.board = PokerCards(['9c', '3d', '2d', 'Qd', 'Ah'])

        # player list: [66, 76, 77]
        # dealer : 66
        game.beginTurn(1)
        game.call(66)
        game.call(76)
        game.check(77)
        self.assertEqual(game.state, "flop")

	game.callNraise(76, 150000)
	game.call(77)
        game.call(66)
        self.assertEqual(game.state, "turn")

        game.fold(76)
        game.callNraise(66, 1000)
        self.assertEqual(game.state, "end")

def run():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestBugUncalled))
    verbosity = int(os.environ.get('VERBOSE_T', 2))
    return unittest.TextTestRunner(verbosity=verbosity).run(suite)
    
if __name__ == '__main__':
    if run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.stagtus tests/bugs.py ) ; ( cd ../tests ; make TESTS='bugs.py' check )"
# End:
