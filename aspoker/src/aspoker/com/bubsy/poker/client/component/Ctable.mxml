<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//     Copyright (C) 2008 Bruno Garnier <bruno.garnier@gmail.com>
//
//     This program is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" 
	xmlns:component="aspoker.com.bubsy.poker.client.component.*" 
	creationComplete="_init()" remove="_destroy();">
	
	  <mx:Script>
 	<![CDATA[
 		import flash.utils.setTimeout;
 		import flash.utils.setInterval;
 		import mx.controls.Image;
 		import aspoker.com.bubsy.poker.client.model.Card;
 		import aspoker.com.bubsy.poker.client.model.Player;
 		import aspoker.com.bubsy.poker.client.model.User;
 		import aspoker.com.bubsy.poker.client.model.BuyInPopup;
 		import mx.controls.Alert;
 		import mx.logging.Log;
 		import aspoker.com.bubsy.poker.client.event.LoginEvent;
 		import mx.core.Container;
 		import aspoker.com.bubsy.poker.client.PokerClient;
 		import mx.core.Application;
 		import aspoker.com.bubsy.poker.client.model.Table;
		import aspoker.com.bubsy.poker.client.event.TableEvent;
		
		public var table:Table;
		
		public function set gameId(gameId:int):void
		{
			table = new Table(gameId);
			
			table.addEventListener(
				TableEvent.onPacketPokerPlayerArrive,
				_onPlayerArrive
			);
			
			table.addEventListener(
				TableEvent.onPacketPokerPlayerLeave,
				_onPlayerLeave
			);
			
			table.addEventListener(
				LoginEvent.onPacketAuthRequest,
				_onAuthRequest
			);
			
			table.addEventListener(
				TableEvent.onPacketPokerPlayerChips,
				_onPlayerChips
			);
			
			table.addEventListener(
				TableEvent.onPacketPokerSit,
				_onSit
			);
			
			table.addEventListener(
				TableEvent.onPacketPokerSeats,
				_onSeats
			);
			
			table.addEventListener(
				TableEvent.onPacketPokerSitOut,
				_onSitOut
			);		
				
			table.addEventListener(
				TableEvent.onPacketPokerBlindRequest,
				_onPacketPokerBlindRequest
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerPosition,
				_onPacketPokerPosition
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerCall,
				_onPacketPokerAction
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerCheck,
				_onPacketPokerAction
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerFold,
				_onPacketPokerAction
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerRaise,
				_onPacketPokerAction
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerBlind,
				_onPacketPokerAction
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerStart,
				_onPacketPokerStart
			);	
			
			table.addEventListener(
				TableEvent.onPacketPokerState,
				_onPacketPokerState
			);	
			
			table.addEventListener(
				TableEvent.PacketPokerBoardCards,
				_onPacketPokerBoardCards
			);
			
			table.addEventListener(
				TableEvent.onPacketPokerPlayerCards,
				_onPacketPokerPlayerCards
			);
			
		}
		
		private function _onPacketPokerBoardCards(evt:TableEvent):void
		{
			boardCards.setCards(table.boardCards);
		}
		
		private function _onPacketPokerPlayerCards(evt:TableEvent):void
		{
			var serial:Number = evt.packet.serial;
			
			var seat:CSeat = seats.getChildByName(
					"seat"+ table.getPlayer(serial).seat
					) as CSeat ;
					
			seat.setCards(table.getPlayer(serial).cards);		
		}		
				
		private function _onPacketPokerState(evt:TableEvent):void
		{
			/* keep the last seat state if preflop */
			if (table.state != table.TABLE_STATE_PRE_FLOP)
			{
				setPlayersSeatState(table.getInvolvedPlayers(),"clear");
			}
		}
		
		private function _onPacketPokerStart(evt:TableEvent):void
		{
			trace("nouvelle partie");
			setPlayersSeatState(table.playerSerialsInGame,"clear");
			boardCards.initializeCards();
		}

		private function setPlayersSeatState(arrOfSerials:Array/*of serials*/,
			state:String):void
		{
			for each(var serial:int in arrOfSerials)
        	{
        		var seat:CSeat = seats.getChildByName(
					"seat"+ table.getPlayer(serial).seat
					) as CSeat ;
        		seat.currentState = state;
        	}
		}
		
		private function _onPacketPokerAction(evt:TableEvent):void
		{
			var player:Player = table.getPlayer(evt.packet.serial);
			
			var seat:CSeat = seats.getChildByName(
					"seat"+ player.seat
					) as CSeat ;

			pot.text = "montant du pot" + table.currentPot;
			
			/* unselect the previous player seat*/
			var previousSeat:CSeat= seats.getChildByName(
					"seat"+ table.getPlayer(evt.packet.serial).seat
				) as CSeat ;
			previousSeat.currentState = "wait";
			
			seat.playerState.text = player.action.name + player.action.amount;
			seat.amount.text = "amount:" + player.bet;
		}
		
		private function _onPacketPokerPosition(evt:TableEvent):void
		{
			var currentSerial:int = table.getSerialFromPosition(table.currentPosition); 
			var player:Player = table.getPlayer(currentSerial);
			
			/* select the current player seat*/						
			if (table.currentPosition>=0)
			{
				var currentSeat:CSeat= seats.getChildByName(
				"seat"+ player.seat
				) as CSeat ;
				
				currentSeat.currentState = "inposition";
				currentSeat.amount.text = "amount "+ player.bet;				
			}
			
			/* the user to play ?*/
			if (PokerClient.user.userSerial==currentSerial) 
			{	/* user play : show action panel */
				if (player.bet == table.currentBlind)
				{
					this.currentState = "InPostionCheckRaise";
				} else if(player.bet < table.currentBlind) {
					this.currentState = "InPostionCallRaise";
				} else {
					this.currentState = "InPostion";
				}
			} else {
				/* user wait to play, don't show action panel */
				this.currentState = "sitIn"
			}
		}
		
		private function _onPacketPokerBlindRequest(evt:TableEvent):void
		{
			//trace("i try to change current state");
			//this.currentState = "InPostion";
		}
		
		private function _init():void
		{
			initializeSeat();
			table.join(table.gameId);
			
			if (PokerClient.user.userSerial>0)
			{
				this.currentState = "noSeat";
			} else {
				this.currentState = "notLogin";
			}
		}
		
		private function _destroy():void
		{
			table.removeEventListener(
				TableEvent.onPacketPokerPlayerArrive,
				_onPlayerArrive);
				
			table.removeEventListener(
				TableEvent.onPacketPokerPlayerLeave,
				_onPlayerLeave
			);
				
			table.removeEventListener(
				LoginEvent.onPacketAuthRequest,
				_onAuthRequest
			);
			
			table.removeEventListener(
				TableEvent.onPacketPokerPlayerChips,
				_onPlayerChips
			);
			
			table.removeEventListener(
				TableEvent.onPacketPokerSit,
				_onSit
			);
			
			table.removeEventListener(
				TableEvent.onPacketPokerSeats,
				_onSeats
			);
			
			table.removeEventListener(
				TableEvent.onPacketPokerSitOut,
				_onSitOut
			);		
				
			table.removeEventListener(
				TableEvent.onPacketPokerBlindRequest,
				_onPacketPokerBlindRequest
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerPosition,
				_onPacketPokerPosition
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerCall,
				_onPacketPokerAction
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerCheck,
				_onPacketPokerAction
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerFold,
				_onPacketPokerAction
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerRaise,
				_onPacketPokerAction
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerBlind,
				_onPacketPokerAction
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerStart,
				_onPacketPokerStart
			);	
			
			table.removeEventListener(
				TableEvent.onPacketPokerState,
				_onPacketPokerState
			);	
			
			table.removeEventListener(
				TableEvent.PacketPokerBoardCards,
				_onPacketPokerBoardCards
			);
			
			table.removeEventListener(
				TableEvent.onPacketPokerPlayerCards,
				_onPacketPokerPlayerCards
			);
						
			table.destroy();
			table = null;
		}
		
		private function quit():void
		{
			var container:Container = Application.application.myViewStack;
			this.removeAllChildren();
			parent.removeChild(this);
		}
		
		private function initializeSeat():void
 		{
 			for (var i:int=0; i<=9; i++)
 			{
 				var cSeat:CSeat =  seats.getChildByName("seat"+i) as CSeat;			
				cSeat.table = table;
				cSeat.gameId = table.gameId;
			}
 		}
 		
 		private function _onPlayerChips(evt:TableEvent):void
 		{
 			var cseat:CSeat= seats.getChildByName(
				"seat"+ table.getPlayer(evt.packet.serial).seat
			) as CSeat ;
			
			cseat.setPlayerChips();
			
			/*user haven't enought money to sit in */
			if (evt.packet.serial == PokerClient.user.userSerial
				&& table.getPlayer(PokerClient.user.userSerial).money >= table.BuyInLimitMin
				&& this.currentState != "sitIn")
 			{
 				this.currentState = "sitOut";
 			}
 		}
 		
 		private function _onAuthRequest(evt:LoginEvent):void
 		{
 			Alert.show("You must authenticate before to select a seat");
 		}
 		
 		private function _onPlayerLeave(evt:TableEvent):void
 		{

 			/* if user leaves the table */
 			if (!evt.packet || 
 				(evt.packet.serial == PokerClient.user.userSerial)
 				)
 			{
 				 quit();
 				 return;
 			} 
 			
 			/* if a player leaves the table */
			var cseat:CSeat= seats.getChildByName(
				"seat"+evt.packet.seat
			) as CSeat ;
				
 			if (table.seats.indexOf(PokerClient.user.userSerial) < 0 )
 			/* is user has a seat?
 			FIXME: To use "user.isSit()" instead indexof ..
 			*/	
 			{ 
				cseat.currentState = "free";
 			} else {
 				/*if user has a seat else others free seats can be hidden*/	
				cseat.currentState = "disabled";
 			}
 		}
 		
 		private function setSeatsState(state:String):void
 		{
 			var i:int=0;
			for each (var seat:int in table.seats)
			{
				if(seat==0) {
					var cseat:CSeat= seats.getChildByName("seat"+i) as CSeat ;
					cseat.currentState = state;
					cseat = null;
				}
				i++;
			}
 		}
 		
 		private function showSeats(visible:Boolean=true):void
 		{
 			var i:int=0;
			for each (var seat:int in table.seats)
			{
				if (i==table.numSeats) 
				{
					//no more seat are available at this table
					break;
				} else {
					var cseat:CSeat= seats.getChildByName("seat"+i) as CSeat ;
					cseat.visible = visible;
					cseat = null;
					i++;
				}
			}
 		}
 		
 		private function _onSeats(evt:TableEvent):void
 		{
 			showSeats();
 			/* is user has a seat?
 			FIXME: To use "user.isSit()" instead indexof ..
 			*/
 			if ( PokerClient.user.userSerial > 0 
 				&& table.seats.indexOf(PokerClient.user.userSerial) < 0 
 			)
 			{
 				return;	
 			}

 			/*if user has a seat else others free seats can be hidden*/	
 			setSeatsState("disabled");
 		}
	
		private function _onSit(evt:TableEvent):void
 		{
			var cseat:CSeat= seats.getChildByName(
				"seat"+ table.getPlayer(evt.packet.serial).seat
				) as CSeat ;

			cseat.currentState = "sitin";
			
			/*user sitin */
			if (evt.packet.serial == PokerClient.user.userSerial)
 			{
 				this.currentState = "sitIn";
 			}
 		}
 		
 		private function _onSitOut(evt:TableEvent):void
 		{
			var cseat:CSeat= seats.getChildByName(
				"seat"+ table.getPlayer(evt.packet.serial).seat
				) as CSeat ;
				
			cseat.currentState = "sitout";
			
			/*user sitout */
			if (evt.packet.serial == PokerClient.user.userSerial)
 			{
 				this.currentState = "sitOut";
 			}
 		}
 		
		private function _onPlayerArrive(evt:TableEvent):void
 		{		
			var cseat:CSeat= seats.getChildByName(
				"seat"+evt.packet.seat
				) as CSeat ;
			cseat.currentState = "sitout";
			cseat = null;
			
			/* FIXME : if user has a sitout */	
			if (evt.packet.serial == PokerClient.user.userSerial
				&& table.getPlayer(PokerClient.user.userSerial).money < table.BuyInLimitMin
			)
 			{
 				this.currentState = "notEnoughMoney";
 			}
 		}
 			
 		public function Buyin():void
 		{
			var toto:BuyInPopup = new BuyInPopup(this,table);
 		}
 	 ]]>
 	</mx:Script>
 	
	<mx:VBox id="gameboard" name="gameboard">
			<mx:Canvas id="seats" name="seats" >
				
				<component:CBoardCards 
				id="boardCards" 
				name="boardCards" 
				top="170" 
				left="250"/>
				
				<mx:Text id="pot" name="pot" 
					top="170" />
				
				
				<component:CSeat 
					id="seat0" 
					name="seat0"
					seatId="0" 
					left="0"
					visible="false"/>
				
				<component:CSeat 
					id="seat1" 
					seatId="1" 
					name="seat1"
					left="150"
					visible="false"/>
				
				<component:CSeat 
					id="seat2" 
					name="seat2"
					seatId="2" 
					left="300"
					visible="false"/>
				
				<component:CSeat 
					id="seat3" 
					seatId="3" 
					name="seat3"
					left="450"
					visible="false"/>
				
				<component:CSeat 
					id="seat4" 
					seatId="4" 
					name="seat4"
					left="600"
					visible="false"/>
					
				<component:CSeat 
					id="seat5" 
					seatId="5" 
					name="seat5"
					left="0" 
					top="230" 
					visible="false"/>
					
				<component:CSeat 
					id="seat6" 
					seatId="6" 
					name="seat6"
					left="150"
					top="230"
					visible="false"/>
					
				<component:CSeat 
					id="seat7" 
					seatId="7" 
					name="seat7"
					left="300"
					top="230"
					visible="false"/>
					
				<component:CSeat 
					id="seat8" 
					seatId="8" 
					name="seat8"
					left="450"
					top="230"
					visible="false"/>
					
				<component:CSeat 
					id="seat9" 
					seatId="9" 
					name="seat9"
					left="600"
					top="230"
					visible="false"/>
			</mx:Canvas>

			<mx:Canvas width="100%">
				<mx:HBox id="tableOptions" left="5"/>
				<mx:HBox id="tableActions" right="5"/>
			</mx:Canvas>	
		</mx:VBox>
		
		<mx:states>
				<mx:State name="notLogin">
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="exit"  click="table.quit()"/>	
					</mx:AddChild>
				</mx:State>	
				
				<mx:State name="noSeat">
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="exit"  click="table.quit()"/>	
					</mx:AddChild>
				</mx:State>	
				
				<mx:State name="sitIn">
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="sitOut" click="table.sitOut()" />
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="exit"  click="table.quit()"/>	
					</mx:AddChild>
				</mx:State>		
				
				<mx:State name="sitOut" >
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="sit" click="table.sitIn()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="rebuy" click="Buyin()" />
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="exit"  click="table.quit()"/>
					</mx:AddChild>
				</mx:State>	
				
				<mx:State name="notEnoughMoney">
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="rebuy" click="Buyin()" />
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableOptions}" >
						<mx:Button label="exit"  click="table.quit()"/>
					</mx:AddChild>
				</mx:State>	
				
				<mx:State name="Smallblind"  basedOn="sitIn">
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="bet" click="table.blind()"/>
					</mx:AddChild>
				</mx:State>	
					
				<mx:State name="BigBlind"  basedOn="sitIn">
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="bet" click="table.blind()"/>
					</mx:AddChild>
				</mx:State>	
					
				<mx:State name="InPostion" basedOn="sitIn">
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="fold" click="table.fold()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="check" click="table.check()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="call" click="table.call()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="raise" click="table.raise(0)"/>
					</mx:AddChild>
				</mx:State>	
				
				<mx:State name="InPostionCheckRaise" basedOn="sitIn">
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="fold" click="table.fold()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="check" click="table.check()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="raise" click="table.raise(0)"/>
					</mx:AddChild>
				</mx:State>	
				
				<mx:State name="InPostionCallRaise" basedOn="sitIn">
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="fold" click="table.fold()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="call" click="table.call()"/>
					</mx:AddChild>
					<mx:AddChild relativeTo="{tableActions}" >
						<mx:Button label="raise" click="table.raise(0)"/>
					</mx:AddChild>
				</mx:State>		
		</mx:states>
</mx:Canvas>
