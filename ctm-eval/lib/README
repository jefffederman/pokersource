The hand evaluator returns a magic int which has the property that
eval(hand1) > eval(hand2) iff hand1 is better than hand2, and
eval(hand1) == eval(hand2) iff hand1 is exactly as good as hand2.

A hand is represented by 4 bit masks of 13 bits each, one per suit.
Each of these is stored in a separate int.  The hand evaluator does
a switch on the bitwise OR of those four suits (Mat's idea).  The
particular bitwise OR you get tells you a great deal about what
sort of hand you might or might not have, especially in the common
cases.  We machine-generate the switch and all of the cases, but
surprisingly it doesn't generate that much code.

For example, depending where you switch to, you know _instantly_
if you have a straight or not, depending the bits in the OR (obviously
5 bits in a row in the switch # means a straight).  The code you
switch to will implicitly know it has a straight.

If you have seven cards and the bitwise OR only has 6 bits set,
then you _know_ you have a pair, and you _know_ you cannot have 3
or 4 of a kind, or two pair, etc.

You can't possibly have a flush unless there are at least 5 bits
in the OR.

And so on...you have to be a bit careful, since (for example) if
you have 7 cards and only 5 bits in the OR, you might either have
two pair or 3 of a kind.  But you know you can't have 4 of a kind,
so the case statement doesn't waste time checking.

Each case statement is sort of a binary search that tries to identify
the best hand you could possibly have as quickly as possible.  It
turns out that there are only a handful of distinct switch cases
to handle (8) but of course each has a large number of case statements
sitting in front of it.

There is more explanation in the file tree.h.
