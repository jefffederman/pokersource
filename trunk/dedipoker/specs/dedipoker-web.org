* DONE Abstract
   The main goal of Dedipoker is to build a website that will allow
   users to run their own poker networks.

   Poker networks will be hosted on [[http://code.google.com/p/ganeti/][Ganeti]] virtual machines and
   managed by [[http://www.pokersource.info/][PokerSource]].

   The website will use the Ganeti [[http://ganeti-doc.googlecode.com/svn/ganeti-2.0/rapi.html][REST API]] to manage the VMs.

* DONE Technical choices
   Coding language: PHP 5.2 or higher

   Database: MySQL 5.1 or higher with MyISAM engine (TODO InnoDB ?)

   Target server: 64 bits machine running Debian/lenny

   Unit tests will have to be written in order to cover 100% of the
   code using [[http://www.phpunit.de/][PHPUnit]]. No exception will be made about that
   percentage.

   The [[http://framework.zend.com/][Zend Framework]] must be used as much as possible.

   Particular efforts must be made to render the web site scalable on
   multiple concurrent web servers: no temporary local files must be
   used, sessions must be in the database, etc.

   The primary language will be English but the web site and emails
   must be translatable into several languages using [[http://php.net/gettext][Gettext]].

   The [[http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller][Model View Controller architecture]] must be used.

* DONE Prerequisites
   A working Ganeti setup will be available for development purposes,
   including:
   - a cluster of two physical fail-over nodes configured with [[http://www.linux-kvm.org/][KVM]] and
     LVM
   - access to the REST API
   - a collection of scripts needed to build a Ganeti instance with
     Pokersource embedded (man ganeti-os-interface)

   8 public IP addresses to allocate for VMs.

   A Debian/lenny machine with full SSH access for installation and
   package testing.

* DONE Deliverable
   The following items must be delivered:

    - the source code, SQL dump, unit tests and gettext dictionaries,
      published into the [[http://pokersource.info/developers/][PokerSource SVN repository]] and released under
      the [[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]

    - a Debian package installable with APT on a Debian/lenny 64 bits
      machine. The package must not contain any [[http://lintian.debian.org/][Lintian]] error, must
      depend on every needed packages in order to be installable on a
      vanilla system, must run out of the box after installation
      through APT if the SQL database and Ganeti are running locally
      and are correctly configured

* DONE Basket
  Users can add items into their basket in order for later ordering.

  Item available :
   - "poker network" creation
   - "poker network" renewal

  Parameters:
  - [[http://en.wikipedia.org/wiki/Fqdn][Fully qualified domain name]] (FQDN)
  - duration, integer in months

  Others items and options might be added in the future.

  Users can remove items from their basket and change options.

  Users are able to add items into their basket before creating an
  account. Logged users can use basket too.

  The basket allows to proceed directly through payment if the user is
  already logged in, otherwise the user is asked to log in or sign up.

* DONE Sign up
   Users will be able to register, log in and log out from the site.

   Here's the list of information we need to store about users in the
   database:
   - email address
   - encrypted password
   - first name
   - last name
   - company (optional)
   - phone number with international prefix (optional)
   - street
   - city
   - country
   - state (optional if outside the US)
   - zip code
   - language

   The email address will be used to log into the site, no login nor
   username are needed.

   Passwords will be encrypted in the database using the MySQL
   function MD5().

   Only one account is allowed per email address, this must be
   enforced by a SQL primary key.

   Each user will be able to have several VMs with the same account.

   If the user has one or more items in his/her bask when logging in,
   he/she is redirected to the payment page.

   Otherwise, he/she is redirected to his/her panel.

   [[http://framework.zend.com/manual/en/zend.auth.html][Zend Auth]] must be used.

   TODO: OpenID? [[http://framework.zend.com/manual/en/zend.openid.html][Zend_OpenId]]?

   TODO: opensocial / elgg.org / drupal?

   TODO: [[http://framework.zend.com/manual/en/zend.session.html][Zend_Session]]

* DONE Payment
  Once the user is logged in and has added one or more item to his/her
  basket, he/she can proceed through payment.

  Interface with Paypal is required.

  When payment is successfully acknowledged from Paypal, the
  corresponding services are created, VMs are created through Ganeti
  API.

* DONE Panel
  Once the user is logged in, he/she is redirected to a page with
  links and information:

  Links to:
   - invoices
   - update user information
   - change VM name
   - renew VM
   - reboot VM

* DONE Update user information
  Logged users are allowed to update all their user information.
  Please read the 'Sign up' chapter for a list of items they can
  change.

* DONE Email validation
  Each time a new email address is known to the system, it has to be
  validated with a hyperlink sent by email.

  Cases:
   - sign up
   - update user information

* DONE Actions on VMs
  Users are allowed to make actions on their own VMs (if any):
  - change the FQDN
  - stop the VM
  - start the VM
  - reboot the VM

  Each action will send the corresponding command through Ganeti API.

* DONE Invoices
  Each time a basket is paid, the corresponding invoice has to be
  available to users.

  Users have to receive and email, in their own language, about the
  fact the invoice is ready, with a link to the invoice on the web
  site.

  Every invoiced is available to user from the beginning.

  [[http://framework.zend.com/manual/en/zend.pdf.html][Zend_PDF]] must be used.

* DONE Renew
  Users are able to renew their services before the expiration date.

  Items are sent to the basket, payment is required and expiration
  date is updated.

  After expiration date, users have to contact the support to renew
  their VMs.
* DONE Email reminder (cron)
  Users are reminded by email about their service expiration 1 day, 2
  days, 1 week, 2 weeks and 1 month before the expiration date.

  A link in the email allows them to create a basket with the service
  renewal in it in order to ease the procedure.

  The email reminder script will be automatically added into
  /etc/cron.daily/ by the Debian package.
* DONE Newsletter
  A newsletter is available to any users, logged in or not.

  Actions are:
   - subscription
   - unsubscription
   - browse previous newsletter

* DONE User history
  Any action related to the user must be logged into a dedicated SQL
  table.

  Information logged :
  - IP address (if available)
  - timestamp
  - user ID
  - action

  Actions logged:
  - sign up
  - log in
  - log out
  - info change     
  - order
  - automatic email reminder
  - automatic expiration
  - action on the VMs: start, stop, reboot
* TODO Configuration
  Where to store the configuration (Paypal account, ganeti api url,
  SQL server)?

  DB? Conffile?
