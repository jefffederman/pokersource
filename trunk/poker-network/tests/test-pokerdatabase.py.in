#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Bradley M. Kuhn <bkuhn@ebb.org>
# Copyright (C) 2007 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#  Bradley M. Kuhn <bkuhn@ebb.org>

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor

twisted.internet.base.DelayedCall.debug = True
import libxml2
import re

from tests.testmessages import silence_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokernetwork import pokerdatabase
from pokernetwork import pokernetworkconfig
from pokernetwork import version

actualSchemaFile = "@srcdir@/../../database/schema.sql"

settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3">
  <database name="pokernetworktest" host="@MYSQL_TEST_DBHOST@" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="%s" command="@MYSQL@" />
</server>
""" % actualSchemaFile
settings_missing_schema_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3">
  <database name="pokernetworktest" host="@MYSQL_TEST_DBHOST@" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="/this/is/not/a/file/and/should/not/be/there/not-my-schema-go-away.sql" command="@MYSQL@" />
</server>
"""
settings_root_both_users_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3">
  <database name="pokernetworktest" host="@MYSQL_TEST_DBHOST@" user="@MYSQL_TEST_DBROOT@" password="@MYSQL_TEST_DBROOT_PASSWORD@"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
</server>
"""
class PokerDatabaseTestCase(unittest.TestCase):
    def destroyDb(self):
        if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@'  -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        else:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
    # ----------------------------------------------------------------------------
    def setUp(self):
        self.destroyDb()
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml, len(settings_xml))
        settings.header = settings.doc.xpathNewContext()
        self.settings = settings

        r = re.compile("""INSERT\s+INTO\s+server\s+\(\s*version\s*\)\s+VALUES\s*\("([\d\.]+)"\s*\)""", flags=re.I)
        infile = open(actualSchemaFile, "r")
        self.pokerdbVersion = "0.0.0"
        while infile:
            line = infile.readline()
            m = re.match(r, line)
            if m:
                self.pokerdbVersion = m.group(1)
                break
        infile.close()
        # We should be able to find the version number
        self.assertNotEquals(self.pokerdbVersion, "0.0.0")
    # ----------------------------------------------------------------------------
    def tearDown(self):
        try:
            self.db.close()
        except:
            pass
        try:
            del self.db
        except:
            pass
        try:
            self.destroyDb()
        except:
            pass
    # ----------------------------------------------------------------------------
    def test01_upgrade(self):
        self.db = pokerdatabase.PokerDatabase(self.settings)
        self.db.setVersionInDatabase("0.0.0")
        self.db.version = version.Version("0.0.0")
        self.db.upgrade('@srcdir@/../../tests/test-pokerdatabase', False)
        self.assertEquals(self.db.getVersion(), self.pokerdbVersion)
    # ----------------------------------------------------------------------------
    def test02_dbVersionTooOld(self):
        import MySQLdb
        class DummyMySQL:
            def get_server_info(self):
                return "3.2.5"
            def query(self, string):
                return string
            def close(self):
                pass
        def dummyConnect(host, port, user, passwd, db='mysql'):
            parameters = self.settings.headerGetProperties("/server/database")[0]
            if user == parameters['user']:
                raise SqlError
            else:
                return DummyMySQL()
        realconnect = MySQLdb.connect
        MySQLdb.connect = dummyConnect
        try:
            self.db = pokerdatabase.PokerDatabase(self.settings)
        except UserWarning, uw:
            self.assertEqual(uw.args[0], "PokerDatabase: MySQL server version is 3.2.5 but version >= 5.0 is required")
        MySQLdb.connect = realconnect
    # ----------------------------------------------------------------------------
    def test03_schemaFileMissing(self):
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_missing_schema_xml,
                                           len(settings_missing_schema_xml))
        settings.header = settings.doc.xpathNewContext()
        self.settings = settings
        try:
            self.db = pokerdatabase.PokerDatabase(self.settings)
            assert("Schema file was missing so this line should not be reached.")
        except UserWarning, uw:
            self.assertEqual(uw.args[0], "PokerDatabase: schema /this/is/not/a/file/and/should/not/be/there/not-my-schema-go-away.sql file not found")
    # ----------------------------------------------------------------------------
    def test04_rootBothUsers(self):
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_root_both_users_xml,
                                           len(settings_root_both_users_xml))
        settings.header = settings.doc.xpathNewContext()
        self.settings = settings
        self.db = pokerdatabase.PokerDatabase(self.settings)
        self.assertEquals(self.db.getVersion(), self.pokerdbVersion)
# --------------------------------------------------------------------------------
def GetTestSuite():
    suite = runner.TestSuite(PokerDatabaseTestCase)
    suite.addTest(unittest.makeSuite(PokerDatabaseTestCase))
    return suite
# --------------------------------------------------------------------------------
def GetTestedModule():
    return pokerdatabase
  
# --------------------------------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test04"
    os.environ['VERBOSE_T'] = '4'

    suite = loader.loadClass(PokerDatabaseTestCase)
    return runner.TrialRunner(reporter.TextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)
# --------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerdatabase.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokerdatabase.py' TESTS='coverage-reset test-pokerdatabase.py coverage-report' check )"
# End:
