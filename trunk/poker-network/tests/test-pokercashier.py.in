#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Bradley M. Kuhn <bkuhn@ebb.org> 
# Copyright (C) 2006, 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

import libxml2
from MySQLdb.cursors import DictCursor
from pprint import pprint

from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor, defer

twisted.internet.base.DelayedCall.debug = True

from tests.testmessages import silence_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokernetwork import pokercashier, pokernetworkconfig, user
from pokernetwork import currencyclient
currencyclient.CurrencyClient = currencyclient.FakeCurrencyClient
from pokernetwork.pokerpackets import *
from pokernetwork.pokerdatabase import PokerDatabase

settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3">
  <database name="pokernetworktest" host="@MYSQL_TEST_DBHOST@" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" user_create="yes" />
</server>
"""

class PokerCashierTestCase(unittest.TestCase):

    def destroyDb(self):
        if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@' -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        else:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        
    # --------------------------------------------------------
    def setUp(self):
        self.destroyDb()
        self.settings = pokernetworkconfig.Config([])
        self.settings.doc = libxml2.parseMemory(settings_xml, len(settings_xml))
        self.settings.header = self.settings.doc.xpathNewContext()
        self.db = PokerDatabase(self.settings)
        self.cashier = pokercashier.PokerCashier(self.settings)
        self.cashier.setDb(self.db)
        self.user_serial = 5050
        self.user1_serial = 6060
        self.user2_serial = 7070
        self.user3_serial = 8080
        self.users_serial = range(9000, 9010)

    # --------------------------------------------------------
    def tearDown(self):
        self.cashier.close()
#        self.destroyDb()

    # --------------------------------------------------------
    def test01_cashIn(self):
        #
        # Cash in <value> more from the fake currency
        #
        self.value = 100
        self.url = 'http://fake'
        packet = PacketPokerCashIn(serial = self.user_serial,
                                   url = self.url,
                                   bserial = 1,
                                   name = "%040d" % 1,
                                   value = self.value)
        d = self.cashier.cashIn(packet)
        d.addCallback(lambda result: self.check01_cashIn(packet))
        return d
    # --------------------------------------------------------
    def check01_cashIn(self, packet):
        cursor = self.db.cursor(DictCursor)

        #
        # A currency was created
        #
        cursor.execute("SELECT url, serial FROM currencies")
        self.assertEquals(1, cursor.rowcount)
        currency_row = cursor.fetchone()
        self.assertEquals(self.url, currency_row['url'])
        self.assertEquals(1, currency_row['serial'])
        #
        # With a single currency note
        #
        cursor.execute("SELECT currency_serial, serial, name, value FROM safe")
        self.assertEquals(1, cursor.rowcount)
        safe_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], safe_row['currency_serial'])
        self.assertEquals(2, safe_row['serial'])
        self.assertEquals(self.value, safe_row['value'])
        #
        # Credited to the user
        #
        cursor.execute("SELECT currency_serial, user_serial, amount FROM user2money")
        self.assertEquals(1, cursor.rowcount)
        self.user2money_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], self.user2money_row['currency_serial'])
        self.assertEquals(self.user_serial, self.user2money_row['user_serial'])
        self.assertEquals(self.value, self.user2money_row['amount'])

        cursor.close()

        return packet

    # --------------------------------------------------------
    def test02_cashIn(self):
        self.value = 100
        self.url = 'http://fake'

        note1 = self.cashier.currency_client._buildNote(self.url, self.value)
        packet1 = PacketPokerCashIn(serial = self.user1_serial,
                                    url = note1[0],
                                    bserial = note1[1],
                                    name = note1[2],
                                    value = note1[3])
        d1 = self.cashier.cashIn(packet1)

        note2 = self.cashier.currency_client._buildNote(self.url, self.value)
        packet2 = PacketPokerCashIn(serial = self.user2_serial,
                                    url = note2[0],
                                    bserial = note2[1],
                                    name = note2[2],
                                    value = note2[3])
        d2 = self.cashier.cashIn(packet2)

        note3 = self.cashier.currency_client._buildNote(self.url, self.value)
        packet3 = PacketPokerCashIn(serial = self.user3_serial,
                                    url = note3[0],
                                    bserial = note3[1],
                                    name = note3[2],
                                    value = note3[3])
        d3 = self.cashier.cashIn(packet3)

        d = defer.DeferredList((d1, d2, d3), fireOnOneErrback = True)
        d.addCallback(lambda result: self.check02_cashIn())
        return d
    # --------------------------------------------------------
    def check02_cashIn(self):
        cursor = self.db.cursor(DictCursor)

        #
        # Only one currency for all buyIn
        #
        cursor.execute("SELECT url, serial FROM currencies")
        self.assertEquals(1, cursor.rowcount)
        currency_row = cursor.fetchone()
        #
        # With a single currency note with an amount == <value> * 2
        #
        cursor.execute("SELECT currency_serial, name, serial, value FROM safe")
        self.assertEquals(1, cursor.rowcount)
        safe_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], safe_row['currency_serial'])
        self.assertEquals(7, safe_row['serial'])
        self.assertEquals(self.value * 3, safe_row['value'])
        #
        # Credited to the user1
        #
        cursor.execute("SELECT currency_serial, user_serial, amount FROM user2money WHERE user_serial = " + str(self.user1_serial))
        self.assertEquals(1, cursor.rowcount)
        user2money_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], user2money_row['currency_serial'])
        self.assertEquals(self.user1_serial, user2money_row['user_serial'])
        self.assertEquals(self.value, user2money_row['amount'])
        #
        # Credited to the user2
        #
        cursor.execute("SELECT currency_serial, user_serial, amount FROM user2money WHERE user_serial = " + str(self.user2_serial))
        self.assertEquals(1, cursor.rowcount)
        user2money_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], user2money_row['currency_serial'])
        self.assertEquals(self.user2_serial, user2money_row['user_serial'])
        self.assertEquals(self.value, user2money_row['amount'])
        #
        # Credited to the user3
        #
        cursor.execute("SELECT currency_serial, user_serial, amount FROM user2money WHERE user_serial = " + str(self.user3_serial))
        self.assertEquals(1, cursor.rowcount)
        user2money_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], user2money_row['currency_serial'])
        self.assertEquals(self.user3_serial, user2money_row['user_serial'])
        self.assertEquals(self.value, user2money_row['amount'])

        cursor.close()

    def cashOut(self, packet):
        cashOut_packet = PacketPokerCashOut(serial = packet.serial,
                                            url = packet.url,
                                            value = 15,
                                            application_data = 'appdata')
        return self.cashier.cashOut(cashOut_packet)
    # --------------------------------------------------------
    def check03_cashOut(self, packet):
        #print "check03_cashOut " + str(note)
        cursor = self.db.cursor(DictCursor)

        #
        # With two currency notes on the counter
        #
        cursor.execute("SELECT transaction_id, user_serial, currency_serial, name, serial, value, status, application_data FROM counter WHERE status = 'c'")
        self.assertEquals(1, cursor.rowcount)
        counter_row = cursor.fetchone()
        print "counter_row " + str(counter_row)
        self.assertEquals(15, counter_row['value'])
        self.assertEquals(packet.name, counter_row['name'])
        self.assertEquals(packet.application_data, counter_row['application_data'])

        cursor.close()

        return packet
    # --------------------------------------------------------
    def cashOutCommit(self, packet):
        return self.cashier.cashOutCommit(PacketPokerCashOutCommit(transaction_id = packet.name))
        
    def check03_cashOutCommit(self, count):
        print "check03_cashOutCommit " + str(count)
        cursor = self.db.cursor(DictCursor)

        cursor.execute("SELECT * FROM counter ORDER BY value")
        self.assertEquals(0, cursor.rowcount)

        cursor.close()

        return count
    # --------------------------------------------------------
    def test03_cashOut(self):
        d = self.test01_cashIn()

        d.addCallback(self.cashOut)
        d.addCallback(self.check03_cashOut)
        d.addCallback(self.cashOutCommit)
        d.addCallback(self.check03_cashOutCommit)
        return d
    # --------------------------------------------------------
    def test03_cashOut_failure(self):
        d = self.test01_cashIn()

        def cashOutFailure(packet):
            currencyclient.FakeCurrencyFailure = True
            return packet
        d.addCallback(cashOutFailure)
        d.addCallback(self.cashOut)

        self.failed = False

        def check_cashOutFailure(reason):
            currencyclient.FakeCurrencyFailure = False
            from twisted.python import failure
            from twisted.web import error
            self.failUnless(isinstance(reason, failure.Failure))
            self.failUnless(isinstance(reason.value, error.Error))
            self.assertEqual("(page content)", reason.value.response)
            self.failed = True
            return True
        d.addErrback(check_cashOutFailure)

        def check_failed(*args):
            currencyclient.FakeCurrencyFailure = False
            self.failUnless(self.failed, "cash out did not fail but was expected to fail")
            del self.failed

        d.addCallback(check_failed)

        return d
    # --------------------------------------------------------
    def cashQuery(self, packet):
        result = self.cashier.cashQuery(PacketPokerCashQuery(application_data = 'appdata'))
        self.assertEqual(PacketAck(), result)
        result = self.cashier.cashQuery(PacketPokerCashQuery(application_data = 'fakeinvalid'))
        self.assertEqual(PACKET_ERROR, result.type)
        self.assertEqual(PacketPokerCashQuery.DOES_NOT_EXIST, result.code)
        return packet
    # --------------------------------------------------------
    def test04_cashQuery(self):
        d = self.test01_cashIn()

        d.addCallback(self.cashOut)
        d.addCallback(self.cashQuery)
        return d
    # --------------------------------------------------------
    def test06_cashInMany(self):
        self.value = 100
        self.url = 'http://fake'

        dlist = []
        for serial in self.users_serial:
            note = self.cashier.currency_client._buildNote(self.url, self.value)
            packet = PacketPokerCashIn(serial = serial,
                                       url = note[0],
                                       bserial = note[1],
                                       name = note[2],
                                       value = note[3])
            dlist.append(self.cashier.cashIn(packet))

        d = defer.DeferredList(dlist, fireOnOneErrback = True)
        d.addCallback(lambda result: self.check04_cashInMany())
        return d

    def check04_cashInMany(self):
        cursor = self.db.cursor(DictCursor)

        #
        # Only one currency for all buyIn
        #
        cursor.execute("SELECT url, serial FROM currencies")
        self.assertEquals(1, cursor.rowcount)
        currency_row = cursor.fetchone()
        #
        # With a single currency note with an amount == <value> * 2
        #
        cursor.execute("SELECT currency_serial, name, serial, value FROM safe")
        self.assertEquals(1, cursor.rowcount)
        safe_row = cursor.fetchone()
        self.assertEquals(currency_row['serial'], safe_row['currency_serial'])
        count = len(self.users_serial)
        self.assertEquals(count * 2 + 1, safe_row['serial'])
        self.assertEquals(self.value * count, safe_row['value'])
        #
        # Credited to the user N
        #
        for serial in self.users_serial:
            cursor.execute("SELECT currency_serial, user_serial, amount FROM user2money WHERE user_serial = " + str(serial))
            self.assertEquals(1, cursor.rowcount)
            user2money_row = cursor.fetchone()
            self.assertEquals(currency_row['serial'], user2money_row['currency_serial'])
            self.assertEquals(serial, user2money_row['user_serial'])
            self.assertEquals(self.value, user2money_row['amount'])

        cursor.close()

    # --------------------------------------------------------
    def test07_getCurrencySerial(self):
        self.cashier.parameters['user_create'] = 'no';

        self.failUnlessRaises(PacketError, self.cashier.getCurrencySerial, 'http://fake')
    # --------------------------------------------------------
    def test08_forcecashInUpdateSafeFail(self):
        self.value = 100
        self.url = 'http://fake'
        p = PacketPokerCashIn(serial = self.user_serial,
                              url = self.url, currency_serial = 1L,
                              bserial = 1, name = "%040d" % 1,
                              value = self.value)
        p.currency_serial = 1L

        gotError = False
        try:
            self.cashier.cashInUpdateSafe("OK",
                                      "0000000000000000000000000000000000000002",
                                      p)
        except PacketError, pe:
            gotError = True
            self.assertEquals(pe.code, PacketPokerCashIn.SAFE)
            self.assertEquals(pe.other_type, PACKET_POKER_CASH_IN)
            self.assertEqual(pe.message.find("INSERT INTO safe SELECT currency_serial, serial, name, value FROM counter") >= 0, True)
        self.assertEquals(gotError, True)

    # --------------------------------------------------------
    def test09_forceCashInUpdateCounter(self):
        self.value = 100
        self.url = 'http://fake'
        p = PacketPokerCashIn(serial = self.user_serial,
                              url = self.url, currency_serial = 1L,
                              bserial = 1, name = "%040d" % 1,
                              value = self.value)
        p.currency_serial = 1L

        cursor = self.db.cursor()
        cursor.execute("DROP table counter")
        cursor.close()

        gotError = False
        try:
            self.cashier.cashInUpdateCounter(
                [['http://fake', 2, '0000000000000000000000000000000000000002', 100]],
                p,
                [('http://fake', 1, '0000000000000000000000000000000000000001', 100)])

        except Exception, e:
            self.assertEquals(e[0], 1146)
            self.assertEquals(e[1], "Table 'pokernetworktest.counter' doesn't exist")
            gotError = True
        self.assertEquals(gotError, True)
    # --------------------------------------------------------
    def test10_foundCounterRowBreakingNote(self):
        self.value = 100
        self.url = 'http://fake'
        p = PacketPokerCashIn(serial = self.user_serial,
                              url = self.url, currency_serial = 1L,
                              bserial = 1, name = "%040d" % 1,
                              value = self.value)
        p.currency_serial = 1L
        cursor = self.db.cursor()
        cursor.execute("insert into counter(transaction_id, user_serial, currency_serial, serial, name, value) values('foo', %d, %d, %d, '%040d', %d)" % (self.user_serial, 1L, 1, 1, self.value))
        cursor.close()
        d = self.cashier.cashInValidateNote(1L, p)
        def check_validateNoteFailure(reason):
            from twisted.python import failure
            from twisted.web import error
            self.failUnless(isinstance(reason, failure.Failure))
            self.failUnless(isinstance(reason.value, PacketError))
            self.assertEqual(reason.value.type, PACKET_ERROR)
            self.assertEqual(reason.value.other_type, PACKET_POKER_CASH_IN)
            self.assertEqual(reason.value.message.find("INSERT INTO safe SELECT currency_serial, serial, name, value FROM counter") >= 0, True)
            return True
        d.addErrback(check_validateNoteFailure)
        return d
    # --------------------------------------------------------
    def test11_duplicateSafeEntriesForCashInValidateNote(self):
        self.value = 100
        self.url = 'http://fake'
        p = PacketPokerCashIn(serial = self.user_serial,
                              url = self.url, currency_serial = 1L,
                              bserial = 1, name = "%040d" % 1,
                              value = self.value)
        p.currency_serial = 1L
        cursor = self.db.cursor()
        cursor.execute("insert into safe(currency_serial, serial, name, value) values(%d, %d, '%040d', %d)" % (1L, 1, 1, self.value))
        cursor.execute("insert into safe(currency_serial, serial, name, value) values(%d, %d, '%040d', %d)" % (1L, 2, 1, self.value))
        cursor.close()
        gotError = False
        try:
            self.cashier.cashInValidateNote(1L, p)
            self.assertEquals("This line should not be reached", False)
        except PacketError, pe:
            gotError = True
            self.assertEquals(pe.other_type, PACKET_POKER_CASH_IN)
            self.assertEquals(pe.code, PacketPokerCashIn.SAFE)
            self.assertEqual(pe.message.find("found 2 records instead of 0 or 1") >= 0, True)
        self.assertEquals(gotError, True)
        return True
# --------------------------------------------------------
def GetTestSuite():
    suite = runner.TestSuite(PokerCashierTestCase)
    suite.addTest(unittest.makeSuite(PokerCashierTestCase))
    return suite

# --------------------------------------------------------
def GetTestedModule():
    return pokerengineconfig

# --------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test11"
    suite = loader.loadClass(PokerCashierTestCase)
    return runner.TrialRunner(reporter.VerboseTextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)

# --------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokercashier.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokercashier.py' TESTS='coverage-reset test-pokercashier.py coverage-report' check )"
# End:
