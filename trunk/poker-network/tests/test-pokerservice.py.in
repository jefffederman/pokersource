#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#

import sys, os
sys.path.insert(0, "@srcdir@")
sys.path.insert(0, "..")

import libxml2
from MySQLdb.cursors import DictCursor
from pprint import pprint

from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor, defer

twisted.internet.base.DelayedCall.debug = True

from pokernetwork import pokerservice, pokernetworkconfig, user
from pokernetwork import currencyclient
currencyclient.CurrencyClient = currencyclient.FakeCurrencyClient
from pokernetwork.pokerpackets import *

settings_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="18" round="12" position="60" showdown="30" finish="18" />

  <table name="Table1" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="60" currency_serial="1" />
  <table name="Table2" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="60" currency_serial="1" />

  <listen tcp="19480" />

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" />
  <database name="pokernetworktest" host="@POKER_DBHOST@" user="@POKER_DBUSER@" password="@POKER_DBUSER_PASSWORD@"
            root_user="root" root_password="" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>@POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""

def fun_name():
    try:
        raise ZeroDivisionError
    except ZeroDivisionError:
        return sys.exc_info()[2].tb_frame.f_back.f_code.co_name
        
class PokerServiceTestCase(unittest.TestCase):

    def destroyDb(self):
        os.system("@MYSQL@ -u root -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
        self.destroyDb()
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml, len(settings_xml))
        settings.header = settings.doc.xpathNewContext()
        self.service = pokerservice.PokerService(settings)
#        self.service.verbose = 0
        self.service.verbose = 3

    # -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        d = self.service.stopService()
        d.addCallback(lambda x: self.destroyDb())
        return d

    # -----------------------------------------------------------------------------------------------------
    def test01_auth(self):
        self.service.startService()
        ( (serial, name, privilege), message ) = self.service.auth("user1", "password1", "role1")
        self.assertEquals(None, message)
        self.assertEquals(4, serial)
        self.assertEquals("user1", name)
        self.assertEquals(user.User.REGULAR, privilege)

    # -----------------------------------------------------------------------------------------------------
    def createUsers(self):
        ( (self.user1_serial, name, privilege), message ) = self.service.auth("user1", "password1", "role1")
        ( (self.user2_serial, name, privilege), message ) = self.service.auth("user2", "password1", "role1")

    # -----------------------------------------------------------------------------------------------------
    def cashIn(self):

        note1 = self.service.cashier.currency_client._buildNote("ONE", 100)
        packet1 = PacketPokerCashIn(serial = self.user1_serial,
                                    url = note1[0],
                                    bserial = note1[1],
                                    name = note1[2],
                                    value = note1[3])
        d1 = self.service.cashIn(packet1)

        note2 = self.service.cashier.currency_client._buildNote("ONE", 100)
        packet2 = PacketPokerCashIn(serial = self.user2_serial,
                                    url = note2[0],
                                    bserial = note2[1],
                                    name = note2[2],
                                    value = note2[3])
        d2 = self.service.cashIn(packet2)

        note3 = self.service.cashier.currency_client._buildNote("TWO", 200)
        packet3 = PacketPokerCashIn(serial = self.user2_serial,
                                    url = note3[0],
                                    bserial = note3[1],
                                    name = note3[2],
                                    value = note3[3])
        d3 = self.service.cashIn(packet3)

        return defer.DeferredList((d1, d2, d3), fireOnOneErrback = True)

    # -----------------------------------------------------------------------------------------------------
    def test04_getUserInfo(self):
        self.service.startService()

        self.createUsers()
        #
        # No cash in means no money
        #
        info = self.service.getUserInfo(self.user1_serial)
        self.assertEqual(0, len(info.money))

        def step2(result):
            self.assertEquals([ (True, PacketAck()), (True, PacketAck()), (True, PacketAck()) ], result)
            info = self.service.getUserInfo(self.user2_serial)
            self.assertEquals({1: (100, 0), 2: (200, 0)}, info.money)

            #
            # Some money is on a table
            #
            table_serial = self.service.tables[0].game.id
            buy_in = 50
            currency_serial = 1
            self.assertEquals(currency_serial, self.service.tables[0].currency_serial)
            self.service.seatPlayer(self.user2_serial, table_serial, 0)
            self.service.buyInPlayer(self.user2_serial, table_serial, currency_serial, buy_in)
            info = self.service.getUserInfo(self.user2_serial)
            self.assertEquals({1: (50, 50), 2: (200, 0)}, info.money)
            #
            # The other player only has one currency
            #
            self.service.seatPlayer(self.user1_serial, table_serial, 0)
            self.service.buyInPlayer(self.user1_serial, table_serial, currency_serial, buy_in)
            info = self.service.getUserInfo(self.user1_serial)
            self.assertEquals({1: (50, 50)}, info.money)

            return result
            
        d = self.cashIn()
        d.addCallback(step2)
        return d

from twisted.web import xmlrpc, server, http, resource

#
# Override QueryProtocol from xmlrpc because it lacks
# the Cookie header.
#
class QueryProtocol(http.HTTPClient):

    def connectionMade(self):
        self.sendCommand('POST', self.factory.path)
        self.sendHeader('User-Agent', 'Twisted/XMLRPClib')
        self.sendHeader('Host', self.factory.host)
        if self.factory.cookie:
            self.sendHeader('Cookie', self.factory.cookie)
        self.sendHeader('Content-type', 'text/xml')
        self.sendHeader('Content-length', str(len(self.factory.payload)))
        if self.factory.user:
            auth = '%s:%s' % (self.factory.user, self.factory.password)
            auth = auth.encode('base64').strip()
            self.sendHeader('Authorization', 'Basic %s' % (auth,))
        self.endHeaders()
        self.transport.write(self.factory.payload)

    def handleStatus(self, version, status, message):
        if status != '200':
            self.factory.badStatus(status, message)

    def handleResponse(self, contents):
        self.factory.parseResponse(contents)


class XMLRPCPokerServiceTestCase(unittest.TestCase):

    def destroyDb(self, arg = None):
        os.system("@MYSQL@ -u root -e 'DROP DATABASE IF EXISTS pokernetworktest'")
         
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
        self.destroyDb()
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml, len(settings_xml))
        settings.header = settings.doc.xpathNewContext()
        self.service = pokerservice.PokerService(settings)
        self.service.verbose = 3
        site = server.Site(resource.IResource(self.service))
        self.p = reactor.listenTCP(0, site,
                                   interface="127.0.0.1")
        self.port = self.p.getHost().port
        self.cookie = None

    def cleanSessions(self, arg):
        pending = reactor.getDelayedCalls()
        if pending:
            for p in pending:
                if p.active():
#                    print "still pending:" + str(p)
                    p.cancel()
        return arg
        
    def tearDown(self):
        self.cookie = None
        d = self.service.stopService()
        d.addCallback(self.destroyDb)
        d.addCallback(lambda x: self.p.stopListening())
        d.addCallback(self.cleanSessions)
        return d

    def query(self, *args):
        factory = xmlrpc.QueryFactory('/RPC2', '127.0.0.1:' + str(self.port), 'handlePacket', None, None, *args)
        factory.protocol = QueryProtocol
        factory.cookie = self.cookie
        reactor.connectTCP('127.0.0.1', self.port, factory)
        return factory.deferred

    def login(self):
        def validate(result):
            self.assertEquals(2, len(result))
            self.assertEquals({'type': 'PacketAuthOk'}, result[0])
            serial_packet = result[1]
            print "serial_packet " + str(serial_packet)
            self.assertEquals(serial_packet['type'], 'PacketSerial')
            self.failUnless(serial_packet.has_key('cookie'))
            self.cookie = serial_packet['cookie']
            self.failUnless(serial_packet.has_key('serial'))
            self.user_serial = serial_packet['serial']
            return serial_packet['cookie']
            
        d = self.query('use sessions', { 'type': 'PacketLogin',
                                         'name': 'user1',
                                         'password': 'password' })
        d.addCallback(validate)
        return d

    def logout(self, *args):
        def validate(result):
            self.assertEquals([], result)
            return result
            
        d = self.query('use sessions', { 'type': 'PacketLogout' })
        d.addCallback(validate)
        return d

    def test01_ping(self):
        self.service.startService()
        d = self.query('no session', { 'type': 'PacketPing' })
        d.addCallback(self.assertEquals, [])
        return d

    def test02_login(self):
        self.service.startService()
        d = self.login()
        d.addCallback(self.logout)
        return d

    def cashIn(self, arg):
        d = self.query('use sessions', { 'type': 'PacketPokerCashIn',
                                         'serial': self.user_serial,
                                         'url': 'ONE',
                                         'name': "%040d" % 1,
                                         'bserial': 1,
                                         'value': 100 })
        d.addCallback(self.assertEquals, [{'type': 'PacketAck'}])
        return d
    
    def test03_cashIn(self):
        self.service.startService()
        d = self.login()
        d.addCallback(self.cashIn)
        d.addCallback(self.logout)
        return d

# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerengineconfig

# -----------------------------------------------------------------------------------------------------
def Run():
    loader = runner.TestLoader()
    loader.methodPrefix = "test03"
    suite = loader.suiteFactory()
#    suite.addTest(loader.loadClass(PokerServiceTestCase))
    suite.addTest(loader.loadClass(XMLRPCPokerServiceTestCase))
    return runner.TrialRunner(reporter.TextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)

# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerservice.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokerservice.py' TESTS='coverage-reset test-pokerservice.py coverage-report' check )"
# End:

