#!@PYTHON@
# -*- py-indent-offset: 4; coding: iso-8859-1; mode: python -*-
#
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

import libxml2

from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor, defer, error
from twisted.python import failure

twisted.internet.base.DelayedCall.debug = True

from pokernetwork import pokerservice
from pokernetwork import pokernetworkconfig
from pokernetwork import pokerclient
from pokernetwork import currencyclient
currencyclient.CurrencyClient = currencyclient.FakeCurrencyClient
from pokernetwork.pokerpackets import *

settings_xml_server = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="20" round="0" position="0" showdown="0" autodeal_max="1" finish="0" />

  <table name="Table1" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="4" currency_serial="1" />
  <table name="Table2" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="4" currency_serial="1" />

  <listen tcp="19480" />

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" />
  <database name="pokernetworktest" host="localhost" user="pokernetworktest" password="pokernetwork"
            root_user="root" root_password="" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>@POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""

settings_xml_client = """<?xml version="1.0" encoding="ISO-8859-1"?>
<settings display2d="yes" display3d="no" ping="15000" verbose="3" delays="true" tcptimeout="2000" upgrades="no">
   <delays blind_ante_position="0" position="0" begin_round="0" end_round="0" end_round_last="0" showdown="0" lag="60"/> 
  <screen fullscreen="no" width="1024" height="768"/>
  <name>user1</name>
  <passwd>password1</passwd>
  <remember>yes</remember>
  <muck>yes</muck>
  <auto_post>no</auto_post>
  <chat max_chars="40" line_length="20"/>
  <web browser="/usr/bin/firefox">http://localhost/poker-web/</web>
  <sound>yes</sound>
  <tournaments currency_serial="1" type="sit_n_go" sort="name"/>
  <lobby currency_serial="1" type="holdem" sort="name"/>
  <shadow>yes</shadow>
  <vprogram>yes</vprogram>
  
  <user path="~/.poker2d"/>
  <path>/etc/poker-engine2.3 /etc/poker-engine2.4 /etc/poker-engine /etc/poker-network2.3 /etc/poker2-network2.4 /etc/poker-network .</path> 
  <rsync path="/usr/bin/rsync" dir="." source="rsync.pok3d.com::pok3d/linux-gnu" target="/tmp/installed" upgrades="share/poker-network/upgrades"/>
  <data path="data" sounds="data/sounds"/>
  <handlist start="0" count="10"/>
</settings>
"""

class PokerClientTestCase(unittest.TestCase):

    def destroyDb(self, arg = None):
        os.system("@MYSQL@ -u root -e 'DROP DATABASE IF EXISTS pokernetworktest'")

    def setUpServer(self):
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml_server, len(settings_xml_server))
        settings.header = settings.doc.xpathNewContext()
        #
        # Setup server
        #
        self.service = pokerservice.PokerService(settings)
        self.service.verbose = 3
        self.service.startService()
        factory = pokerservice.IPokerFactory(self.service)
        self.p = reactor.listenTCP(0, factory,
                                   interface="127.0.0.1")
        self.port = self.p.getHost().port

    def setUpClient(self, index):
        settings = pokernetworkconfig.Config([])
        settings.doc = libxml2.parseMemory(settings_xml_client, len(settings_xml_client))
        settings.header = settings.doc.xpathNewContext()
        self.client_factory[index] = pokerclient.PokerClientFactory(settings = settings)
        def setUpProtocol(client):
            client._poll_frequency = 0.1
            return client
        d = self.client_factory[index].established_deferred
        d.addCallback(setUpProtocol)
        reactor.connectTCP('127.0.0.1', self.port, self.client_factory[index])
                      
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
        self.destroyDb()
        self.setUpServer()
        self.client_factory = [None, None]
        self.setUpClient(1)
        return self.setUpClient(0)

    def cleanSessions(self, arg):
        #
        # twisted Session code has leftovers : disable the hanging delayed call warnings
        # of trial by nuking all what's left.
        #
        pending = reactor.getDelayedCalls()
        if pending:
            for p in pending:
                if p.active():
#                    print "still pending:" + str(p)
                    p.cancel()
        return arg
        
    def tearDown(self):
        d = self.service.stopService()
        d.addCallback(lambda x: self.p.stopListening())
#        d.addCallback(self.destroyDb)
        d.addCallback(self.cleanSessions)
        return d

    def quit(self, args):
        client = args[0]
        print "quit " + str(client.getSerial())
        client.sendPacket(PacketQuit())
        if hasattr(client, "transport"):
            client.transport.loseConnection()
            return client.connection_lost_deferred
        else:
            raise UserWarning, "quit does not have transport %d" % client.getSerial()
        
    def ping(self, client):
        client.sendPacket(PacketPing())
        return (client,)

    def test01_ping(self):
        """ test01_ping """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.ping)
        d.addCallback(self.quit)
        return d

    def login(self, client, index):
        client.sendPacket(PacketLogin(name = 'user%d' % index, password = 'password1'))
        return client.packetDeferred(True, PACKET_POKER_PLAYER_INFO)

    def test02_login(self):
        """ test02_login """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(self.quit)
        return d

    def cashIn(self, client, url, value):
        note = self.service.cashier.currency_client._buildNote(url, value)
        client.sendPacket(PacketPokerCashIn(serial = client.getSerial(), note = note))
        return client.packetDeferred(True, PACKET_ACK)

    def check_cashIn(self, (client, packet)):
        client.sendPacket(PacketPokerGetUserInfo(serial = client.getSerial()))
        d = client.packetDeferred(True, PACKET_POKER_USER_INFO)
        def validate((client, packet),):
            print "check_cashIn " + str(packet)
            self.assertEquals(PACKET_POKER_USER_INFO, packet.type)
            self.assertEquals(2, len(packet.money))
            self.assertEquals([1, 2], packet.money.keys())
            self.assertEquals(100, packet.money[1][0])
            self.assertEquals(200, packet.money[2][0])
            return (client, packet)
        d.addCallback(validate)
        return d
                                   
    def test03_cashIn(self):
        """ test03_cashIn """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(lambda (client, packet): self.cashIn(client, "ONE", 100))
        d.addCallback(lambda (client, packet): self.cashIn(client, "TWO", 200))
        d.addCallback(self.check_cashIn)
        d.addCallback(self.quit)
        return d

    def sit(self, (client, packet)):
        client.sendPacket(PacketPokerTableJoin(serial = client.getSerial(),
                                               game_id = 100))
        client.sendPacket(PacketPokerSeat(serial = client.getSerial(),
                                          game_id = 100))
        client.sendPacket(PacketPokerAutoBlindAnte(serial = client.getSerial(),
                                                   game_id = 100))
        client.sendPacket(PacketPokerBuyIn(serial = client.getSerial(),
                                           game_id = 100,
                                           amount = 200000))
        client.sendPacket(PacketPokerSit(serial = client.getSerial(),
                                         game_id = 100))
        return client.packetDeferred(True, PACKET_POKER_SELF_IN_POSITION)
        
    def allIn(self, (client, packet)):
        print "allIn"
        self.assertEqual(PACKET_POKER_SELF_IN_POSITION, packet.type)
        self.assertEqual(client.getSerial(), packet.serial)
        client.sendPacket(PacketPokerSitOut(serial = packet.serial,
                                            game_id = packet.game_id))
        game = client.getGame(packet.game_id)
        player = game.getPlayer(packet.serial)
        if game.canRaise(player.serial):
            client.sendPacket(PacketPokerRaise(serial = packet.serial,
                                               game_id = packet.game_id,
                                               amount = player.money))
        else:
            client.sendPacket(PacketPokerCall(serial = packet.serial,
                                              game_id = packet.game_id))

        return client.packetDeferred(True, PACKET_POKER_WIN)
        
    def win(self, (client, packet)):
        print "win " + str(packet)
        return (client, packet)
        
    def test04_playHand(self):
        """ test04_playHand """
        d = [None, None]
        for index in (0,1):
            d[index] = self.client_factory[index].established_deferred
            d[index].addCallback(self.login, index)
            d[index].addCallback(lambda (client, packet): self.cashIn(client, "ONE", 200000))
            d[index].addCallback(self.sit)
            d[index].addCallback(self.allIn)
            d[index].addCallback(self.win)
            d[index].addCallback(self.quit)
        return defer.DeferredList(d)

    def getUserInfo(self, (client, packet)):
        print "getUserInfo " + str(packet)
        game = client.getGame(packet.game_id)
        self.assertEqual(False, game.isRunning())
        client.sendPacket(PacketPokerGetUserInfo(serial = client.getSerial()))
        return client.packetDeferred(True, PACKET_POKER_USER_INFO)

    def printUserInfo(self, (client, packet)):
        print "printUserInfo " + str(packet)
        self.assertEqual(PACKET_POKER_USER_INFO, packet.type)
        return (client, packet)
        
    def test05_playHand(self):
        """ test05_playHand """
        d = [None, None]
        for index in (0,1):
            d[index] = self.client_factory[index].established_deferred
            d[index].addCallback(self.login, index)
            d[index].addCallback(lambda (client, packet): self.cashIn(client, "ONE", 200000))
            d[index].addCallback(self.sit)
            d[index].addCallback(self.allIn)
            d[index].addCallback(self.getUserInfo)
            d[index].addCallback(self.printUserInfo)
            d[index].addCallback(self.quit)
        return defer.DeferredList(d)

    def test06_cannotGetSeat(self):
        """ test06_cannotGetSeat """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(lambda (client, packet): self.cashIn(client, "ONE", 200000))
        def wrongSeat((client, packet),):
            client.sendPacket(PacketPokerTableJoin(serial = client.getSerial(),
                                                   game_id = 100))
            client.sendPacket(PacketPokerSeat(serial = client.getSerial(),
                                              game_id = 100,
                                              seat = 42))
            return client.packetDeferred(True, PACKET_POKER_SEAT)
        d.addCallback(wrongSeat)
        def checkWrongSeat((client, packet),):
            self.assertEqual(PACKET_POKER_SEAT, packet.type)
            self.assertEqual(-1, packet.seat)
            return (client, packet)
        d.addCallback(checkWrongSeat)
        d.addCallback(self.quit)
        return d

    def test07_rebuy(self):
        """ test07_rebuy """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(lambda (client, packet): self.cashIn(client, "ONE", 400000))
        def rebuy((client, packet),):
            client.sendPacket(PacketPokerTableJoin(serial = client.getSerial(),
                                                   game_id = 100))
            client.sendPacket(PacketPokerSeat(serial = client.getSerial(),
                                              game_id = 100))
            client.sendPacket(PacketPokerBuyIn(serial = client.getSerial(),
                                               game_id = 100,
                                               amount = 200000))
            client.sendPacket(PacketPokerRebuy(serial = client.getSerial(),
                                               game_id = 100,
                                               amount = 200000))
            return client.packetDeferred(True, PACKET_POKER_PLAYER_CHIPS)
        d.addCallback(rebuy)
        def checkSit((client, packet),):
            self.assertEqual(PACKET_POKER_PLAYER_CHIPS, packet.type)
            self.assertEqual(0, packet.money)
            return client.packetDeferred(True, PACKET_POKER_PLAYER_CHIPS)
        d.addCallback(checkSit)
        def checkBuyIn((client, packet),):
            self.assertEqual(PACKET_POKER_PLAYER_CHIPS, packet.type)
            self.assertEqual(200000, packet.money)
            return client.packetDeferred(True, PACKET_POKER_PLAYER_CHIPS)
        d.addCallback(checkBuyIn)
        def checkRebuy((client, packet),):
            self.assertEqual(PACKET_POKER_PLAYER_CHIPS, packet.type)
            self.assertEqual(400000, packet.money)
            return (client, packet)
        d.addCallback(checkRebuy)
        d.addCallback(self.quit)
        return d

    def test08_processing_readytoplay(self):
        """ test08_processing_readytoplay """
        d = [None, None]
        for index in (0,1):
            d[index] = self.client_factory[index].established_deferred
            d[index].addCallback(self.login, index)
            d[index].addCallback(lambda (client, packet): self.cashIn(client, "ONE", 600000))
            d[index].addCallback(self.sit)
            def processingHand((client, packet),):
                print "processingHand"
                self.assertEqual(PACKET_POKER_SELF_IN_POSITION, packet.type)
                client.sendPacket(PacketPokerProcessingHand(serial = client.getSerial(),
                                                            game_id = 100))
                return (client, packet)
            d[index].addCallback(processingHand)
            d[index].addCallback(self.allIn)
            def atShowdown((client, packet),):
                print "atShowdown"
                client.sendPacket(PacketPokerRebuy(serial = client.getSerial(),
                                                   game_id = 100,
                                                   amount = 200000))
                client.sendPacket(PacketPokerSit(serial = client.getSerial(),
                                                 game_id = 100))
                return (client, packet)
            d[index].addCallback(atShowdown)
            if index == 0:
                def readyToPlay((client, packet),):
                    client.sendPacket(PacketPokerReadyToPlay(serial = client.getSerial(),
                                                             game_id = 100))
                    return (client, packet)
                d[index].addCallback(readyToPlay)
            def nextTurn((client, packet),):
                print "nextTurn"
                return client.packetDeferred(True, PACKET_POKER_START)
            d[index].addCallback(nextTurn)
            #
            # Game will start after the client index=0 times out 
            # and is marked as bugous because it failed to send
            # the READY_TO_PLAY packet
            #
            if index == 0:
                def checkBugousClient((client, packet),):
                    print "checkBugousClient for %d" % client.getSerial()
                    table = self.service.tables[0]
                    has_bugous = False
                    for (serial, server_client) in table.serial2client.iteritems():
                        if server_client.bugous_processing_hand == True:
                            has_bugous = True
                    self.assertEqual(True, has_bugous, "has bugous")
                    return (client, packet)
                d[index].addCallback(checkBugousClient)
            d[index].addCallback(self.quit)
        return defer.DeferredList(d)

    def test09_serverShutdown(self):
        """ test04_serverShutdown : the clients are still seated """
        d = [None, None]
        for index in (0,1):
            d[index] = self.client_factory[index].established_deferred
            d[index].addCallback(self.login, index)
            d[index].addCallback(lambda (client, packet): self.cashIn(client, "ONE", 200000))
            d[index].addCallback(self.sit)
            d[index].addCallback(self.allIn)
        return defer.DeferredList(d)

    def test10_playerImage(self):
        """ test10_login """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        def setPlayerImage((client, packet),):
            client.sendPacket(PacketPokerPlayerImage(serial = client.getSerial(),
                                                     image = "2345"))
            return client.packetDeferred(True, PACKET_ACK)
        d.addCallback(setPlayerImage)
        def getPlayerImage((client, packet),):
            self.assertEqual(PACKET_ACK, packet.type)
            client.sendPacket(PacketPokerGetPlayerImage(serial = client.getSerial()))
            return client.packetDeferred(True, PACKET_POKER_PLAYER_IMAGE)
        d.addCallback(getPlayerImage)
        def checkPlayerImage((client, packet),):
            self.assertEqual(PACKET_POKER_PLAYER_IMAGE, packet.type)
            self.assertEqual("2345", packet.image)
            return (client, packet)
        d.addCallback(checkPlayerImage)
        d.addCallback(self.quit)
        return d

    def cashOut(self, client, url, value):
        client.sendPacket(PacketPokerCashOut(serial = client.getSerial(), url = url, value = value))
        return client.packetDeferred(True, PACKET_POKER_CASH_OUT)

    def cashOutCommit(self, (client, packet)):
        self.assertEquals(PACKET_POKER_CASH_OUT, packet.type)
        client.sendPacket(PacketPokerCashOutCommit(serial = client.getSerial(), transaction_id = packet.name))
        return client.packetDeferred(True, PACKET_ACK)

    def test11_cashOut_zero(self):
        """ test11_cashOut_zero """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(lambda (client, packet): self.cashIn(client, "ONE", 100))
        d.addCallback(lambda (client, packet): self.cashIn(client, "TWO", 200))
        d.addCallback(self.check_cashIn)
        d.addCallback(lambda (client, packet): self.cashOut(client, "ONE", 100))
        d.addCallback(self.cashOutCommit)
        def check_cashOut((client, packet),):
            print "check_cashOut_zero"
            client.sendPacket(PacketPokerGetUserInfo(serial = client.getSerial()))
            d = client.packetDeferred(True, PACKET_POKER_USER_INFO)
            def validate((client, packet),):
                print "check_cashOut " + str(packet)
                self.assertEquals(PACKET_POKER_USER_INFO, packet.type)
                self.assertEquals(2, len(packet.money))
                self.assertEquals([1, 2], packet.money.keys())
                self.assertEquals(0, packet.money[1][0])
                self.assertEquals(200, packet.money[2][0])
                return (client, packet)
            d.addCallback(validate)
            return d
        d.addCallback(check_cashOut)
        d.addCallback(self.quit)
        return d

    def test12_cashOut(self):
        """ test12_cashOut """
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(lambda (client, packet): self.cashIn(client, "ONE", 100))
        d.addCallback(lambda (client, packet): self.cashIn(client, "TWO", 200))
        d.addCallback(self.check_cashIn)
        d.addCallback(lambda (client, packet): self.cashOut(client, "ONE", 50))
        d.addCallback(self.cashOutCommit)
        def check_cashOut((client, packet),):
            print "check_cashOut"
            client.sendPacket(PacketPokerGetUserInfo(serial = client.getSerial()))
            d = client.packetDeferred(True, PACKET_POKER_USER_INFO)
            def validate((client, packet),):
                print "check_cashOut " + str(packet)
                self.assertEquals(PACKET_POKER_USER_INFO, packet.type)
                self.assertEquals(2, len(packet.money))
                self.assertEquals([1, 2], packet.money.keys())
                self.assertEquals(50, packet.money[1][0])
                self.assertEquals(200, packet.money[2][0])
                return (client, packet)
            d.addCallback(validate)
            return d
        d.addCallback(check_cashOut)
        d.addCallback(self.quit)
        return d

    def test13_cashOut_failure(self):
        """ test12_cashOut """
        currencyclient.Verbose = True
        d = self.client_factory[0].established_deferred
        d.addCallback(self.login, 0)
        d.addCallback(lambda (client, packet): self.cashIn(client, "ONE", 100))
        d.addCallback(lambda (client, packet): self.cashIn(client, "TWO", 200))
        d.addCallback(self.check_cashIn)
        def cashOutFail((client, packet),):
            currencyclient.FakeCurrencyFailure = True
            client.sendPacket(PacketPokerCashOut(serial = client.getSerial(), url = "ONE", value = 50))
            client.sendPacket(PacketPokerGetUserInfo(serial = client.getSerial()))
            return client.packetDeferred(True, PACKET_POKER_USER_INFO)

        d.addCallback(cashOutFail)
        def check_cashOutFail((client, packet),):
            print "check_cashOutFail " + str(packet)
            self.assertEquals(PACKET_POKER_USER_INFO, packet.type)
            self.assertEquals(2, len(packet.money))
            self.assertEquals([1, 2], packet.money.keys())
            self.assertEquals(100, packet.money[1][0])
            self.assertEquals(200, packet.money[2][0])
            return (client, packet)
        d.addCallback(check_cashOutFail)
        d.addCallback(self.quit)
        return d

# -----------------------------------------------------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test08"
    suite = loader.suiteFactory()
    suite.addTest(loader.loadClass(PokerClientTestCase))
    return runner.TrialRunner(reporter.TextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)

# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerclient.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokeravatar.py ../pokernetwork/pokertable.py ../pokernetwork/pokerservice.py ../pokernetwork/pokerclient.py  ../pokernetwork/pokerserver.py' TESTS='coverage-reset test-pokerclient.py coverage-report' check )"
# End:
