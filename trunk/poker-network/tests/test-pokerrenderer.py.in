#!/usr/bin/python2.4
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C)       2008 Bradley M. Kuhn <bkuhn@ebb.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest

from tests.testmessages import silence_all_messages, clear_all_messages, get_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
verbose = 4
silence_all_messages()

from pokerui.pokerrenderer import PokerInteractors
from pokerui.pokerrenderer import PokerRenderer
from pokernetwork.pokerclientpackets import *

class PokerRendererMockup(PokerRenderer):
    def __init__(self):
	self.factory = PokerFactoryMockup()
	self.chat_words = [{'in': "nh",
			    'out': "nice hand",
			    'event': "emThumbUp"}]
	self.verbose = 4
	self.protocol = PokerProtocolMockup()
	self._packetRendered = None

    def render(self, packet):
	self._packetRendered = packet

class PokerProtocolMockup:
    def __init__(self):
	self.packets = []
    def schedulePacket(self, packet):
	self.packets.append(packet)

class PokerFactoryMockup:
    def __init__(self):
	self.verbose = 4
	self.chat_config = {'max_chars': 80,
			    'line_length': 80}
        self.clearMessages()

    def packet2game(self, packet):
	pass

    def clearMessages(self):
        self.messages = []

    def message(self, str):
        self.messages.append(str)

    def getMessages(self):
        return self.messages


class PokerPacketChatMockup:
    def __init__(self, message):
	self.message = message
	self.serial = 0
	self.game_id = 0

class PokerPacketMockup:
    def __init__(self, type):
	self.type = type
        self.hand = "best hand"

class PokerRendererTestCase(unittest.TestCase):
    
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererMockup()
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.renderer = None
        
    # -----------------------------------------------------------------------------------------------------    
    def test_chatFormatMessage(self):
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("inhaler"))
	self.assertEquals("inhaler", message)
	self.assertEquals(0, len(self.renderer.protocol.packets))
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("nh"))
	self.assertEquals("nice hand", message)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[0].word)
	message = self.renderer.chatFormatMessage(PokerPacketChatMockup("nh nh nh"))
	self.assertEquals("nice hand nice hand nice hand", message)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[1].word)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[2].word)
	self.assertEquals("emThumbUp", self.renderer.protocol.packets[3].word)

    #------------------------------------------------------------------------------------------------------
    def test_handleConnection(self):
	bestCard_packet = PokerPacketMockup(PACKET_POKER_BEST_CARDS)
        clear_all_messages()
	self.renderer._handleConnection(PokerProtocolMockup(), bestCard_packet)
        self.assertEquals("best hand", self.renderer._packetRendered.hand)

class PokerFactoryUpdateInterfaceWindowsMockup:
    def __init__(self):
	self.interface = None

class PokerRendererUpdateInterfaceWindowsMockup(PokerRenderer):
    def __init__(self):
	self.renderCalled = False
	self.packet = None
	self.packets = []
	self.factory = PokerFactoryUpdateInterfaceWindowsMockup()

    def render(self, packet):
	self.renderCalled = True
	self.packet = packet
	self.packets.append(packet)

from pokerui.pokerrenderer import LOBBY
from pokerui.pokerrenderer import TOURNAMENTS
from pokerui.pokerrenderer import CASHIER
from pokerui.pokerrenderer import LOGIN

class PokerRendererUpdateInterfaceWindowsTestCase(unittest.TestCase):

    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.renderer = PokerRendererUpdateInterfaceWindowsMockup()

    # -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        self.renderer = None

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupLobbyToCashier(self):
	previous = LOBBY
	next = CASHIER
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("hide", self.renderer.packet.command)	

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupTournamentsToCashier(self):
	previous = TOURNAMENTS
	next = CASHIER
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("hide", self.renderer.packet.command)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToLobby(self):
	previous = CASHIER
	next = LOBBY
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("show", self.renderer.packet.command)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToLobby(self):
	previous = CASHIER
	next = TOURNAMENTS
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(True, self.renderer.renderCalled)
	self.assertEquals("lobby_tabs_window", self.renderer.packet.window)
	self.assertEquals("show", self.renderer.packet.command)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToOther(self):
	previous = CASHIER
	next = LOGIN
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(False, self.renderer.renderCalled)

    # -----------------------------------------------------------------------------------------------------
    def test_UpdateInterfaceWindowsMockupCashierToOther(self):
	previous = LOBBY
	next = TOURNAMENTS
	self.assertEquals(False, self.renderer.renderCalled)
	self.renderer.updateInterfaceWindows(previous, next)
	self.assertEquals(False, self.renderer.renderCalled)

    # -----------------------------------------------------------------------------------------------------
    def test_ShowLobby(self):
	self.renderer.showLobby()
	self.assertEquals("tournaments_lobby_tabs_window", self.renderer.packets[0].window)
	self.assertEquals("hide", self.renderer.packets[0].command)
	self.assertEquals("lobby_window", self.renderer.packets[1].window)
	self.assertEquals("show", self.renderer.packets[1].command)
	self.assertEquals("table_info_window", self.renderer.packets[2].window)
	self.assertEquals("show", self.renderer.packets[2].command)
	self.assertEquals("cashier_button_window", self.renderer.packets[3].window)
	self.assertEquals("show", self.renderer.packets[3].command)

###############################################################################
from pokerui import pokerinteractor

class PokerInteractorsTests(unittest.TestCase):
    class MockGame:
        knownGameId = 111
        unknownGameId = 123
        def __init__(self, id):
            self.id = id

    class MockConfig:
        def headerGetProperties(self, lookup):
            print "My config: "
            print lookup
            return [ lookup ]
            
    class MockSettings:
        def headerGet(self, lookup):
            print "My setting: "
            print lookup
            return [ lookup ]
            
    class MockPokerFactory:
        def __init__(self):
            self.verbose = 4
            self.clearMessages()
            self.config = PokerInteractorsTests.MockConfig()
            self.settings = PokerInteractorsTests.MockSettings()
            self.display = None

        def clearMessages(self):
            self.messages = []

        def message(self, str):
            self.messages.append(str)

        def getMessages(self):
            return self.messages

        def packet2game(self, packet):
            return PokerInteractorsTests.MockGame(packet.game_id)

        def getGame(self, gameId):
            if gameId == PokerInteractorsTests.MockGame.knownGameId:
                return PokerInteractorsTests.MockGame(gameId)
            elif gameId == PokerInteractorsTests.MockGame.unknownGameId:
                return None
            else:
                self.fail("given unknown game id %d " % gameId)
                return None

    class MockInteractor:
        def __init__(self, myName, gameId):
            self.game_id = gameId
            self.name = myName
            self.state = False
            self.selected_value = None

        def stateHasChanged(self):
            return self.state

        def getDefault(self):
            return "MOCK default"

        def getClicked(self):
            return "MOCK clicked"

    class MockPokerRenderer:
        # Simply keep track of rendered Packets so that we can later assert their arrival (or non-arrival)

        def __init__(self):
            self.renderedPackets = []

        def render(self,  packet):
            self.renderedPackets.append(packet)

    class MockPokerProtocol:
        def registerHandler(self, boolVal, packetVal, CallbackFunc):
            global currentSuite
            currentSuite.assertEquals(isinstance(boolVal, bool), True)
            currentSuite.assertEquals(isinstance(packetVal, int), True)

        def getCurrentGameId(self):
            return PokerInteractorsTests.MockGame.knownGameId
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
        global currentSuite
        currentSuite = self
        silence_all_messages()
        clear_all_messages()
        # Replace the PokerInteractor class with our MockInteractor
        global SavePokerInteractorClass
        SavePokerInteractorClass = pokerinteractor.PokerInteractor
        pokerinteractor.PokerInteractor = PokerInteractorsTests.MockInteractor

	self.interactors = PokerInteractors(PokerInteractorsTests.MockPokerFactory(),
                                            PokerInteractorsTests.MockPokerRenderer())
        self.assertEquals(get_messages(), [], self.interactors.factory.getMessages())
        clear_all_messages()
        self.interactors.factory.clearMessages()
	self.interactors.setProtocol(PokerInteractorsTests.MockPokerProtocol())
        self.assertEquals(get_messages(), [], self.interactors.factory.getMessages())
    # -----------------------------------------------------------------------------------------------------
    def tearDown(self):
        pokerinteractor.PokerInteractor = SavePokerInteractorClass
    # -----------------------------------------------------------------------------------------------------
    def test01_handleBadPacket(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        self.interactors._handleConnection(self.interactors.protocol,
                                           PacketPokerError(message = "feed this back to me"))
        self.assertEquals(self.interactors.factory.getMessages(), ['PokerInteractors::_handleConnection: type = ERROR(53) serial = 0 game_id = 0 message = feed this back to me, code = 0, other_type = ERROR'])
        self.assertEquals(get_messages(), ['ERROR PokerInteractors: ignoring packet of unknown type in _handleConnection(): type = ERROR(53) serial = 0 game_id = 0 message = feed this back to me, code = 0, other_type = ERROR'])
        return True
    # -----------------------------------------------------------------------------------------------------
    def test02_interactorDisplayNode_UnknownGame(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        self.interactors.interactorDisplayNode(PokerInteractorsTests.MockInteractor("Unknown Game",
                                    PokerInteractorsTests.MockGame.unknownGameId))
        # No output is expected, as the gameID is unknown so nothing should be returned
        self.assertEquals([], self.interactors.factory.getMessages(), get_messages())
        self.assertEquals(self.interactors.renderer.renderedPackets, [])
    # -----------------------------------------------------------------------------------------------------
    def test03_interactorDisplayNode_KnownGameSameState(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        self.interactors.interactorDisplayNode(PokerInteractorsTests.MockInteractor("Known Game",
                                    PokerInteractorsTests.MockGame.knownGameId))
        # No output is expected, as the state will be left the same on the Interactor
        self.assertEquals([], self.interactors.factory.getMessages(), get_messages())
        self.assertEquals(self.interactors.renderer.renderedPackets, [])
    # -----------------------------------------------------------------------------------------------------
    def test04_interactorDisplayNode_KnownGameChangedState(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()
        myInteractor =  PokerInteractorsTests.MockInteractor("Known Game",
                                    PokerInteractorsTests.MockGame.knownGameId)
        myInteractor.state = True
        self.interactors.interactorDisplayNode(myInteractor)

        # Now we get output
        self.assertEquals(self.interactors.factory.getMessages(),
                          ['interactor:Known Game default=MOCK default clicked=MOCK clicked']) 
        self.assertEquals([], get_messages())

        for p in self.interactors.renderer.renderedPackets:
            self.assertEquals(p.type, PACKET_POKER_DISPLAY_NODE)
            self.assertEquals(p.name, "Known Game")
            self.assertEquals(p.selection, None)
            self.assertEquals(p.game_id, 0)
            if p.state == "default":
                self.assertEquals(p.style, "MOCK default")
            elif p.state == "clicked":
                self.assertEquals(p.style, "MOCK clicked")
            else:
                self.fail("Unknown state in renderedPackets: %s" % p.state)
        return True
    # -----------------------------------------------------------------------------------------------------
    def test05_interactorsSyncDisplay_NoFactoryDisplay(self):
        clear_all_messages()
        self.interactors.factory.clearMessages()

        self.interactors.interactorsSyncDisplay(PokerInteractorsTests.MockGame.knownGameId)
        
        # No output is expected, as factory.display is not set
        self.assertEquals([], self.interactors.factory.getMessages(), get_messages())
        self.assertEquals(self.interactors.renderer.renderedPackets, [])
# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerRendererTestCase))
    suite.addTest(unittest.makeSuite(PokerRendererUpdateInterfaceWindowsTestCase))
    suite.addTest(unittest.makeSuite(PokerInteractorsTests))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerrenderer
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerrenderer.py ) ; ( cd ../tests ; make TESTS='test-pokerrenderer.py' check )"
# End:
