#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

from types import *

from twisted.python import failure
from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor
from twisted.internet import defer

twisted.internet.base.DelayedCall.debug = True

from urlparse import urlparse

from tests.testmessages import silence_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokernetwork import currencyclient

class CurrencyClientTestCase(unittest.TestCase):

    def destroyDb(self):
        if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@' -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS currencytest'")
        else:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS currencytest'")
    
    # -----------------------------------------------------------------------------
    def setUp(self):
        self.destroyDb()
        self.client = currencyclient.CurrencyClient()
        self.client.getPage = self.getPage
    
    # -----------------------------------------------------------------------------    
    def tearDown(self):
        del self.client
        self.destroyDb()
        
    def getPage(self, url):
        ( scheme, netloc, path, parameters, query, fragement ) = urlparse(url)
        cmd = """
cat <<'EOF' | QUERY_STRING='""" + query + """' @PHP@ --define extension=mysql.so
<?
  ini_set('include_path', '@srcdir@/../../pokerweb/pages:' . ini_get('include_path'));
  $GLOBALS['currency_db_base'] = 'currencytest';
  $GLOBALS['currency_db_host'] = '@MYSQL_TEST_DBHOST@';
  $GLOBALS['currency_db_user'] = '@MYSQL_TEST_DBROOT@';
  $GLOBALS['currency_db_password'] = '@MYSQL_TEST_DBROOT_PASSWORD@';
  require 'currency.php';
  parse_str(getenv('QUERY_STRING'), $_GET);
  currency_main(False);
?>
EOF
"""
        #print cmd
        fd = os.popen(cmd)
        result = fd.read()
        fd.close()
        d = defer.Deferred()
        reactor.callLater(0, lambda: d.callback(result))
        return d

    # -----------------------------------------------------------------------------    
    def getNote(self, url, value):
        d = self.client.getNote(url, value)
        if "?" in url:
            check_url = url[:url.index("?")]
        else:
            check_url = url
        def validate(result):
            if isinstance(result, failure.Failure): raise result
            note = result[0]
            self.assertEqual(check_url, note[0])
            self.assertEqual(40, len(note[2]))
            self.assertEqual(value, note[3])
            return result
        d.addBoth(validate)
        return d

    # -----------------------------------------------------------------------------    
    def getCommitedNote(self, url, value):
        return self.commit(self.getNote(url, value))

    # -----------------------------------------------------------------------------    
    def commit(self, d):
        def commit(result):
            if isinstance(result, failure.Failure): raise result
            first_note = result[0]
            d = self.client.commit(first_note[0], first_note[2])
            d.addCallback(lambda ignore: result)
            return d
        d.addBoth(commit)
        return d

    # -----------------------------------------------------------------------------    
    def test01_getNote(self):
        d = self.getNote('http://fake/', 100)
        def validate(result):
            note = result[0]
            self.assertEqual(1, note[1])
            return result
        d.addCallback(validate)
        return d

    # -----------------------------------------------------------------------------    
    def test02_commit(self):
        return self.getCommitedNote('http://fake/', 100)

    # -----------------------------------------------------------------------------    
    def test03_checkNote(self):
        d = self.getCommitedNote('http://fake/', 100)

        def checkNote(result):
            #print "checkNote " + str(result)
            note_to_check = result[0]
            d = self.client.checkNote(note_to_check)
            def validate(result):
                if isinstance(result, failure.Failure): raise result
                checked_note = result[0]
                self.assertEqual(note_to_check, checked_note)
                return result
            d.addBoth(validate)
            return d

        d.addCallback(checkNote)
        return d

    # -----------------------------------------------------------------------------    
    def test04_changeNote(self):
        d = self.getCommitedNote('http://fake/', 100)

        def changeNote(result):
            note_to_change = result[0]
            d = self.client.changeNote(note_to_change)
            def validate(result):
                if isinstance(result, failure.Failure): raise result
                changed_note = result[0]
                self.assertEqual("http://fake/", changed_note[0])
                self.assertEqual(note_to_change[1] + 1, changed_note[1])
                self.assertEqual(40, len(changed_note[2]))
                self.assertNotEqual(note_to_change[2], changed_note[2])
                self.assertEqual(note_to_change[3], changed_note[3])
                return result
            d.addBoth(validate)
            return d

        d.addCallback(changeNote)
        return d

    # -----------------------------------------------------------------------------    
    def test05_mergeNotes(self):
        notes = []
        def addnote(result): 
            notes.append(result[0])
            return result

        d1 = self.getCommitedNote('http://fake/', 100)
        d1.addCallback(addnote)

        d2 = self.getCommitedNote('http://fake/', 100)
        d2.addCallback(addnote)

        d = defer.DeferredList((d1, d2))

        def mergeNotes(note):
            self.assertEquals(2, len(notes))
            d = self.client.mergeNotes(*notes)
            def validate(result):
                if isinstance(result, failure.Failure): raise result
                self.assertEqual(1, len(result))
                note = result[0]
                self.assertEqual("http://fake/", note[0])
                self.assertEqual(1, note[1])
                self.assertEqual(40, len(note[2]))
                self.assertEqual(200, note[3])
                return result
            d.addBoth(validate)
            return d

        d.addCallback(mergeNotes)
        return self.commit(d)

    # -----------------------------------------------------------------------------    
    def test06_meltNotes(self):
        notes = []
        def addnote(result): 
            notes.append(result[0])
            return result

        d1 = self.getCommitedNote('http://fake/', 100)
        d1.addCallback(addnote)

        d2 = self.getCommitedNote('http://fake/', 500)
        d2.addCallback(addnote)

        d = defer.DeferredList((d1, d2))

        def meltNotes(note):
            self.assertEquals(2, len(notes))
            d = self.client.meltNotes(*notes)
            def validate(result):
                if isinstance(result, failure.Failure): raise result
                self.assertEqual(1, len(result))
                note = result[0]
                self.assertEqual("http://fake/", note[0])
                self.assertEqual(1, note[1])
                self.assertEqual(40, len(note[2]))
                self.assertEqual(600, note[3])
                return result
            d.addBoth(validate)
            return d

        d.addCallback(meltNotes)
        return self.commit(d)

    # -----------------------------------------------------------------------------    
    def test07_breakNote(self):
        d = self.getCommitedNote('http://fake/', 100)

        def breakNote(result):
            #print "breakNote " + str(result)
            note_to_break = result[0]
            d = self.client.breakNote(note_to_break, 30, 10, 5)
            def validate(result):
                if isinstance(result, failure.Failure): raise result
                #print "broken notes " + str(result)
                notes = result
                self.assertEqual(4, len(notes))
                self.assertEqual(30, notes[0][3])
                self.assertEqual(30, notes[1][3])
                self.assertEqual(30, notes[2][3])
                self.assertEqual(10, notes[3][3])
                return result
            d.addBoth(validate)
            return d

        d.addCallback(breakNote)
        return d

    # -----------------------------------------------------------------------------    
    def test08_breakNote_zero(self):
        d = self.getCommitedNote('http://fake/', 100)

        def breakNote(result):
            #print "breakNote " + str(result)
            note_to_break = result[0]
            d = self.client.breakNote(note_to_break, 100, 0)
            def validate(result):
                if isinstance(result, failure.Failure): raise result
                #print "broken notes " + str(result)
                notes = result
                self.assertEqual(2, len(notes))
                self.assertEqual(100, notes[0][3])
                self.assertEqual(0, notes[1][3])
                return result
            d.addBoth(validate)
            return d

        d.addCallback(breakNote)
        return d

    # -----------------------------------------------------------------------------    
    def test09_getNote_with_id(self):
        d = self.getNote('http://fake/?id=1', 100)
        def validate(result):
            note = result[0]
            self.assertEqual(1, note[1])
            return result
        d.addCallback(validate)
        return d

# -----------------------------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test07"
    suite = loader.loadClass(CurrencyClientTestCase)
    return runner.TrialRunner(reporter.TextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)
    
# -----------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-currencyclient.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/currencyclient.py' TESTS='coverage-reset test-currencyclient.py coverage-report' check )"
# End:
