#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Loic Dachary <loic@dachary.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

import simplejson

from twisted.trial import unittest, runner, reporter
from twisted.internet import defer, reactor
from twisted.application import internet
from twisted.python import failure
import twisted.internet.base
twisted.internet.base.DelayedCall.debug = True

from twisted.web import client

from tests.testmessages import silence_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from tests import testclock

from pokernetwork import pokersite
from pokernetwork import pokernetworkconfig
from pokernetwork import pokerservice

settings_xml_server = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="6" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="20" round="0" position="0" showdown="0" autodeal_max="1" finish="0" messages="60" />

  <table name="Table1" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="60" currency_serial="1" />
  <table name="Table2" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="60" currency_serial="1" />

  <listen tcp="19481" />
  <resthost host="127.0.0.1" port="19481" path="/POKER_REST" />

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" user_create="yes" />
  <database name="pokernetworktest" host="localhost" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>.. ../@srcdir@ @POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""

settings_xml_proxy = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="6" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="20" round="0" position="0" showdown="0" autodeal_max="1" finish="0" messages="60" />

  <listen tcp="19480" />

  <rest_filter>../@srcdir@/../pokernetwork/proxyfilter.py</rest_filter>

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" user_create="yes" />
  <database name="pokernetworktest" host="localhost" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>.. ../@srcdir@ @POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""

class ProxyTestCase(unittest.TestCase):

      def destroyDb(self, arg = None):
            if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
                  os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
            else:
                  os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -e 'DROP DATABASE IF EXISTS pokernetworktest'")

      def initServer(self):
            settings = pokernetworkconfig.Config([])
            settings.loadFromString(settings_xml_server)
            self.server_service = pokerservice.PokerService(settings)
            self.server_service.disconnectAll = lambda: True
            self.server_service.startService()
            self.server_port = reactor.listenTCP(19481, pokersite.PokerSite(settings, pokerservice.PokerRestTree(self.server_service)), interface="127.0.0.1")
            
      def initProxy(self):
            settings = pokernetworkconfig.Config([])
            settings.loadFromString(settings_xml_proxy)
            self.proxy_service = pokerservice.PokerService(settings)
            self.proxy_service.disconnectAll = lambda: True
            self.proxy_service.startService()
            self.proxy_port = reactor.listenTCP(19480, pokersite.PokerSite(settings, pokerservice.PokerRestTree(self.proxy_service)), interface="127.0.0.1")
          
      def setUp(self):
            testclock._seconds_reset()
            pokersite.memcache = pokersite.MemcacheMockup
            self.destroyDb()
            self.initServer()
            self.initProxy()

      def tearDownServer(self):
            d = self.server_service.stopService()
            d.addCallback(lambda x: self.server_port.stopListening())
            return d
            
      def tearDownProxy(self):
            d = self.proxy_service.stopService()
            d.addCallback(lambda x: self.proxy_port.stopListening())
            return d
            
      def tearDown(self):
            d = defer.DeferredList((
                  self.tearDownServer(),
                  self.tearDownProxy()
                  ))
            d.addCallback(self.destroyDb)
            d.addCallback(lambda x: reactor.disconnectAll())
            return d
      
      def test01_ping_server(self):
            d = client.getPage("http://127.0.0.1:19480/POKER_REST",
                               postdata = '{"type": "PacketPing"}')
            def checkPing(result):
                  self.assertEqual('[]', str(result))
            d.addCallback(checkPing)
            return d

      def test02_ping_proxy(self):
            d = client.getPage("http://127.0.0.1:19481/POKER_REST",
                               postdata = '{"type": "PacketPing"}')
            def checkPing(result):
                  self.assertEqual('[]', str(result))
            d.addCallback(checkPing)
            return d

      def test03_listTables(self):
            d = client.getPage("http://127.0.0.1:19480/POKER_REST",
                               postdata = '{"type":"PacketPokerTableSelect"}')
            def checkTables(result):
                  packets = simplejson.JSONDecoder().decode(result)
                  self.assertEqual('PacketPokerTableList', packets[0]['type'])
                  tables = packets[0]['packets']
                  self.assertEqual('Table1', tables[0]['name'])
            d.addCallback(checkTables)
            return d

      def test04_tableJoin(self):
            d = client.getPage("http://127.0.0.1:19481/POKER_REST",
                               postdata = '{"type":"PacketPokerTableJoin","game_id":1}')
            def checkTable(result):
                  packets = simplejson.JSONDecoder().decode(result)
                  self.assertEqual('PacketPokerTable', packets[0]['type'])
                  self.assertEqual('Table1', packets[0]['name'])
            d.addCallback(checkTable)
            return d

def Run():
      loader = runner.TestLoader()
      loader.methodPrefix = "test04"
      suite = loader.suiteFactory()
      suite.addTest(loader.loadClass(ProxyTestCase))
      return runner.TrialRunner(
            reporter.VerboseTextReporter,
            tracebackFormat='default',
            ).run(suite)

if __name__ == '__main__':
      if Run().wasSuccessful():
            sys.exit(0)
      else:
            sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-proxyfilter.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokersite.py ../pokernetwork/proxyfilter.py' VERBOSE_T=-1 TESTS='coverage-reset test-proxyfilter.py coverage-report' check )"
# End:
