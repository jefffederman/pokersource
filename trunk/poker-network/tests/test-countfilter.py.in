#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Johan Euphrosine <proppy@aminche.com>
#
# This software's license gives you freedom; you can copy, convey,
# propogate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation (FSF), either version 3 of the License, or (at your
# option) any later version of the AGPL published by the FSF.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#

import sys, os
sys.path.insert(0, "./..")
sys.path.insert(0, "..")

from twisted.trial import unittest, runner, reporter

from tests import testmessages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: testmessages.silence_all_messages()

from tests import testclock
from pokernetwork import pokermemcache
from pokernetwork import countfilter

class CountTestCase(unittest.TestCase):
    def setUp(self):
        testclock._seconds_reset()
        self.memcache = pokermemcache.MemcacheMockup.Client([])
    def tearDown(self):
        pass
    def test01_set_count_memcache(self):
        memcache = self.memcache
        uid = 42
        cookie_timeout = 60
        memcache_timeout = cookie_timeout * 2
        sitepath = 'URLID'
        count_prefix = 'COUNT'
        memcache_key = "_".join([count_prefix,str(sitepath),str(uid)])

        class Session:
            def __init__(self):
                self.uid = uid
        class Request:            
            def __init__(self, count = None):
                self.sitepath = sitepath
                self.count = count
                if count:
                    self.args = {'count': [count]}
                else:
                    self.args = {}
            def getSession(self):
                return Session()
        class Site:
            def __init__(self):
                self.memcache = memcache
                self.cookieTimeout = cookie_timeout
        class Packet:
            pass

        countfilter.rest_filter(Site(), Request(), Packet())
        self.assertEqual(self.memcache.get(memcache_key), 0)
        self.assertEqual(memcache_timeout, self.memcache.expiration[memcache_key])
        
        count = 1
        countfilter.rest_filter(Site(), Request(count), Packet())
        self.assertEqual(self.memcache.get(memcache_key), count)
        self.assertEqual(memcache_timeout, self.memcache.expiration[memcache_key])

        count = 1
        countfilter.rest_filter(Site(), Request(count), Packet())
        self.assertEqual(self.memcache.get(memcache_key), count)
        self.assertEqual(memcache_timeout, self.memcache.expiration[memcache_key])

        count = 2
        countfilter.rest_filter(Site(), Request(count), Packet())
        self.assertEqual(self.memcache.get(memcache_key), count)
        self.assertEqual(memcache_timeout, self.memcache.expiration[memcache_key])
        
        count = 1
        exceptionRaised = None
        try:
            countfilter.rest_filter(Site(), Request(count), Packet())
        except Exception:
            exceptionRaised = str(sys.exc_info()[1])
        self.assertEqual(exceptionRaised, "a more recent client connection occured (2), killing old connection (1)")

def Run():
      loader = runner.TestLoader()
#      loader.methodPrefix = "test01"
      suite = loader.suiteFactory()
      suite.addTest(loader.loadClass(CountTestCase))
      return runner.TrialRunner(
            reporter.VerboseTextReporter,
            tracebackFormat='default',
            ).run(suite)

if __name__ == '__main__':
      if Run().wasSuccessful():
            sys.exit(0)
      else:
            sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-countfilter.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/countfilter.py' VERBOSE_T=-1 TESTS='coverage-reset test-countfilter.py coverage-report' check )"
# End:
