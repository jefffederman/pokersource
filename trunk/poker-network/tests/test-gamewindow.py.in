#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep <licensing@mekensleep.com>
#                    24 rue vieille du temple, 75004 Paris
#
# This software's license gives you freedom; you can copy, convey,
# propogate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation (FSF), either version 3 of the License, or (at your
# option) any later version of the AGPL published by the FSF.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@/pokerclient2d")
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

import gtk
import gtk.glade

from tests.testmessages import silence_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

import unittest

class GameWindowGladeTest(unittest.TestCase):
    def setUp(self):
        from gamewindow import GameWindowGlade
        glade_file = "@top_srcdir@/pokerclient2d/data/interface/table/mockup.glade"
        glade = gtk.glade.XML(glade_file)
        self.glade = GameWindowGlade(glade)
    def test_nameSeat(self):
        names = map(lambda seat: self.glade.get_widget("name_seat%d" % seat), xrange(10))
        map(lambda name: name.set_label("proppy"), names)
    def test_moneySeat(self):
        moneys = map(lambda seat: self.glade.get_widget("money_seat%d" % seat), xrange(10))
        map(lambda money: money.set_label("$100"), moneys)
    def test_betSeat(self):
        bets = map(lambda seat: self.glade.get_widget("bet_seat%d" % seat), xrange(10))
        map(lambda bet: bet.set_label("$100"), bets)
    def test_cardSeat(self):
        for seat in xrange(10):           
            cards = map(lambda card: self.glade.get_widget("card%d_seat%d" % (card, seat)), xrange(1, 8))
            map(lambda card: card.set_from_file("Kspades.png"), cards)
    def test_board(self):
        boards = map(lambda board: self.glade.get_widget("board%d" % board), xrange(1,6))
	map(lambda board: board.set_from_file("Kspades.png"), boards)
    def test_pot(self):
        pots = map(lambda pot: self.glade.get_widget("pot%d" % pot), xrange(9))
	map(lambda pot: pot.set_label("$100"), pots)
    def test_dealer(self):
        dealers = map(lambda dealer: self.glade.get_widget("dealer%d" % dealer), xrange(10))
        map(lambda dealer: dealer.show(), dealers)
    def test_winner(self):
        winners = map(lambda winner: self.glade.get_widget("winner%d" % winner), xrange(9))
	map(lambda winner: winner.set_label("hi card"), winners)
    def test_sitSeat(self):
        seats = map(lambda seat: self.glade.get_widget("sit_seat%d" % seat), xrange(10))
	map(lambda seat: seat.show(), seats)
    def test_tableStatus(self):
        self.table_status = self.glade.get_widget("table_status").get_buffer()
        self.table_status.set_text("\n".join(("salut", "les", "aminches")))
    def test_fixed(self):
	fixed = self.glade.get_widget("game_window_fixed")
	children = fixed.get_children()
	self.assert_(len(children) > 0)
    def test_quit(self):
        quit = self.glade.get_widget("quit")
	quit.hide()
	quit.show()
    def test_rebuy(self):
        rebuy = self.glade.get_widget("rebuy")
	rebuy.hide()
	rebuy.show()
    def test_acceleratos(self):
	self.glade.get_widget("raise_increase").show() # 1x1 button used for accelerators
        self.glade.get_widget("raise_decrease").show() # 1x1 button used for accelerators
        self.glade.get_widget("raise_increase_bb").show() # 1x1 button used for accelerators
        self.glade.get_widget("raise_decrease_bb").show() # 1x1 button used for accelerators
        self.glade.get_widget("raise_pot").show() # 1x1 button used for accelerators
        self.glade.get_widget("raise_half_pot").show() # 1x1 button used for accelerators
    def on_call_clicked(self, button):
        self.call_clicked_called = True
    def on_raise_clicked(self, button):
        self.raise_clicked_called = True
    def on_fold_clicked(self, button):
        self.fold_clicked_called = True
    def on_check_clicked(self, button):
        self.check_clicked_called = True
    def test_interactors(self):
        self.glade.signal_autoconnect(self)
	call = self.glade.get_widget("call")
        call.clicked()
        self.assertEquals(True, self.call_clicked_called)
	raise_ = self.glade.get_widget("raise")
        raise_.clicked()
        self.assertEquals(True, self.raise_clicked_called)
	raise_range = self.glade.get_widget("raise_range")
 	check = self.glade.get_widget("check")
        check.clicked()
        self.assertEquals(True, self.check_clicked_called)
        self.clicked = False
	fold = self.glade.get_widget("fold")
        fold.clicked()
        self.assertEquals(True, self.fold_clicked_called)
    def test_switch(self):
	switch = self.glade.get_widget("switch")
        switch.hide()
    def test_gladeRelativeFile(self):
	relative_file = self.glade.relative_file("test")
        self.assertEquals("@top_srcdir@/pokerclient2d/data/interface/table/test", relative_file)
    def test_gladeSignalAutoconnect(self):
        class SignalHandler:
            signal_handled = False
            def on_fold_clicked(self, widget):
                self.signal_handled = True
        handler = SignalHandler()
        self.glade.signal_autoconnect(handler)
        sit = self.glade.get_widget("fold")
        sit.clicked()
        self.assertEquals(True, handler.signal_handled)
    def test_fixedPositions(self):
        screen = self.glade.get_widget("game_window_fixed")
        widget_pots = []
        for pot in map(lambda x: self.glade.get_widget("pot%d" % x), xrange(9)):
            widget_pots.append((pot, screen.child_get_property(pot, "x"), screen.child_get_property(pot, "y")))
        for bet in map(lambda x: self.glade.get_widget("bet_seat%d" % x), xrange(10)):
            widget_pots.append((bet, screen.child_get_property(bet, "x"), screen.child_get_property(bet, "y")))
        for name in map(lambda x: self.glade.get_widget("name_seat%d" % x), xrange(10)):
            widget_pots.append((name, screen.child_get_property(name, "x"), screen.child_get_property(name, "y")))

if __name__ == '__main__':
    unittest.main()

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-gamewindow.py ) ; ( cd ../tests ; make TESTS='test-gamewindow.py' check )"
# End:
