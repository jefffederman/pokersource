#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007 Loic Dachary <loic@dachary.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest

from pokernetwork import pokerclientpackets

class PokerClientPacketsTestCase(unittest.TestCase):

    def packetCheck(self, **kwargs):
        packet_type = kwargs['type']
        del kwargs['type']
        packet = packet_type(**kwargs)
        size = packet.calcsize()
        packed = packet.pack()
        self.assertEqual(size, len(packed))
        other_packet = packet_type()
        self.assertNotEqual(None, other_packet.unpack(packed))
        self.assertEqual(repr(packet), repr(other_packet))
        self.assertEqual(packet, other_packet)
        del other_packet.type
        del other_packet.length
        self.assertEqual(packet.__dict__, other_packet.__dict__)
        self.assertEqual(packed, other_packet.pack())
        return packet

    #--------------------------------------------------------------    
    def test_all(self):
        verbose = int(os.environ.get('VERBOSE_T', '3'))
        for type in pokerclientpackets._TYPES:
            if pokerclientpackets.PacketFactory.has_key(type):
                if verbose > 0:
                    print pokerclientpackets.PacketNames[type]
                self.packetCheck(type = pokerclientpackets.PacketFactory[type])

    #--------------------------------------------------------------    
    def test_chips2amount(self):
        self.assertEqual(10, pokerclientpackets.chips2amount([1, 2, 4, 2]))

#--------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerClientPacketsTestCase))
    return suite
    
#--------------------------------------------------------------
def Run(verbose = 2):
    unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
#--------------------------------------------------------------
if __name__ == '__main__':
    Run()

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerclientpackets.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/pokerclientpackets.py' TESTS='coverage-reset test-pokerclientpackets.py coverage-report' check )"
# End:
