#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C)       2008 Bradley M. Kuhn <bkuhn@ebb.org>
# Copyright (C) 2006 Mekensleep <licensing@mekensleep.com>
#                    24 rue vieille du temple, 75004 Paris
#
# This software's license gives you freedom; you can copy, convey,
# propogate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation (FSF), either version 3 of the License, or (at your
# option) any later version of the AGPL published by the FSF.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#  Loic Dachary <loic@dachary.org>
#  Johan Euphrosine <johan@mekensleep.com>
#  Bradley M. Kuhn <bkuhn@ebb.org>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest

from tests.testmessages import silence_all_messages, get_messages, search_output, clear_all_messages
verbose = 4
silence_all_messages()

from pokerui.pokerrenderer import PokerInteractors
from pokernetwork.pokerclientpackets import PACKET_POKER_HIGHEST_BET_INCREASE, PACKET_POKER_FOLD, PACKET_POKER_CHECK, PACKET_POKER_CALL, PACKET_POKER_RAISE

class PokerInterfaceMockup:
    def __init__(self):
	return

    def registerHandler(self, dummy, dummy2):
	return

class PokerFactoryMockup:
    def __init__(self):
	self.verbose = 4
	self.settings = PokerSettingsMockup()
	self.config = PokerSettingsMockup()
	self.interface = PokerInterfaceMockup()
        self.clearMessages()

    def packet2game(self, packet):
	return PokerGameMockup()

    def getGame(self, id):
	return PokerGameMockup()

    def clearMessages(self):
        self.messages = []

    def message(self, str):
        self.messages.append(str)

    def getMessages(self):
        return self.messages

class PokerSettingsMockup:
    def __init__(self):
	return

    def headerGet(self, path):
	return "yes"

    def headerGetProperties(self, path):
	return [{'enabled_default': "Fold",
		 'enabled_clicked': "Fold",
		 'enabled_clicked_in_position': "Fold",
		 'scheduled_default': "(Fold)",
		 'scheduled_clicked': "(Fold)",
		 'activated_default': "Fold",
		 'activated_clicked': "Fold"},]

class PokerRendererMockup:
    def __init__(self):
	self.factory = PokerFactoryMockup()

    def render(self, packet):
	return
    
    def showCheckWarningBox(self):
	return

class PokerProtocolMockup:
    def __init__(self):
	self.money = 0

    def registerHandler(self, dummy, dummy2, dummy3):
	return

    def getCurrentGameId(self):
	return 0

    def getSerial(self):
	return 0

    def sendPacket(self, packet):
	return

class PokerPacketMockup:
    def __init__(self, type):
	self.type = type

class PokerGameMockup:
    def __init__(self):
	self.id = 0

    def willAct(self, serial):
	return True

    def getSerialInPosition(self):
	return 1

    def getPlayer(self, serial):
	return PokerProtocolMockup()

    def canCheck(self, serial):
	return True

    def canFold(self, serial):
	return True

    def canCall(self, serial):
	return True

    def canRaise(self, serial):
	return True

    def highestBetNotFold(self):
	return 0

class PokerPlayerMockup:
    def __init__(self):
	return

class PokerInteractorTestCase(unittest.TestCase):
    
    # -----------------------------------------------------------------------------------------------------
    def setUp(self):
	self.interactors = PokerInteractors(PokerFactoryMockup(), PokerRendererMockup())
	self.interactors.setProtocol(PokerProtocolMockup())
    
    # -----------------------------------------------------------------------------------------------------    
    def tearDown(self):
	self.interactors = None
        
    # -----------------------------------------------------------------------------------------------------    
    def test_highestBetIncreaseCancelCall(self):	
        clear_all_messages()
	interactor_set = self.interactors.getOrCreateInteractorSet(0)
        self.assertEquals(self.interactors.factory.getMessages(), ['interactor:check default= clicked=',
                          'interactor:fold default= clicked=', 'interactor:call default= clicked=',
                                                                   'interactor:raise default= clicked='])
        self.assertEquals(get_messages(), ['0 PokerInteractor::update: before check: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0                         after  check: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0 PokerInteractor::update: before fold: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0                         after  fold: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0 PokerInteractor::update: before call: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0                         after  call: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0 PokerInteractor::update: before raise: state disabled, canceled 0, selected 0, inPosition 0, userData None', '0                         after  raise: state disabled, canceled 0, selected 0, inPosition 0, userData None'])
        clear_all_messages()
        self.interactors.factory.clearMessages()
	interactors = interactor_set.items
	interactors['call'].setEnableIfDisabled()
	interactors['call'].setUserData([0,])
	interactors['call'].select(PokerPacketMockup(PACKET_POKER_CALL))
	interactors['call'].update()
	self.assertEquals('scheduled', interactors['call'].state.name)
	self.interactors._handleConnection(PokerProtocolMockup(), PokerPacketMockup(PACKET_POKER_HIGHEST_BET_INCREASE))
	self.assertEquals('enabled', interactors['call'].state.name)

    def test_highestBetIncreaseCancelRaise(self):	
	interactor_set = self.interactors.getOrCreateInteractorSet(0)
	interactors = interactor_set.items
	interactors['raise'].setEnableIfDisabled()
	interactors['raise'].setUserData([0,])
	interactors['raise'].select(PokerPacketMockup(PACKET_POKER_RAISE))
	interactors['raise'].update()
	self.assertEquals('scheduled', interactors['raise'].state.name)
	self.interactors._handleConnection(PokerProtocolMockup(), PokerPacketMockup(PACKET_POKER_HIGHEST_BET_INCREASE))
	self.assertEquals('enabled', interactors['raise'].state.name)

    def test_highestBetIncreaseCancelCheck(self):	
	interactor_set = self.interactors.getOrCreateInteractorSet(0)
	interactors = interactor_set.items
	interactors['check'].setEnableIfDisabled()
	interactors['check'].setUserData([0,])
	interactors['check'].select(PokerPacketMockup(PACKET_POKER_CHECK))
	interactors['check'].update()
	self.assertEquals('scheduled', interactors['check'].state.name)
	self.interactors._handleConnection(PokerProtocolMockup(), PokerPacketMockup(PACKET_POKER_HIGHEST_BET_INCREASE))
	self.assertEquals('enabled', interactors['check'].state.name)

    def test_highestBetIncreaseNotCancelFold(self):	
	interactor_set = self.interactors.getOrCreateInteractorSet(0)
	interactors = interactor_set.items
	interactors['fold'].setEnableIfDisabled()
	interactors['fold'].setUserData([0,])
	interactors['fold'].select(PokerPacketMockup(PACKET_POKER_FOLD))
	interactors['fold'].update()
	self.assertEquals('scheduled', interactors['fold'].state.name)
	self.interactors._handleConnection(PokerProtocolMockup(), PokerPacketMockup(PACKET_POKER_HIGHEST_BET_INCREASE))
	self.assertEquals('scheduled', interactors['fold'].state.name)

    def test_errorFake(self):	
        clear_all_messages()
	interactor_set = self.interactors.getOrCreateInteractorSet(0)
        clear_all_messages()
        interactor_set.items['fold'].error("dummy testing")
        self.assertEquals(get_messages(), ['ERROR dummy testing'])
        
# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerInteractorTestCase))
    return suite
    
# -----------------------------------------------------------------------------------------------------
def GetTestedModule():
    return pokerinteractor
  
# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerinteractor.py ) ; ( cd ../tests ; make TESTS='test-pokerinteractor.py' check )"
# End:
