#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2008 Bradley M. Kuhn <bkuhn@ebb.org>
#
# This software's license gives you freedom; you can copy, convey,
# propagate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation (FSF), either version 3 of the License, or (at your
# option) any later version of the AGPL published by the FSF.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#

import sys, os
sys.path.insert(0, "@srcdir@/..")
sys.path.insert(0, "..")

from types import *
import libxml2
import MySQLdb
from twisted.trial import unittest, runner, reporter
import twisted.internet.base
from twisted.internet import reactor, defer, error, base
from twisted.python import failure, runtime
from tests import testclock

from tests.testmessages import restore_all_messages, silence_all_messages, search_output, clear_all_messages, get_messages
#os.environ['VERBOSE_T'] = '0'
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokernetwork import pokernetworkconfig
from pokernetwork.attrpack import *

settings_xml_server = """<?xml version="1.0" encoding="ISO-8859-1"?>
<server verbose="3" ping="300000" autodeal="yes" simultaneous="4" chat="yes" >
  <delays autodeal="20" round="0" position="0" showdown="0" autodeal_max="1" finish="0" messages="60" />

  <language value="en_US.UTF-8"/>

  <table name="Table1" variant="holdem" betting_structure="100-200-no-limit" seats="10" player_timeout="60" currency_serial="1" />
  <table name="Table2" variant="holdem" betting_structure="2-4-limit" seats="10" player_timeout="60" currency_serial="0" />
  <table name="Table3" variant="holdem" betting_structure="test18pokerclient" seats="10" player_timeout="600" muck_timeout="600" currency_serial="1" forced_dealer_seat="0" />
  <table name="Table4" variant="holdem" betting_structure="ante-1-2-limit" seats="10" player_timeout="60" currency_serial="0" />
  <listen tcp="19480" />

  <cashier acquire_timeout="5" pokerlock_queue_timeout="30" user_create="yes"/>
  <database name="pokernetworktest" host="@MYSQL_TEST_DBHOST@" user="pokernetworktest" password="pokernetwork"
            root_user="@MYSQL_TEST_DBROOT@" root_password="@MYSQL_TEST_DBROOT_PASSWORD@" schema="@srcdir@/../../database/schema.sql" command="@MYSQL@" />
  <path>.. ../@srcdir@ @POKER_ENGINE_PKGSYSCONFDIR@ @POKER_NETWORK_PKGSYSCONFDIR@</path>
  <users temporary="BOT"/>
</server>
"""
############################################################################
class MockLookup:
    pass

class PokerAttrsTestCase(unittest.TestCase):
    def destroyDb(self, arg = None):
        if len("@MYSQL_TEST_DBROOT_PASSWORD@") > 0:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ --password='@MYSQL_TEST_DBROOT_PASSWORD@' -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")
        else:
            os.system("@MYSQL@ -u @MYSQL_TEST_DBROOT@ -h '@MYSQL_TEST_DBHOST@' -e 'DROP DATABASE IF EXISTS pokernetworktest'")

    def setUp(self):
#         settings = pokernetworkconfig.Config([])
#         settings.doc = libxml2.parseMemory(settings_xml_server, len(settings_xml_server))
#         settings.header = settings.doc.xpathNewContext()
        self.destroyDb()
        self.db = MySQLdb.connect(host = "@MYSQL_TEST_DBHOST@",
                                  port = 3306, user = "@MYSQL_TEST_DBROOT@",
                                  passwd = "@MYSQL_TEST_DBROOT_PASSWORD@")
        self.db.query("CREATE DATABASE pokernetworktest")
        self.db.select_db("pokernetworktest")
        #
        # Setup server
        #
#        self.service = pokerservice.PokerService(settings)
#        self.service.verbose = 6
#        self.service.startService()

    def tearDown(self):
        self.destroyDb()
#        d = self.service.stopService()
#        return d
    # -------------------------------------------------------------------------
    def test01_attrsAccessorBaseClass(self):
        """test01_attrsAccessorBaseClass
        tests to make sure base class is setup as expected and has
        expected public interface"""
        u = AttrsAccessor()
        self.assertEquals(u.attrsSupported, [])
        self.assertEquals(u.expectLookupArgs, [])
        self.assertEquals(u.getSupportedAttrsList(), [])

        clear_all_messages()
        self.assertEquals(u.getAttrValue('unknownstat'), None)
        self.assertEquals(get_messages(), [ "ERROR invalid attribute, unknownstat" ])

        clear_all_messages()
        u.attrsSupported = [ 'a' ]

        gotException = False
        try:
            u.getAttrValue('a')
            self.failIf(True)
        except NotImplementedError, ni:
            gotException = True
            self.assertEquals(ni.__str__(), "_lookupValidAttr NOT IMPLEMENTED IN ABSTRACT BASE CLASS")
        self.failUnless(gotException)

        u._lookupValidAttr = lambda attr : attr

        # Handle incorrect args
        u.attrsSupported = [ 'foo' ]
        clear_all_messages()
        self.assertEquals(u.getAttrValue('foo', 'testing', 'more'), 'foo')
        self.assertEquals(get_messages(), [ "ERROR keyword arguments only are supported for getAttrValue.  Ignoring these args: ('testing', 'more')"])

        def x(attr, **kwargs):
            return kwargs

        u._lookupValidAttr = x
        # Handle incorrect kwargs
        u.attrsSupported = [ 'foo' ]
        u.expectLookupArgs = [ 'bar' ]
        clear_all_messages()
        self.assertEquals(u.getAttrValue('foo', bar = 'testing', goo = 'more'),
                          {'goo': 'more', 'bar': 'testing'})
        self.assertEquals(get_messages(), ["ERROR Ignoring these extraneous arguments for getAttrValue: ['goo']"])

        # Handle incorrect kwargs
        u.attrsSupported = [ 'foo' ]
        u.expectLookupArgs = [ 'bar', 'baz' ]
        clear_all_messages()
        self.assertEquals(u.getAttrValue('foo', bar = 'testing', goo = 'more'),
                          {'goo': 'more', 'bar': 'testing'})
        self.assertEquals(get_messages(), ["ERROR The following required argument(s) missing for getAttrValue, lookup will surely fail: ['baz']", "ERROR Ignoring these extraneous arguments for getAttrValue: ['goo']"])

        # Handle incorrect kwargs
        u.attrsSupported = [ 'foo' ]
        u.expectLookupArgs = [ 'bar', 'baz' ]
        clear_all_messages()
        self.assertEquals(u.getAttrValue('foo', bar = 'testing'),
                          {'bar': 'testing'})
        self.assertEquals(get_messages(), ["ERROR The following required argument(s) missing for getAttrValue, lookup will surely fail: ['baz']"])
    # -------------------------------------------------------------------------
    def test02_factory(self):
        """test02_factory
        basic factory interface tests."""
        f = AttrsFactory()
        clear_all_messages()
        f.error("test")
        self.assertEquals(get_messages(), ['ERROR test'])

        self.failUnless(f.getClass(""), AttrsLookup)

        clear_all_messages()
        self.assertEquals(f.getClass("DOESNOTEXIST"), AttrsLookup)
        self.assertEquals(get_messages(), ["ERROR 'module' object has no attribute 'AttrsDOESNOTEXISTLookup'"])

        f = AttrsFactory(moduleStr = '__main__', classPrefix = '')

        self.assertEquals(f.getClass("Mock"), MockLookup)
    # -------------------------------------------------------------------------
    def test03_attrsLookup(self):
        """test04_attrsLookup
        Tests AttrsLookup: makes sure that it works properly"""

        # MockAccessor is a dummy accessor class that has only the
        # interface required by AttrsLookup
        class  MockAccessor:
            def getAttrValue(mockAccessorSelf, attr, **kwargs):
                self.assertEquals(attr, "mockattr")
                return "mockvalue"
        # PacketPokerDummy and PacketPokerDummySupported are mock-ups that
        # are forced into the pokerpackets module so that AttrsLookup can
        # instantiate them
        from pokernetwork import pokerpackets
        class  PacketPokerDummy:
            type = 168
            def __init__(packetPokerDummySelf, mockPacketField = 7, attrsDict = {}):
                self.assertEquals(mockPacketField, 5)
                self.assertEquals(attrsDict.keys(), [ 'mockattr' ])
                self.assertEquals(attrsDict['mockattr'], 'mockvalue')
                packetPokerDummySelf.initialized = True
                
        class  PacketPokerSupportedAttrs:
            type = 169
            def __init__(packetPokerSupportedSelf, attrs = []):
                self.assertEquals(attrs, [ 'mockattr' ])
                packetPokerSupportedSelf.initialized = True

        oldPackets = pokerpackets.PacketNames
        pokerpackets.PacketNames[PacketPokerDummy.type] = PacketPokerDummy
        pokerpackets.PacketNames[PacketPokerSupportedAttrs.type] = PacketPokerSupportedAttrs

        pokerpackets.PacketPokerDummy = PacketPokerDummy
        pokerpackets.PacketPokerSupportedAttrs = PacketPokerSupportedAttrs

        clear_all_messages()
        al = AttrsLookup(attr2accessor = { 'mockattr' : MockAccessor() },
                                              packetClassesName = "Dummy",
                                              requiredAttrPacketFields = [ 'mockPacketField' ])
        self.assertEquals(get_messages(),
                          ["ERROR 'module' object has no attribute 'PacketPokerSupportedDummy'"])
        clear_all_messages()
        self.assertEquals(al.getAttrValue('DOESNOTEXIST'), None)
        self.assertEquals(get_messages(), ['ERROR unsupported attribute, DOESNOTEXIST, for Dummy'])

        clear_all_messages()
        self.assertEquals(al.getAttrValue('mockattr'), "mockvalue")
        self.assertEquals(get_messages(), [])

        # Next, expect error when required packet fields are not sent to getAttrsAsPacket
        clear_all_messages()
        pack = al.getAttrsAsPacket()
        self.assertEquals(pack.type, pokerpackets.PACKET_POKER_ERROR)
        self.assertEquals(pack.serial, 0)
        self.assertEquals(pack.message, "SERVER ERROR: PacketPokerDummy requires field mockPacketField; getAttrsAsPacket called without it")
        self.assertEquals(pack.other_type, 168)
        
        self.assertEquals(get_messages(), ['ERROR PacketPokerDummy requires field mockPacketField; getAttrsAsPacket called without it'])

        # Next, check a valid call to getAttrsAsPacket() which has needed
        # fields in place, this is a valid call.
        clear_all_messages()
        pack = al.getAttrsAsPacket(mockPacketField = 5)
        self.assertEquals(pack.type, 168)
        self.assertEquals(pack.initialized, True)

        self.assertEquals(get_messages(), [])

        # Next, test getSupportedAttrsAsPacket()
        clear_all_messages()
        pack = al.getSupportedAttrsAsPacket()
        self.assertEquals(pack.type, 169)
        self.assertEquals(pack.initialized, True)
        self.assertEquals(get_messages(), [])

        pokerpackets.PacketNames = oldPackets
    # ------------------------------------------------------------------------
def Run():
    loader = runner.TestLoader()
#    loader.methodPrefix = "test03"
    suite = loader.suiteFactory()
    suite.addTest(loader.loadClass(PokerAttrsTestCase))
    return runner.TrialRunner(
        reporter.VerboseTextReporter,
#                              tracebackFormat='verbose',
                              tracebackFormat='default',
                              ).run(suite)

# ------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-attrpack.py ) ; ( cd ../tests ; make COVERAGE_FILES='../pokernetwork/attrpack.py' TESTS='coverage-reset test-attrpack.py coverage-report' check )"
# End:
