#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2006 Mekensleep
#
# Mekensleep
# 24 rue vieille du temple
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Johan Euphrosine <johan@mekensleep.com>
#  Jerome Jeannin   <jerome@mekensleep.com>

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")
import unittest

class rc_parseMockup:
    gtkrc = None
    def __init__(self, gtkrc):
        rc_parseMockup.gtkrc = gtkrc
import gtk
gtk.rc_parse = rc_parseMockup

from pokernetwork.pokernetworkconfig import Config
from pokerclient2d.pokerdisplay2d import PokerDisplay2D, PokerPlayer2D, PokerTable2D
from pokernetwork.pokerclientpackets import PACKET_POKER_POSITION, PACKET_POKER_PLAYER_ARRIVE, PACKET_POKER_BOARD_CARDS
class PokerPacketPlayerArriveMockup:
    type = PACKET_POKER_PLAYER_ARRIVE
    def __init__(self, serial, name):
        self.serial = serial
        self.seat = serial
        self.name = name
        self.url = "dummy"
        self.outfit = "red"

class PokerPacketPositionMockup:
    type = PACKET_POKER_POSITION
    def __init__(self, position):
        self.position = position
        self.serial = position

class PokerPacketBoardCardsMockup:
    type = PACKET_POKER_BOARD_CARDS

class PokerWidgetMockup:
    texts = []
    files = []
    show_called = {}
    def __init__(self, name):
        self.name = name
    def set_text(self, text):
        pass
    def show(self):
        PokerWidgetMockup.show_called[self.name] = True
    def hide(self):
        pass
    def get_buffer(self):
        pass
    def set_label(self, text):
        PokerWidgetMockup.texts.append(text)
    def set_use_markup(self, state):
        pass
    def modify_fg(self, state, color):
        pass
    def set_from_file(self, file):
        PokerWidgetMockup.files.append(file)
    def get_children(self):
        return ()

class PokerGladeMockup:
    def get_widget(self, name):
        return PokerWidgetMockup(name)
    def relative_file(self, file):
        return file

class PokerTableMockup:
    verbose = 1
    glade = PokerGladeMockup()
    id = 0

class PokerEvalMockup:
    cards = None
    def card2string(self, cards):
        return PokerEvalMockup.cards
class PokerBoardMockup:
    cards = (0, 0, 0)
class PokerGameMockup:
    id = 0
    eval = PokerEvalMockup()
    board = PokerBoardMockup()
    name = ""
    hand_serial = 0
    def getMaxHandSize(self):
        return 0
    def isTournament(self):
        return False
    def getPlayer(self, id):
        return PokerPlayerMockup()
    def getVariantName(self):
        return ""
    def getBettingStructureName(self):
        return ""
    def isRunning(self):
        return True

class PokerFactoryMockup:
    def getGame(self, id):
        return PokerGameMockup()

class PokerProtocolMockup:
    def getSerial(self):
        return 0
    def getCurrentGameId(self):
        return 0

class PokerDisplayMockup:
    verbose = 1
    factory = PokerFactoryMockup()
    glade = PokerGladeMockup()
    protocol = PokerProtocolMockup()

class PokerTable2DTest(unittest.TestCase):
    def setUp(self):
        self.table = PokerTable2D(PokerTableMockup(), PokerDisplayMockup())
        self.table.table_status = PokerWidgetMockup("table_status")
        self.names = ["toto", "titi"]
        self.namesInPosition = map(lambda x: "<u>%s</u>" % x, self.names)
        self.table.render(PokerPacketPlayerArriveMockup(0, self.names[0]))
        self.table.render(PokerPacketPlayerArriveMockup(1, self.names[1]))
        PokerWidgetMockup.texts = []
    def tearDown(self):
        pass
    def test_packetPlayerPositionNone(self):
        self.table.render(PokerPacketPositionMockup(-1))
        self.assertEquals(2, len(PokerWidgetMockup.texts))
        self.assertEquals(self.names[0], PokerWidgetMockup.texts[0])
        self.assertEquals(self.names[1], PokerWidgetMockup.texts[1])
    def test_packetPlayerPosition0(self):
        self.table.render(PokerPacketPositionMockup(0))
        self.assertEquals(2, len(PokerWidgetMockup.texts))
        self.assertEquals(self.namesInPosition[0], PokerWidgetMockup.texts[0])
        self.assertEquals(self.names[1], PokerWidgetMockup.texts[1])
    def test_packetPlayerPosition1(self):
        self.table.render(PokerPacketPositionMockup(1))
        self.assertEquals(2, len(PokerWidgetMockup.texts))
        self.assertEquals(self.names[0], PokerWidgetMockup.texts[0])
        self.assertEquals(self.namesInPosition[1], PokerWidgetMockup.texts[1])
    def test_reset(self):
        self.table.reset()
        self.assertEquals(True, PokerWidgetMockup.show_called["game_background"])

class PokerDisplay2DTest(unittest.TestCase):
    def setUp(self):

	my_settings = Config([''])
	my_settings.load("./conf/poker2d.xml")
	my_config = Config([''])
	my_config.load("@top_srcdir@/tests/conf/client.xml")
	self.display2d = PokerDisplay2D(settings = my_settings, config = my_config, factory = None);

    def tearDown(self):
	pass

    def test_TestInit(self):
        #
        # Because interface2d.glade is shipped with the sources,
        # make distcheck will fail to find it in the build
        #
        self.display2d.datadir = "../pokerclient2d/data"
        if not os.path.exists(self.display2d.datadir . "/interface/interface2d.glade"):
            self.display2d.datadir = "@top_srcdir@/pokerclient2d/data"
	self.display2d.init()
	self.assertNotEqual(None, self.display2d.glade)
        self.assertEqual("../pokerclient2d/data/skin/gtkrc", rc_parseMockup.gtkrc)

class PokerDisplay2DCardTest(unittest.TestCase):
    def test_PokerTableRenderPacketBoardCards(self):
        self.table = PokerTable2D(PokerTableMockup(), PokerDisplayMockup())
        cards = ("As", "Ac", "Ad")
        PokerEvalMockup.cards = cards
        cards2files = map(lambda card: "pixmaps/cards/small-%s.png" % card, cards)
        self.table.render(PokerPacketBoardCardsMockup())
        self.assertEquals(len(cards2files), len(PokerWidgetMockup.files))
        for i in range(0, len(cards2files)):
            self.assertEquals(cards2files[i], PokerWidgetMockup.files[i])

class PokerHandMockup:
    list = (0, 0)
    def tolist(self, arg):
        return PokerHandMockup.list

class PokerPlayerMockup:
    serial = 1
    seat = 0
    name = ""
    url = ""
    outfit = "white"
    hand = PokerHandMockup()

class PokerTableMockup:
    id = 0
    verbose = 5
    cards_slots = (0, 1)
    glade = PokerGladeMockup()
    game = PokerGameMockup()

class PokerPlayer2DCardTest(unittest.TestCase):
    def setUp(self):
        PokerWidgetMockup.files = []
        self.player = PokerPlayer2D(PokerPlayerMockup(), PokerTableMockup())
    def test_updateCardsBack(self):
        PokerHandMockup.list = (255, 255)
        back = "pixmaps/cards/small-back.png"
        self.player.updateCards()
        self.assertEquals(2, len(PokerWidgetMockup.files))
        for i in range(len(PokerWidgetMockup.files)):
            self.assertEquals(back, PokerWidgetMockup.files[i])
    def test_updateCards(self):
        PokerHandMockup.list = (0, 0)
        cards = ("As", "Ac")
        PokerEvalMockup.cards = cards
        cards2files = map(lambda card: "pixmaps/cards/small-%s.png" % card, cards)
        self.player.updateCards()
        self.assertEquals(2, len(PokerWidgetMockup.files))
        for i in range(len(PokerWidgetMockup.files)):
            self.assertEquals(cards2files[i], PokerWidgetMockup.files[i])        

if __name__ == '__main__':
    unittest.main()

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerdisplay2d.py ) ; ( cd ../tests ; make TESTS='test-pokerdisplay2d.py' check )"
# End:
