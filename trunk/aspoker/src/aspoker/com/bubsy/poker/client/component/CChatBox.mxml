<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//     Copyright (C) 2008 Bruno Garnier <bruno.garnier@gmail.com>
//
//     This program is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////
-->

<s:Panel 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/halo"
    initialize="initChat()"
    title="Chat" 
    width="100%" 
    height="150" 
    verticalCenter="0" 
    horizontalCenter="0">

    <fx:Script>
        <![CDATA[
            /*****************************************************************************************************
            * Emoticon Chat build with Flash Builder 4 Beta
            * Written by: Jan Ooms
            * email: flexyjean@gmail.com
            * blog: http://www.2dtf.be/
            * 
            * By using the Emoticon Chat, you agree to keep the above contact information in the source code.
            * 
            * Emoticon Chat is (c) 2009 Jan Ooms and is released under the MIT License:
            * http://www.opensource.org/licenses/mit-license.php 
            *****************************************************************************************************/

            import flashx.textLayout.elements.InlineGraphicElement;
            import flashx.textLayout.elements.FlowLeafElement;
            import mx.events.FlexEvent;
            import flashx.textLayout.events.FlowOperationEvent;
            import flashx.textLayout.events.CompositionCompletionEvent;
            import flashx.textLayout.events.UpdateCompletionEvent;
            import flashx.textLayout.elements.SpanElement;
            import flashx.textLayout.conversion.TextFilter;
            import flash.text.engine.TextElement;
            import flashx.textLayout.elements.FlowElement;
            import flashx.textLayout.elements.ParagraphElement;
            import mx.core.BitmapAsset;
    
            private var autoTypeTimer:Timer;
            private var maxLines:Number = 20;
            private var randLines:Array = ["",
            "The Text Layout Framework is an extensible library :-D, built on the new text engine in Adobe Flash Player 10 ;-).",
            "Rich developer APIs to manipulate text content :|, layout, markup and create custom text components.",
            "Microsoft you douchebags :s, stop installing unattended firefox plugins that slow down my browser :(!"];
            
            [Bindable]
            [Embed("/assets/emoticons/smile.png")]
            private var smileIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/sad.png")]
            private var sadIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/laugh.png")]
            private var happyIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/wink.gif")]
            private var winkIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/what.png")]
            private var shockedIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/cry.gif")]
            private var cryingIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/thinking.gif")]
            private var confusedIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/sleepy.gif")]
            private var boredIconClass:Class;
            [Bindable]
            [Embed("/assets/emoticons/tongue.png")]
            private var tongueIconClass:Class;
            public var smilies:Array = [
              [[":)",":-)"],smileIconClass],
              [[":(",":-("],sadIconClass],
              [[":D",":-D"],happyIconClass],
              [[";)",";-)"],winkIconClass],
              [[":O",":o",":-o",":-O",":0",":-0"],shockedIconClass],
              [[";(",";~(",";-("],cryingIconClass],
              [[":s",":-s"],confusedIconClass],
              [[":|",":-|"],boredIconClass],
              [[":P",":p",":-p",":-P"],tongueIconClass]
            ];
                
            private function initChat():void
            {
                autoTypeTimer = new Timer(1000);
                autoTypeTimer.addEventListener(TimerEvent.TIMER, onAutoTypeTimer);
                chatInput.addEventListener(KeyboardEvent.KEY_UP, onKeyDown);
                chatOutputRichText.addEventListener(FlexEvent.UPDATE_COMPLETE, onChatOutputUpdate);
            }
            private function onAutoTypeTimer(evt:TimerEvent):void
            {
                chatInput.text = randLines[Math.round(Math.random()*(randLines.length-1))]
                sendChatMessage();
            }
            private function onKeyDown(evt:KeyboardEvent):void
            {
                if(evt.keyCode == Keyboard.ENTER) {
                    sendChatMessage();
                }
            }
            
            private function sendChatMessage():void
            {
               sendChat(chatInput.text); 
               chatInput.text = "";
            }
 
            public function sendChat(str:String):void
            {
                str = str.replace(/[\n]/g, "");
                if(str.length > 3) {
                    var t:String = str;
                    var p:ParagraphElement = new ParagraphElement();
                    p.verticalAlign = "middle";
                    var bspan:SpanElement = new SpanElement();
                    bspan.text = "";
                    bspan.fontWeight = "bold";
                    p.addChild(bspan);
                    
                    var rebuildArray:Array = new Array();
                    var lastPos:Number = 0;
                    for(var i:uint=0; i<t.length; i++) {
                        for(var j:uint=0;j<smilies.length;j++) {
                            var smiliesTextArr:Array = smilies[j][0];
                            for(var k:uint=0;k<smiliesTextArr.length;k++) {
                                if(t.substr(i, smiliesTextArr[k].length) == smiliesTextArr[k]) {
                                    rebuildArray.push(t.substr(lastPos, (i-lastPos)));
                                    rebuildArray.push(smilies[j][1]);
                                    lastPos = (i+smiliesTextArr[k].length);
                                }
                            }
                        }
                    }
                    
                    if(rebuildArray.length < 1) {
                        var span:SpanElement = new SpanElement();
                        span.text = str;
                        p.addChild(span);
                    } else {
                        for(var i:uint=0;i<rebuildArray.length;i++) {
                            if(rebuildArray[i] is String) {
                                var span:SpanElement = new SpanElement();
                                span.text = rebuildArray[i];
                                p.addChild(span);
                            } else if(rebuildArray[i] is Class) {
                                var imgelement:InlineGraphicElement = new InlineGraphicElement();
                                imgelement.source = rebuildArray[i];
                                p.addChild(imgelement);
                            }
                        }
                    }
                    
                    var textFlow:TextFlow = new TextFlow();
                    textFlow.addChild(p);
                    
                    chatOutput.addChild(textFlow);
                }
                cleanLines();
            }
            private function getIconText(imgclass:Class):String
            {
                for(var i:uint=0;i<smilies.length;i++) {
                    if(smilies[i][1] == imgclass) {
                        return smilies[i][0][0].toString();
                    }
                }
                return "";
            }
            private function cleanLines():void
            {
                if(chatOutput.numChildren > maxLines) {
                    for(var i:uint=0;i<(chatOutput.numChildren-10);i++) {
                        chatOutput.removeChildAt(i);
                    }
                }
            }
            private function onChatOutputUpdate(evt:FlexEvent):void
            {
                chatOutputVScroll.value = chatOutputVScroll.maximum;
            }
            private function toggleAutoType():void
            {
                if(!toggleAutoTypeBtn.selected) {
                    autoTypeTimer.stop();
                    toggleAutoTypeBtn.selected = false;
                } else {
                    autoTypeTimer.reset();
                    autoTypeTimer.start();
                    toggleAutoTypeBtn.selected = true;
                }    
            }
        ]]>
    </fx:Script>
        <s:layout>
            <s:VerticalLayout  />
        </s:layout> 
        <s:HGroup width="100%" height="100%">
            <s:Group width="100%" height="100%" id="chatOutputGroup">
                <s:RichEditableText editable="false" width="100%" id="chatOutputRichText">
                    <s:TextFlow color="0x555555" fontSize="14" id="chatOutput" />
                </s:RichEditableText>
            </s:Group>
            <s:VScrollBar id="chatOutputVScroll" height="100%" viewport="{chatOutputGroup}" /> 
        </s:HGroup>
        <s:HGroup width="100%" height="10%" >
            <mx:TextInput width="100%" height="90%" id="chatInput" />
            <s:Button label="Send" click="sendChatMessage()" id="chatSendBtn" width="100" height="10%" />
            <s:ToggleButton label="AutoChat" selected="false" click="toggleAutoType()"  id="toggleAutoTypeBtn" width="100" height="10%" />
        </s:HGroup>
    </s:Panel>
