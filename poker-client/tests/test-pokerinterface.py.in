#!@PYTHON@
# -*- mode: python -*-
#
# Copyright (C) 2007, 2008 Loic Dachary <loic@dachary.org>
# Copyright (C) 2006 Mekensleep <licensing@mekensleep.com>
#                    24 rue vieille du temple, 75004 Paris
#
# This software's license gives you freedom; you can copy, convey,
# propagate, redistribute and/or modify this program under the terms of
# the GNU Affero General Public License (AGPL) as published by the Free
# Software Foundation (FSF), either version 3 of the License, or (at your
# option) any later version of the AGPL published by the FSF.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program in a file in the toplevel directory called
# "AGPLv3".  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#  Loic Dachary <loic@gnu.org>
#  Johan Euphrosine <johan@mekensleep.com>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest

from tests.testmessages import silence_all_messages
verbose = int(os.environ.get('VERBOSE_T', '-1'))
if verbose < 0: silence_all_messages()

from pokerui.pokerrenderer import PokerRenderer, PokerInteractors
from pokerui.pokerinterface import PokerInterface, INTERFACE_CHECK_WARNING
from pokernetwork.pokerclientpackets import PACKET_POKER_FOLD

class PokerGameMockup:
    def __init__(self):
	pass
    def canCheck(self, serial):
	return True

class PokerInterfaceMockup(PokerInterface):
    def __init__(self):
	PokerInterface.__init__(self)
	self.verbose = 1
	self.registeredEvent = None
	self.registeredHandler = None
    def command(self, command):
	pass
    def registerHandler(self, event, handler):
	self.registeredEvent = event
	self.registeredHandler = handler
	PokerInterface.registerHandler(self, event, handler)

class PokerDisplayMockup:
    def __init__(self):
	pass
    def render(self, packet):
	pass

class PokerFactoryMockup:
    def __init__(self):
	self.interface = PokerInterfaceMockup()
	self.display = PokerDisplayMockup()
    def getGame(self, id):
	return PokerGameMockup()

class PokerRendererMockup(PokerRenderer):
    def __init__(self):
	pass

class PokerProtocolMockup:
    def __init__(self):
	pass
    def getSerial(self):
	return 0

class PokerInteractorsMockup(PokerInteractors):
    def __init__(self):
	self.renderer = PokerRendererMockup()
	self.factory = PokerFactoryMockup()
	self.renderer.factory = self.factory
	self.protocol = PokerProtocolMockup()
	self.interactorCheckWarningCalled = False
    def interactorCheckWarning(self, response):
	self.interactorCheckWarningCalled = True

class PokerPacketMockupup:
    def __init__(self):
	self.type = PACKET_POKER_FOLD

class PokerInteractorMockup:
    def __init__(self):
	self.game_id = 0
    def getSelectedValue(self):
	return PokerPacketMockupup()
	

class PokerInterfaceTestCase(unittest.TestCase):
# -----------------------------------------------------------------------------------------------------
    def setUp(self):
	pass
# -----------------------------------------------------------------------------------------------------
    def tearDown(self):
	pass
# -----------------------------------------------------------------------------------------------------
    def test_interfaceCheckWarning(self):
	interactors = PokerInteractorsMockup()
	self.assertEquals(False, interactors.interactorCheckWarningCalled)
	interactors.interactorAction(PokerInteractorMockup())
	self.assertEquals(INTERFACE_CHECK_WARNING, interactors.factory.interface.registeredEvent)
	self.assertEquals(interactors.interactorCheckWarning, interactors.factory.interface.registeredHandler)
	self.assertEquals(True, interactors.factory.interface.callbacks.has_key(INTERFACE_CHECK_WARNING))
	interactors.factory.interface.handleCheckWarning(("check",))
	self.assertEquals(True, interactors.interactorCheckWarningCalled)
	self.assertEquals(False, interactors.factory.interface.callbacks.has_key(INTERFACE_CHECK_WARNING))
	interactors.factory.interface.handleCheckWarning(("check",))

# -----------------------------------------------------------------------------------------------------
def GetTestSuite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(PokerInterfaceTestCase))
    return suite

# -----------------------------------------------------------------------------------------------------
def Run(verbose = 2):
    return unittest.TextTestRunner(verbosity=verbose).run(GetTestSuite())
    
# -----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    if Run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/test-pokerinterface.py ) ; ( cd ../tests ; make TESTS='test-pokerinterface.py' check )"
# End:
